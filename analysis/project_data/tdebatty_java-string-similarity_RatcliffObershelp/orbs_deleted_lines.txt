src/main/java/info/debatty/java/stringsimilarity/Jaccard.java
src/main/java/info/debatty/java/stringsimilarity/Damerau.java
src/main/java/info/debatty/java/stringsimilarity/experimental/Sift4.java
src/main/java/info/debatty/java/stringsimilarity/SorensenDice.java
src/main/java/info/debatty/java/stringsimilarity/CharacterInsDelInterface.java
src/main/java/info/debatty/java/stringsimilarity/WeightedLevenshtein.java
src/main/java/info/debatty/java/stringsimilarity/NormalizedLevenshtein.java
src/main/java/info/debatty/java/stringsimilarity/NGram.java
src/main/java/info/debatty/java/stringsimilarity/CharacterSubstitutionInterface.java
src/main/java/info/debatty/java/stringsimilarity/QGram.java
src/main/java/info/debatty/java/stringsimilarity/Levenshtein.java
src/main/java/info/debatty/java/stringsimilarity/ShingleBased.java
src/main/java/info/debatty/java/stringsimilarity/JaroWinkler.java
src/main/java/info/debatty/java/stringsimilarity/Cosine.java
src/main/java/info/debatty/java/stringsimilarity/OptimalStringAlignment.java
src/main/java/info/debatty/java/stringsimilarity/examples/PrecomputedCosine.java
src/main/java/info/debatty/java/stringsimilarity/examples/Examples.java
src/main/java/info/debatty/java/stringsimilarity/examples/MetricLCS.java
src/main/java/info/debatty/java/stringsimilarity/examples/nischay21.java
src/main/java/info/debatty/java/stringsimilarity/LongestCommonSubsequence.java
src/main/java/info/debatty/java/stringsimilarity/MetricLCS.java
src/main/java/info/debatty/java/stringsimilarity/RatcliffObershelp.java
1:/*
2: * The MIT License
3: *
4: * Copyright 2015 Thibault Debatty.
5: *
6: * Permission is hereby granted, free of charge, to any person obtaining a copy
7: * of this software and associated documentation files (the "Software"), to deal
8: * in the Software without restriction, including without limitation the rights
9: * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
10: * copies of the Software, and to permit persons to whom the Software is
11: * furnished to do so, subject to the following conditions:
12: *
13: * The above copyright notice and this permission notice shall be included in
14: * all copies or substantial portions of the Software.
15: *
16: * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
17: * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
18: * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
19: * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
20: * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
21: * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
22: * THE SOFTWARE.
23: */
31:import net.jcip.annotations.Immutable;
32:
33:/**
34: * Ratcliff/Obershelp pattern recognition
35: * The Ratcliff/Obershelp algorithm computes the similarity of two strings a
36: * the doubled number of matching characters divided by the total number of
37: * characters in the two strings. Matching characters are those in the longest
38: * common subsequence plus, recursively, matching characters in the unmatched
39: * region on either side of the longest common subsequence.
40: * The Ratcliff/Obershelp distance is computed as 1 - Ratcliff/Obershelp
41: * similarity.
42: *
43: * @author Ligi https://github.com/dxpux (as a patch for fuzzystring)
44: * Ported to java from .net by denmase
45: */
46:@Immutable
50:    /**
51:     * Compute the Ratcliff-Obershelp similarity between strings.
52:     *
53:     * @param s1 The first string to compare.
54:     * @param s2 The second string to compare.
55:     * @return The RatcliffObershelp similarity in the range [0, 1]
56:     * @throws NullPointerException if s1 or s2 is null.
57:     */
58:    @Override
60:        if (s1 == null) {
61:            throw new NullPointerException("s1 must not be null");
62:        }
63:
64:        if (s2 == null) {
65:            throw new NullPointerException("s2 must not be null");
66:        }
82:    /**
83:     * Return 1 - similarity.
84:     *
85:     * @param s1 The first string to compare.
86:     * @param s2 The second string to compare.
87:     * @return 1 - similarity
88:     * @throws NullPointerException if s1 or s2 is null.
89:     */
90:    @Override
src/main/java/info/debatty/java/stringsimilarity/interfaces/NormalizedStringSimilarity.java
src/main/java/info/debatty/java/stringsimilarity/interfaces/NormalizedStringDistance.java
src/main/java/info/debatty/java/stringsimilarity/interfaces/StringSimilarity.java
src/main/java/info/debatty/java/stringsimilarity/interfaces/MetricStringDistance.java
src/main/java/info/debatty/java/stringsimilarity/interfaces/StringDistance.java
