covered_ps,covgap_slicer4j_slice,covgap_porbs_slice,pseudotested_ps,statement_type,line_no,Original Code,What is the purpose of this code?,Notes
FALSE,FALSE,FALSE,FALSE,,1,/**,,
FALSE,FALSE,FALSE,FALSE,,2,*    Copyright 2011 Peter Murray-Rust,,
FALSE,FALSE,FALSE,FALSE,,3,*,,
FALSE,FALSE,FALSE,FALSE,,4,"*    Licensed under the Apache License, Version 2.0 (the ""License"");",,
FALSE,FALSE,FALSE,FALSE,,5,*    you may not use this file except in compliance with the License.,,
FALSE,FALSE,FALSE,FALSE,,6,*    You may obtain a copy of the License at,,
FALSE,FALSE,FALSE,FALSE,,7,*,,
FALSE,FALSE,FALSE,FALSE,,8,*        http://www.apache.org/licenses/LICENSE-2.0,,
FALSE,FALSE,FALSE,FALSE,,9,*,,
FALSE,FALSE,FALSE,FALSE,,10,"*    Unless required by applicable law or agreed to in writing, software",,
FALSE,FALSE,FALSE,FALSE,,11,"*    distributed under the License is distributed on an ""AS IS"" BASIS,",,
FALSE,FALSE,FALSE,FALSE,,12,"*    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",,
FALSE,FALSE,FALSE,FALSE,,13,*    See the License for the specific language governing permissions and,,
FALSE,FALSE,FALSE,FALSE,,14,*    limitations under the License.,,
FALSE,FALSE,FALSE,FALSE,,15,*/,,
FALSE,FALSE,FALSE,FALSE,,16,,,
FALSE,FALSE,FALSE,FALSE,,17,package org.xmlcml.euclid;,,
FALSE,FALSE,FALSE,FALSE,,18,,,
FALSE,FALSE,FALSE,FALSE,,19,import org.apache.log4j.Logger;,,
FALSE,FALSE,FALSE,FALSE,,20,,,
FALSE,FALSE,FALSE,FALSE,,21,/**,,
FALSE,FALSE,FALSE,FALSE,,22,* square matrix class,,
FALSE,FALSE,FALSE,FALSE,,23,*,,
FALSE,FALSE,FALSE,FALSE,,24,* IntSquareMatrix represents a square m-x-m matrix. The basic matrix algebra,,
FALSE,FALSE,FALSE,FALSE,,25,* for square matrices is represented here Check out the exciting member,,
FALSE,FALSE,FALSE,FALSE,,26,"* functions, which are supported by Exceptions where appropriate. (NB. No",,
FALSE,FALSE,FALSE,FALSE,,27,"* attempt has been made to provide numerical robustness and inversion,",,
FALSE,FALSE,FALSE,FALSE,,28,"* diagonalisation, etc are as you find them.)",,
FALSE,FALSE,FALSE,FALSE,,29,* <P>,,
FALSE,FALSE,FALSE,FALSE,,30,*,,
FALSE,FALSE,FALSE,FALSE,,31,"* @author (C) P. Murray-Rust, 1996",,
FALSE,FALSE,FALSE,FALSE,,32,*/,,
FALSE,FALSE,FALSE,FALSE,,33,public class IntSquareMatrix extends IntMatrix {,,
FALSE,FALSE,FALSE,FALSE,,34,/**,,
FALSE,FALSE,FALSE,FALSE,,35,* helper class to provide types of matrix.,,
FALSE,FALSE,FALSE,FALSE,,36,*/,,
FALSE,FALSE,FALSE,FALSE,,37,/** type */,,
FALSE,FALSE,FALSE,FALSE,,38,public enum Type {,,
FALSE,FALSE,FALSE,FALSE,,39,/**  */,,
FALSE,FALSE,FALSE,FALSE,,40,"UPPER_TRIANGLE(1),",,
FALSE,FALSE,FALSE,FALSE,,41,/**  */,,
FALSE,FALSE,FALSE,FALSE,,42,"LOWER_TRIANGLE(2),",,
FALSE,FALSE,FALSE,FALSE,,43,/**  */,,
FALSE,FALSE,FALSE,FALSE,,44,"SYMMETRIC(3),",,
FALSE,FALSE,FALSE,FALSE,,45,/**  */,,
FALSE,FALSE,FALSE,FALSE,,46,"DIAGONAL(4),",,
FALSE,FALSE,FALSE,FALSE,,47,/**  */,,
FALSE,FALSE,FALSE,FALSE,,48,"OUTER_PRODUCT(5),",,
FALSE,FALSE,FALSE,FALSE,,49,/**  */,,
FALSE,FALSE,FALSE,FALSE,,50,UNKNOWN(6);,,
FALSE,FALSE,FALSE,FALSE,,51,/** integer value */,,
FALSE,FALSE,FALSE,FALSE,,52,public int i;,,
FALSE,FALSE,FALSE,FALSE,,53,private Type(int i) {,,
FALSE,FALSE,FALSE,FALSE,,54,this.i = i;,,
FALSE,FALSE,FALSE,FALSE,,55,},,
FALSE,FALSE,FALSE,FALSE,,56,},,
FALSE,FALSE,FALSE,FALSE,,57,final static Logger LOG = Logger.getLogger(IntSquareMatrix.class);,,
FALSE,FALSE,FALSE,FALSE,,58,/**,,
FALSE,FALSE,FALSE,FALSE,,59,* Constructor. This gives a default matrix with cols = rows = 0.,,
FALSE,FALSE,FALSE,FALSE,,60,*/,,
FALSE,FALSE,FALSE,FALSE,,61,public IntSquareMatrix() {,,
FALSE,FALSE,FALSE,FALSE,,62,super();,,
FALSE,FALSE,FALSE,FALSE,,63,},,
FALSE,FALSE,FALSE,FALSE,,64,/**,,
FALSE,FALSE,FALSE,FALSE,,65,* Constructor.,,
FALSE,FALSE,FALSE,FALSE,,66,*,,
FALSE,FALSE,FALSE,FALSE,,67,* @param rows,,
FALSE,FALSE,FALSE,FALSE,,68,*            number of rows and columns values are set to zero,,
FALSE,FALSE,FALSE,FALSE,,69,*/,,
FALSE,FALSE,FALSE,FALSE,,70,public IntSquareMatrix(int rows) {,,
FALSE,FALSE,FALSE,FALSE,,71,"super(rows, rows);",,
FALSE,FALSE,FALSE,FALSE,,72,},,
FALSE,FALSE,FALSE,FALSE,,73,/**,,
FALSE,FALSE,FALSE,FALSE,,74,* Creates square matrix from real matrix.,,
FALSE,FALSE,FALSE,FALSE,,75,*,,
FALSE,FALSE,FALSE,FALSE,,76,* @param f,,
FALSE,FALSE,FALSE,FALSE,,77,*            real array (length rows) multiplied to give outer product,,
FALSE,FALSE,FALSE,FALSE,,78,* @return square matrix of size rows * rows,,
FALSE,FALSE,FALSE,FALSE,,79,*/,,
FALSE,FALSE,FALSE,FALSE,,80,public static IntSquareMatrix outerProduct(IntArray f) {,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,81,int rows = f.size();,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,82,IntSquareMatrix temp = new IntSquareMatrix(rows);,,
TRUE,TRUE,FALSE,FALSE,FOR,83,for (int i = 0; i < rows; i++) {,Iteration,
TRUE,TRUE,FALSE,FALSE,FOR,84,for (int j = 0; j < rows; j++) {,Iteration,
TRUE,TRUE,FALSE,FALSE,EXPRESSION,85,temp.flmat[i][j] = f.elementAt(i) * f.elementAt(j);,Mathematical Computation,
FALSE,FALSE,FALSE,FALSE,FOR,86,},,
FALSE,FALSE,FALSE,FALSE,FOR,87,},,
TRUE,FALSE,FALSE,FALSE,RETURN,88,return temp;,,
FALSE,FALSE,FALSE,FALSE,,89,},,
FALSE,FALSE,FALSE,FALSE,,90,/**,,
FALSE,FALSE,FALSE,FALSE,,91,* create diagonal matrix from real matrix.,,
FALSE,FALSE,FALSE,FALSE,,92,*,,
FALSE,FALSE,FALSE,FALSE,,93,* @param f,,
FALSE,FALSE,FALSE,FALSE,,94,*            real array (length rows),,
FALSE,FALSE,FALSE,FALSE,,95,"* @return square matrix with elem (i, i) = f(i), else 0",,
FALSE,FALSE,FALSE,FALSE,,96,*/,,
FALSE,FALSE,FALSE,FALSE,,97,public static IntSquareMatrix diagonal(IntArray f) {,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,98,int rows = f.size();,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,99,IntSquareMatrix temp = new IntSquareMatrix(rows);,,
TRUE,TRUE,FALSE,FALSE,FOR,100,for (int i = 0; i < rows; i++) {,Iteration,
TRUE,TRUE,FALSE,FALSE,EXPRESSION,101,temp.flmat[i][i] = f.elementAt(i);,Mathematical Computation,
FALSE,FALSE,FALSE,FALSE,FOR,102,},,
TRUE,FALSE,FALSE,FALSE,RETURN,103,return temp;,,
FALSE,FALSE,FALSE,FALSE,,104,},,
FALSE,FALSE,FALSE,FALSE,,105,/**,,
FALSE,FALSE,FALSE,FALSE,,106,* Creates real square matrix from array THE COLUMN IS THE FASTEST MOVING,,
FALSE,FALSE,FALSE,FALSE,,107,"* INDEX, that is the matrix is filled as mat(0,0), mat(0,1) ... C-LIKE",,
FALSE,FALSE,FALSE,FALSE,,108,*,,
FALSE,FALSE,FALSE,FALSE,,109,* @param rows,,
FALSE,FALSE,FALSE,FALSE,,110,*            the final rows and cols of real square matrix,,
FALSE,FALSE,FALSE,FALSE,,111,* @param array,,
FALSE,FALSE,FALSE,FALSE,,112,*            of size (rows * rows),,
FALSE,FALSE,FALSE,FALSE,,113,* @exception EuclidRuntimeException,,
FALSE,FALSE,FALSE,FALSE,,114,*                <code>array</code> size must be multiple of <code>rows</code>,,
FALSE,FALSE,FALSE,FALSE,,115,*/,,
FALSE,FALSE,FALSE,FALSE,,116,"public IntSquareMatrix(int rows, int[] array) {",,
FALSE,FALSE,FALSE,FALSE,,117,"super(rows, rows, array);",,
FALSE,FALSE,FALSE,FALSE,,118,},,
FALSE,FALSE,FALSE,FALSE,,119,/**,,
FALSE,FALSE,FALSE,FALSE,,120,* Creates real square matrix with all elements initialized to int value.,,
FALSE,FALSE,FALSE,FALSE,,121,*,,
FALSE,FALSE,FALSE,FALSE,,122,* @param rows,,
FALSE,FALSE,FALSE,FALSE,,123,*            size of square matrix,,
FALSE,FALSE,FALSE,FALSE,,124,* @param f,,
FALSE,FALSE,FALSE,FALSE,,125,*            value of all elements,,
FALSE,FALSE,FALSE,FALSE,,126,*/,,
FALSE,FALSE,FALSE,FALSE,,127,"public IntSquareMatrix(int rows, int f) {",,
FALSE,FALSE,FALSE,FALSE,,128,"super(rows, rows, f);",,
FALSE,FALSE,FALSE,FALSE,,129,},,
FALSE,FALSE,FALSE,FALSE,,130,/**,,
FALSE,FALSE,FALSE,FALSE,,131,* Constructor for submatrix of another matrix.,,
FALSE,FALSE,FALSE,FALSE,,132,*,,
FALSE,FALSE,FALSE,FALSE,,133,* @param m,,
FALSE,FALSE,FALSE,FALSE,,134,*            matrix to slice (need not be square),,
FALSE,FALSE,FALSE,FALSE,,135,* @param lowrow,,
FALSE,FALSE,FALSE,FALSE,,136,*            the start row inclusive (count from 0),,
FALSE,FALSE,FALSE,FALSE,,137,* @param lowcol,,
FALSE,FALSE,FALSE,FALSE,,138,*            the start column inclusive (count from 0),,
FALSE,FALSE,FALSE,FALSE,,139,* @param rows,,
FALSE,FALSE,FALSE,FALSE,,140,*            size of final matrix,,
FALSE,FALSE,FALSE,FALSE,,141,* @throws EuclidRuntimeException,,
FALSE,FALSE,FALSE,FALSE,,142,*/,,
FALSE,FALSE,FALSE,FALSE,,143,"public IntSquareMatrix(IntMatrix m, int lowrow, int lowcol, int rows)",,
FALSE,FALSE,FALSE,FALSE,,144,throws EuclidRuntimeException {,,
FALSE,FALSE,FALSE,FALSE,,145,"super(m, lowrow, lowrow + rows - 1, lowcol, lowcol + rows - 1);",,
FALSE,FALSE,FALSE,FALSE,,146,},,
FALSE,FALSE,FALSE,FALSE,,147,/**,,
FALSE,FALSE,FALSE,FALSE,,148,* copy constructor.,,
FALSE,FALSE,FALSE,FALSE,,149,*,,
FALSE,FALSE,FALSE,FALSE,,150,* @param m,,
FALSE,FALSE,FALSE,FALSE,,151,*            matrix to copy,,
FALSE,FALSE,FALSE,FALSE,,152,*/,,
FALSE,FALSE,FALSE,FALSE,,153,public IntSquareMatrix(IntSquareMatrix m) {,,
FALSE,FALSE,FALSE,FALSE,,154,super(m);,,
FALSE,FALSE,FALSE,FALSE,,155,},,
FALSE,FALSE,FALSE,FALSE,,156,/**,,
FALSE,FALSE,FALSE,FALSE,,157,* shallow copy from IntMatrix,,
FALSE,FALSE,FALSE,FALSE,,158,*,,
FALSE,FALSE,FALSE,FALSE,,159,* the array values are not copied (only the reference),,
FALSE,FALSE,FALSE,FALSE,,160,*,,
FALSE,FALSE,FALSE,FALSE,,161,* @param m,,
FALSE,FALSE,FALSE,FALSE,,162,*            matrix to copy reference from,,
FALSE,FALSE,FALSE,FALSE,,163,*,,
FALSE,FALSE,FALSE,FALSE,,164,* @exception EuclidRuntimeException,,
FALSE,FALSE,FALSE,FALSE,,165,*                <code>m</code> must be square (that is cols = rows),,
FALSE,FALSE,FALSE,FALSE,,166,*/,,
FALSE,FALSE,FALSE,FALSE,,167,public IntSquareMatrix(IntMatrix m) throws EuclidRuntimeException {,,
FALSE,FALSE,FALSE,FALSE,,168,"super(m.rows, m.cols);",,
TRUE,TRUE,TRUE,TRUE,IF,169,if (m.cols != m.rows) {,Defensive Programming / Throw Exception,
FALSE,FALSE,FALSE,FALSE,THROW,170,"throw new EuclidRuntimeException(""non square matrix"");",,
FALSE,FALSE,FALSE,FALSE,IF,171,},,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,172,this.flmat = m.flmat;,,
FALSE,FALSE,FALSE,FALSE,,173,},,
FALSE,FALSE,FALSE,FALSE,,174,/**,,
FALSE,FALSE,FALSE,FALSE,,175,* constructor from array.,,
FALSE,FALSE,FALSE,FALSE,,176,*,,
FALSE,FALSE,FALSE,FALSE,,177,* form from a Java 2-D array (it holds row and column count),,
FALSE,FALSE,FALSE,FALSE,,178,*,,
FALSE,FALSE,FALSE,FALSE,,179,* @param matrix,,
FALSE,FALSE,FALSE,FALSE,,180,*            to copy,,
FALSE,FALSE,FALSE,FALSE,,181,* @exception EuclidRuntimeException,,
FALSE,FALSE,FALSE,FALSE,,182,*                <code>matrix</code> is not square (might even not be,,
FALSE,FALSE,FALSE,FALSE,,183,*                rectangular!),,
FALSE,FALSE,FALSE,FALSE,,184,*/,,
FALSE,FALSE,FALSE,FALSE,,185,public IntSquareMatrix(int[][] matrix) throws EuclidRuntimeException {,,
FALSE,FALSE,FALSE,FALSE,,186,super(matrix);,,
TRUE,TRUE,TRUE,TRUE,IF,187,if (cols != rows) {,Defensive Programming / Throw Exception,
FALSE,FALSE,FALSE,FALSE,THROW,188,"throw new EuclidRuntimeException(""non square matrix"");",,
FALSE,FALSE,FALSE,FALSE,IF,189,},,
FALSE,FALSE,FALSE,FALSE,,190,},,
FALSE,FALSE,FALSE,FALSE,,191,/**,,
FALSE,FALSE,FALSE,FALSE,,192,* shallowCopy an existing square matrix.,,
FALSE,FALSE,FALSE,FALSE,,193,*,,
FALSE,FALSE,FALSE,FALSE,,194,* @param m,,
FALSE,FALSE,FALSE,FALSE,,195,*            matrix to shallow copy,,
FALSE,FALSE,FALSE,FALSE,,196,* @exception EuclidRuntimeException,,
FALSE,FALSE,FALSE,FALSE,,197,*                <code>m</code> must have the same number of rows and cols as,,
FALSE,FALSE,FALSE,FALSE,,198,*                <code>this</code>,,
FALSE,FALSE,FALSE,FALSE,,199,*/,,
FALSE,FALSE,FALSE,FALSE,,200,public void shallowCopy(IntSquareMatrix m) throws EuclidRuntimeException {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,201,super.shallowCopy((IntMatrix) m);,,
FALSE,FALSE,FALSE,FALSE,,202,},,
FALSE,FALSE,FALSE,FALSE,,203,/**,,
FALSE,FALSE,FALSE,FALSE,,204,* are two matrices identical,,
FALSE,FALSE,FALSE,FALSE,,205,*,,
FALSE,FALSE,FALSE,FALSE,,206,* @param r,,
FALSE,FALSE,FALSE,FALSE,,207,*            matrix to compare,,
FALSE,FALSE,FALSE,FALSE,,208,* @return true if equal (see IntMatrix.equals for details),,
FALSE,FALSE,FALSE,FALSE,,209,*/,,
FALSE,FALSE,FALSE,FALSE,,210,public boolean isEqualTo(IntSquareMatrix r) {,,
TRUE,FALSE,TRUE,TRUE,RETURN,211,return super.isEqualTo((IntMatrix) r);,Parent Call,
FALSE,FALSE,FALSE,FALSE,,212,},,
FALSE,FALSE,FALSE,FALSE,,213,/**,,
FALSE,FALSE,FALSE,FALSE,,214,* matrix addition. adds conformable matrices. Does NOT alter this.,,
FALSE,FALSE,FALSE,FALSE,,215,*,,
FALSE,FALSE,FALSE,FALSE,,216,* @param m,,
FALSE,FALSE,FALSE,FALSE,,217,*            matrix to add,,
FALSE,FALSE,FALSE,FALSE,,218,* @exception EuclidRuntimeException,,
FALSE,FALSE,FALSE,FALSE,,219,*                <code>m</code> must have the same number of rows and cols as,,
FALSE,FALSE,FALSE,FALSE,,220,*                <code>this</code>,,
FALSE,FALSE,FALSE,FALSE,,221,* @return resultant matrix,,
FALSE,FALSE,FALSE,FALSE,,222,*/,,
FALSE,FALSE,FALSE,FALSE,,223,public IntSquareMatrix plus(IntSquareMatrix m) throws EuclidRuntimeException {,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,224,IntMatrix temp = super.plus((IntMatrix) m);,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,225,IntSquareMatrix sqm = new IntSquareMatrix(temp);,,
TRUE,FALSE,FALSE,FALSE,RETURN,226,return sqm;,,
FALSE,FALSE,FALSE,FALSE,,227,},,
FALSE,FALSE,FALSE,FALSE,,228,/**,,
FALSE,FALSE,FALSE,FALSE,,229,* matrix subtraction. subtracts conformable matrices. Does NOT alter this.,,
FALSE,FALSE,FALSE,FALSE,,230,*,,
FALSE,FALSE,FALSE,FALSE,,231,* @param m,,
FALSE,FALSE,FALSE,FALSE,,232,*            matrix to subtract from this,,
FALSE,FALSE,FALSE,FALSE,,233,* @exception EuclidRuntimeException,,
FALSE,FALSE,FALSE,FALSE,,234,*                <code>m</code> must have the same number of rows and cols as,,
FALSE,FALSE,FALSE,FALSE,,235,*                <code>this</code>,,
FALSE,FALSE,FALSE,FALSE,,236,* @return resultant matrix,,
FALSE,FALSE,FALSE,FALSE,,237,*/,,
FALSE,FALSE,FALSE,FALSE,,238,public IntSquareMatrix subtract(IntSquareMatrix m) throws EuclidRuntimeException {,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,239,IntMatrix temp = super.subtract((IntMatrix) m);,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,240,IntSquareMatrix sqm = new IntSquareMatrix(temp);,,
TRUE,FALSE,FALSE,FALSE,RETURN,241,return sqm;,,
FALSE,FALSE,FALSE,FALSE,,242,},,
FALSE,FALSE,FALSE,FALSE,,243,/**,,
FALSE,FALSE,FALSE,FALSE,,244,* matrix multiplication.,,
FALSE,FALSE,FALSE,FALSE,,245,*,,
FALSE,FALSE,FALSE,FALSE,,246,* multiplies conformable matrices; result is <code>this*m </code>,,
FALSE,FALSE,FALSE,FALSE,,247,*,,
FALSE,FALSE,FALSE,FALSE,,248,* @param m,,
FALSE,FALSE,FALSE,FALSE,,249,*            matrix to multiply by,,
FALSE,FALSE,FALSE,FALSE,,250,* @exception EuclidRuntimeException,,
FALSE,FALSE,FALSE,FALSE,,251,*                <code>m</code> must have the same number of rows as <code>this</code>,,
FALSE,FALSE,FALSE,FALSE,,252,*                has cols,,
FALSE,FALSE,FALSE,FALSE,,253,* @return new matrix,,
FALSE,FALSE,FALSE,FALSE,,254,*/,,
FALSE,FALSE,FALSE,FALSE,,255,public IntSquareMatrix multiply(IntSquareMatrix m) throws EuclidRuntimeException {,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,256,IntMatrix temp = super.multiply((IntMatrix) m);,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,257,IntSquareMatrix sqm = new IntSquareMatrix(temp);,,
TRUE,FALSE,FALSE,FALSE,RETURN,258,return sqm;,,
FALSE,FALSE,FALSE,FALSE,,259,},,
FALSE,FALSE,FALSE,FALSE,,260,/**,,
FALSE,FALSE,FALSE,FALSE,,261,* trace.,,
FALSE,FALSE,FALSE,FALSE,,262,*,,
FALSE,FALSE,FALSE,FALSE,,263,* @return the trace,,
FALSE,FALSE,FALSE,FALSE,,264,*/,,
FALSE,FALSE,FALSE,FALSE,,265,public int trace() {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,266,int trace = 0;,,
FALSE,FALSE,FALSE,FALSE,FOR,267,for (int i = 0; i < rows; i++) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,268,trace += flmat[i][i];,,
FALSE,FALSE,FALSE,FALSE,FOR,269,},,
FALSE,FALSE,FALSE,FALSE,RETURN,270,return trace;,,
FALSE,FALSE,FALSE,FALSE,,271,},,
FALSE,FALSE,FALSE,FALSE,,272,/**,,
FALSE,FALSE,FALSE,FALSE,,273,* is it a unit matrix.,,
FALSE,FALSE,FALSE,FALSE,,274,*,,
FALSE,FALSE,FALSE,FALSE,,275,* @return are all diagonals 1 and off-diagonal zero (within Int.isEqual()),,
FALSE,FALSE,FALSE,FALSE,,276,*/,,
FALSE,FALSE,FALSE,FALSE,,277,public boolean isUnit() {,,
TRUE,FALSE,FALSE,FALSE,FOR,278,for (int i = 0; i < rows; i++) {,,
TRUE,FALSE,FALSE,FALSE,FOR,279,for (int j = 0; j < rows; j++) {,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,280,int f = flmat[i][j];,,
TRUE,FALSE,FALSE,FALSE,IF,281,if ((f != 0 && (i != j)) || (f != 1 && (i == j))) {,,
TRUE,FALSE,FALSE,FALSE,RETURN,282,return false;,,
FALSE,FALSE,FALSE,FALSE,IF,283,},,
FALSE,FALSE,FALSE,FALSE,FOR,284,},,
FALSE,FALSE,FALSE,FALSE,FOR,285,},,
TRUE,FALSE,FALSE,FALSE,RETURN,286,return true;,,
FALSE,FALSE,FALSE,FALSE,,287,},,
FALSE,FALSE,FALSE,FALSE,,288,/**,,
FALSE,FALSE,FALSE,FALSE,,289,* is matrix symmetric.,,
FALSE,FALSE,FALSE,FALSE,,290,*,,
FALSE,FALSE,FALSE,FALSE,,291,"* @return is Int.isEqual(elem(i,j), elem(j,i))",,
FALSE,FALSE,FALSE,FALSE,,292,*/,,
FALSE,FALSE,FALSE,FALSE,,293,public boolean isSymmetric() {,,
TRUE,FALSE,FALSE,FALSE,FOR,294,for (int i = 0; i < rows - 1; i++) {,,
TRUE,FALSE,FALSE,FALSE,FOR,295,for (int j = i + 1; j < rows; j++) {,,
TRUE,FALSE,FALSE,FALSE,IF,296,if (flmat[i][j] != flmat[j][i]) {,,
TRUE,FALSE,FALSE,FALSE,RETURN,297,return false;,,
FALSE,FALSE,FALSE,FALSE,IF,298,},,
FALSE,FALSE,FALSE,FALSE,FOR,299,},,
FALSE,FALSE,FALSE,FALSE,FOR,300,},,
TRUE,FALSE,FALSE,FALSE,RETURN,301,return true;,,
FALSE,FALSE,FALSE,FALSE,,302,},,
FALSE,FALSE,FALSE,FALSE,,303,/**,,
FALSE,FALSE,FALSE,FALSE,,304,* is matrix UpperTriangular.,,
FALSE,FALSE,FALSE,FALSE,,305,*,,
FALSE,FALSE,FALSE,FALSE,,306,* @return true if all bottom triangle excluding diagona Int.isZero(),,
FALSE,FALSE,FALSE,FALSE,,307,*/,,
FALSE,FALSE,FALSE,FALSE,,308,public boolean isUpperTriangular() {,,
TRUE,FALSE,FALSE,FALSE,FOR,309,for (int i = 1; i < rows; i++) {,,
TRUE,FALSE,FALSE,FALSE,FOR,310,for (int j = 0; j < i; j++) {,,
TRUE,FALSE,FALSE,FALSE,IF,311,if (flmat[i][j] != 0),,
TRUE,FALSE,FALSE,FALSE,RETURN,312,return false;,,
FALSE,FALSE,FALSE,FALSE,FOR,313,},,
FALSE,FALSE,FALSE,FALSE,FOR,314,},,
TRUE,FALSE,FALSE,FALSE,RETURN,315,return true;,,
FALSE,FALSE,FALSE,FALSE,,316,},,
FALSE,FALSE,FALSE,FALSE,,317,/**,,
FALSE,FALSE,FALSE,FALSE,,318,* is matrix LowerTriangular. diagonal must also be zero,,
FALSE,FALSE,FALSE,FALSE,,319,*,,
FALSE,FALSE,FALSE,FALSE,,320,* @return true if all bottom triangle Int.isZero(),,
FALSE,FALSE,FALSE,FALSE,,321,*/,,
FALSE,FALSE,FALSE,FALSE,,322,public boolean isLowerTriangular() {,,
TRUE,FALSE,FALSE,FALSE,FOR,323,for (int i = 0; i < rows - 1; i++) {,,
TRUE,FALSE,FALSE,FALSE,FOR,324,for (int j = i + 1; j < rows; j++) {,,
TRUE,FALSE,FALSE,FALSE,IF,325,if (flmat[i][j] != 0),,
TRUE,FALSE,FALSE,FALSE,RETURN,326,return false;,,
FALSE,FALSE,FALSE,FALSE,FOR,327,},,
FALSE,FALSE,FALSE,FALSE,FOR,328,},,
TRUE,FALSE,FALSE,FALSE,RETURN,329,return true;,,
FALSE,FALSE,FALSE,FALSE,,330,},,
FALSE,FALSE,FALSE,FALSE,,331,/**,,
FALSE,FALSE,FALSE,FALSE,,332,* copy upper triangle into lower triangle. alters this to make it symmetric,,
FALSE,FALSE,FALSE,FALSE,,333,*,,
FALSE,FALSE,FALSE,FALSE,,334,* @return this as new square matrix,,
FALSE,FALSE,FALSE,FALSE,,335,*/,,
FALSE,FALSE,FALSE,FALSE,,336,public IntSquareMatrix copyUpperToLower() {,,
TRUE,TRUE,FALSE,FALSE,FOR,337,for (int i = 0; i < cols - 1; i++) {,iteration,
TRUE,TRUE,FALSE,FALSE,FOR,338,for (int j = i + 1; j < cols; j++) {,iteration,
TRUE,TRUE,FALSE,FALSE,EXPRESSION,339,flmat[j][i] = flmat[i][j];,data copy,
FALSE,FALSE,FALSE,FALSE,FOR,340,},,
FALSE,FALSE,FALSE,FALSE,FOR,341,},,
TRUE,FALSE,FALSE,FALSE,RETURN,342,return this;,,
FALSE,FALSE,FALSE,FALSE,,343,},,
FALSE,FALSE,FALSE,FALSE,,344,/**,,
FALSE,FALSE,FALSE,FALSE,,345,* copy lower triangle into upper triangle. alters this to make it symmetric,,
FALSE,FALSE,FALSE,FALSE,,346,*,,
FALSE,FALSE,FALSE,FALSE,,347,* @return this as new square matrix,,
FALSE,FALSE,FALSE,FALSE,,348,*/,,
FALSE,FALSE,FALSE,FALSE,,349,public IntSquareMatrix copyLowerToUpper() {,,
TRUE,TRUE,FALSE,FALSE,FOR,350,for (int i = 0; i < cols - 1; i++) {,Iteration,
TRUE,TRUE,FALSE,FALSE,FOR,351,for (int j = i + 1; j < cols; j++) {,Iteration,
TRUE,TRUE,FALSE,FALSE,EXPRESSION,352,flmat[i][j] = flmat[j][i];,Data Loading,
FALSE,FALSE,FALSE,FALSE,FOR,353,},,
FALSE,FALSE,FALSE,FALSE,FOR,354,},,
TRUE,FALSE,FALSE,FALSE,RETURN,355,return this;,,
FALSE,FALSE,FALSE,FALSE,,356,},,
FALSE,FALSE,FALSE,FALSE,,357,/**,,
FALSE,FALSE,FALSE,FALSE,,358,"* copy lower triangle into linear array; order: 0,0; 1,0; 1,1; 2,0",,
FALSE,FALSE,FALSE,FALSE,,359,*,,
FALSE,FALSE,FALSE,FALSE,,360,* @return linear array of size rows * (rows+1) / 2,,
FALSE,FALSE,FALSE,FALSE,,361,*/,,
FALSE,FALSE,FALSE,FALSE,,362,public IntArray lowerTriangle() {,,
TRUE,TRUE,FALSE,FALSE,VARIABLE_DECLARATION,363,int n = rows;,Data Loading,
TRUE,TRUE,FALSE,FALSE,VARIABLE_DECLARATION,364,IntArray triangle = new IntArray((n * (n + 1)) / 2);,Output Initialization,
TRUE,TRUE,FALSE,FALSE,VARIABLE_DECLARATION,365,int count = 0;,State Initialization,
TRUE,TRUE,FALSE,FALSE,FOR,366,for (int i = 0; i < rows; i++) {,Iteration,
TRUE,TRUE,FALSE,FALSE,FOR,367,for (int j = 0; j <= i; j++) {,Iteration,
TRUE,TRUE,FALSE,FALSE,EXPRESSION,368,"triangle.setElementAt(count++, flmat[i][j]);",Data Loading,
FALSE,FALSE,FALSE,FALSE,FOR,369,},,
FALSE,FALSE,FALSE,FALSE,FOR,370,},,
TRUE,TRUE,FALSE,FALSE,RETURN,371,return triangle;,Output return,
FALSE,FALSE,FALSE,FALSE,,372,},,
FALSE,FALSE,FALSE,FALSE,,373,/**,,
FALSE,FALSE,FALSE,FALSE,,374,* transpose. MODIFIES this,,
FALSE,FALSE,FALSE,FALSE,,375,*/,,
FALSE,FALSE,FALSE,FALSE,,376,public void transpose() {,,
TRUE,TRUE,FALSE,FALSE,FOR,377,for (int i = 0; i < rows; i++) {,Iteration,
TRUE,TRUE,FALSE,FALSE,FOR,378,for (int j = 0; j < i; j++) {,Iteration,
TRUE,TRUE,FALSE,FALSE,VARIABLE_DECLARATION,379,int t = flmat[i][j];,Mathematical Computation,
TRUE,TRUE,FALSE,FALSE,EXPRESSION,380,flmat[i][j] = flmat[j][i];,Mathematical Computation,
TRUE,TRUE,FALSE,FALSE,EXPRESSION,381,flmat[j][i] = t;,Mathematical Computation,
FALSE,FALSE,FALSE,FALSE,FOR,382,},,
FALSE,FALSE,FALSE,FALSE,FOR,383,},,
FALSE,FALSE,FALSE,FALSE,,384,},,
FALSE,FALSE,FALSE,FALSE,,385,},,