covered_ps,covgap_slicer4j_slice,covgap_porbs_slice,pseudotested_ps,statement_type,line_no,Original Code,What is the purpose of this code?,Notes
FALSE,FALSE,FALSE,FALSE,,1,/*,,
FALSE,FALSE,FALSE,FALSE,,2,* The MIT License,,
FALSE,FALSE,FALSE,FALSE,,3,*,,
FALSE,FALSE,FALSE,FALSE,,4,* Copyright 2016 Thibault Debatty.,,
FALSE,FALSE,FALSE,FALSE,,5,*,,
FALSE,FALSE,FALSE,FALSE,,6,"* Permission is hereby granted, free of charge, to any person obtaining a copy",,
FALSE,FALSE,FALSE,FALSE,,7,"* of this software and associated documentation files (the ""Software""), to deal",,
FALSE,FALSE,FALSE,FALSE,,8,"* in the Software without restriction, including without limitation the rights",,
FALSE,FALSE,FALSE,FALSE,,9,"* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",,
FALSE,FALSE,FALSE,FALSE,,10,"* copies of the Software, and to permit persons to whom the Software is",,
FALSE,FALSE,FALSE,FALSE,,11,"* furnished to do so, subject to the following conditions:",,
FALSE,FALSE,FALSE,FALSE,,12,*,,
FALSE,FALSE,FALSE,FALSE,,13,* The above copyright notice and this permission notice shall be included in,,
FALSE,FALSE,FALSE,FALSE,,14,* all copies or substantial portions of the Software.,,
FALSE,FALSE,FALSE,FALSE,,15,*,,
FALSE,FALSE,FALSE,FALSE,,16,"* THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",,
FALSE,FALSE,FALSE,FALSE,,17,"* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",,
FALSE,FALSE,FALSE,FALSE,,18,* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE,,
FALSE,FALSE,FALSE,FALSE,,19,"* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",,
FALSE,FALSE,FALSE,FALSE,,20,"* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",,
FALSE,FALSE,FALSE,FALSE,,21,* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN,,
FALSE,FALSE,FALSE,FALSE,,22,* THE SOFTWARE.,,
FALSE,FALSE,FALSE,FALSE,,23,*/,,
FALSE,FALSE,FALSE,FALSE,,24,package info.debatty.java.stringsimilarity;,,
FALSE,FALSE,FALSE,FALSE,,25,,,
FALSE,FALSE,FALSE,FALSE,,26,import info.debatty.java.stringsimilarity.interfaces.StringDistance;,,
FALSE,FALSE,FALSE,FALSE,,27,import net.jcip.annotations.Immutable;,,
FALSE,FALSE,FALSE,FALSE,,28,,,
FALSE,FALSE,FALSE,FALSE,,29,/**,,
FALSE,FALSE,FALSE,FALSE,,30,* Implementation of the the Optimal String Alignment (sometimes called the,,
FALSE,FALSE,FALSE,FALSE,,31,* restricted edit distance) variant of the Damerau-Levenshtein distance.,,
FALSE,FALSE,FALSE,FALSE,,32,*,,
FALSE,FALSE,FALSE,FALSE,,33,* The difference between the two algorithms consists in that the Optimal String,,
FALSE,FALSE,FALSE,FALSE,,34,* Alignment algorithm computes the number of edit operations needed to make the,,
FALSE,FALSE,FALSE,FALSE,,35,"* strings equal under the condition that no substring is edited more than once,",,
FALSE,FALSE,FALSE,FALSE,,36,* whereas Damerau-Levenshtein presents no such restriction.,,
FALSE,FALSE,FALSE,FALSE,,37,*,,
FALSE,FALSE,FALSE,FALSE,,38,* @author Michail Bogdanos,,
FALSE,FALSE,FALSE,FALSE,,39,*/,,
FALSE,FALSE,FALSE,FALSE,,40,@Immutable,,
FALSE,FALSE,FALSE,FALSE,,41,public final class OptimalStringAlignment implements StringDistance {,,
FALSE,FALSE,FALSE,FALSE,,42,,,
FALSE,FALSE,FALSE,FALSE,,43,/**,,
FALSE,FALSE,FALSE,FALSE,,44,* Compute the distance between strings: the minimum number of operations,,
FALSE,FALSE,FALSE,FALSE,,45,"* needed to transform one string into the other (insertion, deletion,",,
FALSE,FALSE,FALSE,FALSE,,46,"* substitution of a single character, or a transposition of two adjacent",,
FALSE,FALSE,FALSE,FALSE,,47,* characters) while no substring is edited more than once.,,
FALSE,FALSE,FALSE,FALSE,,48,*,,
FALSE,FALSE,FALSE,FALSE,,49,* @param s1 The first string to compare.,,
FALSE,FALSE,FALSE,FALSE,,50,* @param s2 The second string to compare.,,
FALSE,FALSE,FALSE,FALSE,,51,* @return the OSA distance,,
FALSE,FALSE,FALSE,FALSE,,52,* @throws NullPointerException if s1 or s2 is null.,,
FALSE,FALSE,FALSE,FALSE,,53,*/,,
FALSE,FALSE,FALSE,FALSE,,54,"public double distance(final String s1, final String s2) {",,
TRUE,TRUE,TRUE,FALSE,IF,55,if (s1 == null) {,Defensive Programming,
TRUE,TRUE,TRUE,FALSE,THROW,56,"throw new NullPointerException(""s1 must not be null"");",Defensive Programming,
FALSE,FALSE,FALSE,FALSE,IF,57,},,
FALSE,FALSE,FALSE,FALSE,,58,,,
TRUE,FALSE,TRUE,FALSE,IF,59,if (s2 == null) {,Defensive Programming,
TRUE,TRUE,TRUE,FALSE,THROW,60,"throw new NullPointerException(""s2 must not be null"");",Defensive Programming,
FALSE,FALSE,FALSE,FALSE,IF,61,},,
FALSE,FALSE,FALSE,FALSE,,62,,,
TRUE,FALSE,TRUE,FALSE,IF,63,if (s1.equals(s2)) {,Trivial Output Check,
TRUE,FALSE,TRUE,FALSE,RETURN,64,return 0;,Return Trivial Output,
FALSE,FALSE,FALSE,FALSE,IF,65,},,
FALSE,FALSE,FALSE,FALSE,,66,,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,67,"int n = s1.length(), m = s2.length();",,
FALSE,FALSE,FALSE,FALSE,,68,,,
TRUE,FALSE,TRUE,FALSE,IF,69,if (n == 0) {,Trivial Output Check,
TRUE,TRUE,TRUE,FALSE,RETURN,70,return m;,Return Trivial Output,
FALSE,FALSE,FALSE,FALSE,IF,71,},,
FALSE,FALSE,FALSE,FALSE,,72,,,
TRUE,FALSE,TRUE,FALSE,IF,73,if (m == 0) {,Trivial Output Check,
TRUE,TRUE,TRUE,FALSE,RETURN,74,return n;,Return Trivial Output,
FALSE,FALSE,FALSE,FALSE,IF,75,},,
FALSE,FALSE,FALSE,FALSE,,76,,,
FALSE,FALSE,FALSE,FALSE,,77,// Create the distance matrix H[0 .. s1.length+1][0 .. s2.length+1],,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,78,int[][] d = new int[n + 2][m + 2];,,
FALSE,FALSE,FALSE,FALSE,,79,,,
FALSE,FALSE,FALSE,FALSE,,80,//initialize top row and leftmost column,,
TRUE,TRUE,FALSE,FALSE,FOR,81,for (int i = 0; i <= n; i++) {,Iteration,
TRUE,TRUE,FALSE,FALSE,EXPRESSION,82,d[i][0] = i;,Output Initialization,
FALSE,FALSE,FALSE,FALSE,FOR,83,},,
TRUE,TRUE,FALSE,FALSE,FOR,84,for (int j = 0; j <= m; j++) {,Iteration,
TRUE,TRUE,FALSE,FALSE,EXPRESSION,85,d[0][j] = j;,Output Initialization,
FALSE,FALSE,FALSE,FALSE,FOR,86,},,
FALSE,FALSE,FALSE,FALSE,,87,,,
FALSE,FALSE,FALSE,FALSE,,88,//fill the distance matrix,,
FALSE,FALSE,FALSE,FALSE,,89,int cost;,,
FALSE,FALSE,FALSE,FALSE,,90,,,
TRUE,FALSE,FALSE,FALSE,FOR,91,for (int i = 1; i <= n; i++) {,,
TRUE,FALSE,FALSE,FALSE,FOR,92,for (int j = 1; j <= m; j++) {,,
FALSE,FALSE,FALSE,FALSE,FOR,93,,,
FALSE,FALSE,FALSE,FALSE,FOR,94,"//if s1[i - 1] = s2[j - 1] then cost = 0, else cost = 1",,
TRUE,TRUE,FALSE,FALSE,EXPRESSION,95,cost = 1;,State Update,
TRUE,FALSE,FALSE,FALSE,IF,96,if (s1.charAt(i - 1) == s2.charAt(j - 1)) {,,
TRUE,TRUE,FALSE,FALSE,EXPRESSION,97,cost = 0;,State Update,
FALSE,FALSE,FALSE,FALSE,IF,98,},,
FALSE,FALSE,FALSE,FALSE,FOR,99,,,
TRUE,TRUE,FALSE,FALSE,EXPRESSION,100,d[i][j] = min(,Output Update,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,101,"d[i - 1][j - 1] + cost, // substitution",,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,102,"d[i][j - 1] + 1, // insertion",,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,103,d[i - 1][j] + 1 // deletion,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,104,);,,
FALSE,FALSE,FALSE,FALSE,FOR,105,,,
FALSE,FALSE,FALSE,FALSE,FOR,106,//transposition check,,
TRUE,TRUE,FALSE,FALSE,IF,107,if (i > 1 && j > 1,Special Case Check,
FALSE,FALSE,FALSE,FALSE,IF,108,&& s1.charAt(i - 1) == s2.charAt(j - 2),,
FALSE,FALSE,FALSE,FALSE,IF,109,&& s1.charAt(i - 2) == s2.charAt(j - 1)) {,,
TRUE,TRUE,FALSE,FALSE,EXPRESSION,110,"d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);",Output Update,
FALSE,FALSE,FALSE,FALSE,IF,111,},,
FALSE,FALSE,FALSE,FALSE,FOR,112,},,
FALSE,FALSE,FALSE,FALSE,FOR,113,},,
FALSE,FALSE,FALSE,FALSE,,114,,,
TRUE,FALSE,FALSE,FALSE,RETURN,115,return d[n][m];,,
FALSE,FALSE,FALSE,FALSE,,116,},,
FALSE,FALSE,FALSE,FALSE,,117,,,
FALSE,FALSE,FALSE,FALSE,,118,private static int min(,,
FALSE,FALSE,FALSE,FALSE,,119,"final int a, final int b, final int c) {",,
TRUE,TRUE,FALSE,FALSE,RETURN,120,"return Math.min(a, Math.min(b, c));",Private Method Return,
FALSE,FALSE,FALSE,FALSE,,121,},,
FALSE,FALSE,FALSE,FALSE,,122,},,