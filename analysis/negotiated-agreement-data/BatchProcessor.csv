covered_ps,covgap_slicer4j_slice,covgap_porbs_slice,pseudotested_ps,statement_type,line_no,Original Code,What is the purpose of this code?,Notes
FALSE,FALSE,FALSE,FALSE,,1,package com.facebook.ads.sdk.serverside;,,
FALSE,FALSE,FALSE,FALSE,,2,,,
FALSE,FALSE,FALSE,FALSE,,3,import com.facebook.ads.sdk.APIException;,,
FALSE,FALSE,FALSE,FALSE,,4,,,
FALSE,FALSE,FALSE,FALSE,,5,import com.google.common.util.concurrent.Futures;,,
FALSE,FALSE,FALSE,FALSE,,6,import com.google.common.util.concurrent.ListenableFuture;,,
FALSE,FALSE,FALSE,FALSE,,7,,,
FALSE,FALSE,FALSE,FALSE,,8,import java.util.ArrayList;,,
FALSE,FALSE,FALSE,FALSE,,9,import java.util.Iterator;,,
FALSE,FALSE,FALSE,FALSE,,10,import java.util.List;,,
FALSE,FALSE,FALSE,FALSE,,11,import java.util.concurrent.ExecutionException;,,
FALSE,FALSE,FALSE,FALSE,,12,,,
FALSE,FALSE,FALSE,FALSE,,13,public class BatchProcessor {,,
FALSE,FALSE,FALSE,FALSE,,14,private int batchSize;,,
FALSE,FALSE,FALSE,FALSE,,15,private int concurrentRequests;,,
FALSE,FALSE,FALSE,FALSE,,16,,,
FALSE,FALSE,FALSE,FALSE,,17,"public BatchProcessor(int batchSize, int concurrentRequests) {",,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,18,this.batchSize = batchSize;,,
TRUE,TRUE,FALSE,FALSE,EXPRESSION,19,this.concurrentRequests = concurrentRequests;,State Initialization,
FALSE,FALSE,FALSE,FALSE,,20,},,
FALSE,FALSE,FALSE,FALSE,,21,,,
FALSE,FALSE,FALSE,FALSE,,22,"public void processEventRequests(List<EventRequest> eventRequests) throws ExecutionException, InterruptedException {",,
TRUE,TRUE,FALSE,FALSE,VARIABLE_DECLARATION,23,Iterator<List<ListenableFuture<EventResponse>>> it = processEventRequestsIterator(eventRequests);,Iteration,
TRUE,TRUE,FALSE,FALSE,WHILE,24,while (it.hasNext()) {,Iteration,
TRUE,TRUE,FALSE,FALSE,VARIABLE_DECLARATION,25,List<ListenableFuture<EventResponse>> futures = it.next();,Iteration,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,26,Futures,Scheduling,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,27,.allAsList(futures),,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,28,.get();,,
FALSE,FALSE,FALSE,FALSE,WHILE,29,},,
FALSE,FALSE,FALSE,FALSE,,30,},,
FALSE,FALSE,FALSE,FALSE,,31,,,
FALSE,FALSE,FALSE,FALSE,,32,"public Iterator<List<ListenableFuture<EventResponse>>> processEventsIterator(EventRequest eventRequestToClone, List<Event> events) {",,
TRUE,FALSE,FALSE,FALSE,RETURN,33,"return new EventIterator(eventRequestToClone, events, this.batchSize, this.concurrentRequests);",,
FALSE,FALSE,FALSE,FALSE,,34,},,
FALSE,FALSE,FALSE,FALSE,,35,,,
FALSE,FALSE,FALSE,FALSE,,36,"public void processEvents(EventRequest eventRequestToClone, List<Event> events) throws ExecutionException, InterruptedException {",,
TRUE,TRUE,FALSE,FALSE,VARIABLE_DECLARATION,37,"Iterator<List<ListenableFuture<EventResponse>>> it = processEventsIterator(eventRequestToClone, events);",Iteration,
TRUE,TRUE,FALSE,FALSE,WHILE,38,while (it.hasNext()) {,Iteration,
TRUE,TRUE,FALSE,FALSE,VARIABLE_DECLARATION,39,List<ListenableFuture<EventResponse>> futures = it.next();,Iteration,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,40,Futures,Scheduling,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,41,.allAsList(futures),,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,42,.get();,,
FALSE,FALSE,FALSE,FALSE,WHILE,43,},,
FALSE,FALSE,FALSE,FALSE,,44,},,
FALSE,FALSE,FALSE,FALSE,,45,,,
FALSE,FALSE,FALSE,FALSE,,46,public Iterator<List<ListenableFuture<EventResponse>>> processEventRequestsIterator(List<EventRequest> eventRequests) {,,
TRUE,FALSE,FALSE,FALSE,RETURN,47,"return new EventRequestIterator(eventRequests, this.concurrentRequests);",,
FALSE,FALSE,FALSE,FALSE,,48,},,
FALSE,FALSE,FALSE,FALSE,,49,,,
FALSE,FALSE,FALSE,FALSE,,50,protected static class EventIterator implements Iterator<List<ListenableFuture<EventResponse>>> {,,
FALSE,FALSE,FALSE,FALSE,,51,private final EventRequest eventRequestToClone;,,
FALSE,FALSE,FALSE,FALSE,,52,private final List<Event> events;,,
FALSE,FALSE,FALSE,FALSE,,53,int concurrentRequests;,,
FALSE,FALSE,FALSE,FALSE,,54,int batchSize;,,
FALSE,FALSE,FALSE,FALSE,,55,int index;,,
FALSE,FALSE,FALSE,FALSE,,56,,,
FALSE,FALSE,FALSE,FALSE,,57,"public EventIterator(EventRequest eventRequestToClone, List<Event> events, int batchSize, int concurrentRequests) {",,
FALSE,FALSE,FALSE,FALSE,,58,this.eventRequestToClone = eventRequestToClone;,,
FALSE,FALSE,FALSE,FALSE,,59,this.events = events;,,
FALSE,FALSE,FALSE,FALSE,,60,this.batchSize = batchSize;,,
FALSE,FALSE,FALSE,FALSE,,61,this.concurrentRequests = concurrentRequests;,,
FALSE,FALSE,FALSE,FALSE,,62,this.index = 0;,,
FALSE,FALSE,FALSE,FALSE,,63,},,
FALSE,FALSE,FALSE,FALSE,,64,,,
FALSE,FALSE,FALSE,FALSE,,65,public boolean hasNext() {,,
FALSE,FALSE,FALSE,FALSE,,66,return index < events.size();,,
FALSE,FALSE,FALSE,FALSE,,67,},,
FALSE,FALSE,FALSE,FALSE,,68,,,
FALSE,FALSE,FALSE,FALSE,,69,public List<ListenableFuture<EventResponse>> next() {,,
FALSE,FALSE,FALSE,FALSE,,70,List<ListenableFuture<EventResponse>> responses = new ArrayList<ListenableFuture<EventResponse>>();,,
FALSE,FALSE,FALSE,FALSE,,71,int i = index;,,
FALSE,FALSE,FALSE,FALSE,,72,while (i < events.size() && responses.size() < concurrentRequests) {,,
FALSE,FALSE,FALSE,FALSE,,73,EventRequest eventRequest = eventRequestToClone.cloneWithoutData();,,
FALSE,FALSE,FALSE,FALSE,,74,"int maxIndex = Math.min(i + batchSize, events.size());",,
FALSE,FALSE,FALSE,FALSE,,75,"eventRequest.setData(events.subList(i, maxIndex));",,
FALSE,FALSE,FALSE,FALSE,,76,try {,,
FALSE,FALSE,FALSE,FALSE,,77,responses.add(,,
FALSE,FALSE,FALSE,FALSE,,78,eventRequest.executeAsync(),,
FALSE,FALSE,FALSE,FALSE,,79,);,,
FALSE,FALSE,FALSE,FALSE,,80,} catch (APIException e) {,,
FALSE,FALSE,FALSE,FALSE,,81,e.printStackTrace();,,
FALSE,FALSE,FALSE,FALSE,,82,},,
FALSE,FALSE,FALSE,FALSE,,83,i += batchSize;,,
FALSE,FALSE,FALSE,FALSE,,84,},,
FALSE,FALSE,FALSE,FALSE,,85,this.index = i;,,
FALSE,FALSE,FALSE,FALSE,,86,return responses;,,
FALSE,FALSE,FALSE,FALSE,,87,},,
FALSE,FALSE,FALSE,FALSE,,88,,,
FALSE,FALSE,FALSE,FALSE,,89,public void remove() {,,
FALSE,FALSE,FALSE,FALSE,,90,},,
FALSE,FALSE,FALSE,FALSE,,91,},,
FALSE,FALSE,FALSE,FALSE,,92,,,
FALSE,FALSE,FALSE,FALSE,,93,protected static class EventRequestIterator implements Iterator<List<ListenableFuture<EventResponse>>> {,,
FALSE,FALSE,FALSE,FALSE,,94,private final List<EventRequest> eventRequests;,,
FALSE,FALSE,FALSE,FALSE,,95,int concurrentRequests;,,
FALSE,FALSE,FALSE,FALSE,,96,int index;,,
FALSE,FALSE,FALSE,FALSE,,97,,,
FALSE,FALSE,FALSE,FALSE,,98,"public EventRequestIterator(List<EventRequest> eventRequests, int concurrentRequests) {",,
FALSE,FALSE,FALSE,FALSE,,99,this.eventRequests = eventRequests;,,
FALSE,FALSE,FALSE,FALSE,,100,this.concurrentRequests = concurrentRequests;,,
FALSE,FALSE,FALSE,FALSE,,101,this.index = 0;,,
FALSE,FALSE,FALSE,FALSE,,102,},,
FALSE,FALSE,FALSE,FALSE,,103,,,
FALSE,FALSE,FALSE,FALSE,,104,public boolean hasNext() {,,
FALSE,FALSE,FALSE,FALSE,,105,return index < eventRequests.size();,,
FALSE,FALSE,FALSE,FALSE,,106,},,
FALSE,FALSE,FALSE,FALSE,,107,,,
FALSE,FALSE,FALSE,FALSE,,108,public List<ListenableFuture<EventResponse>> next() {,,
FALSE,FALSE,FALSE,FALSE,,109,List<ListenableFuture<EventResponse>> responses = new ArrayList<ListenableFuture<EventResponse>>();,,
FALSE,FALSE,FALSE,FALSE,,110,int i = index;,,
FALSE,FALSE,FALSE,FALSE,,111,while (i < (index + concurrentRequests) && i < eventRequests.size()) {,,
FALSE,FALSE,FALSE,FALSE,,112,try {,,
FALSE,FALSE,FALSE,FALSE,,113,responses.add(,,
FALSE,FALSE,FALSE,FALSE,,114,eventRequests.get(i).executeAsync(),,
FALSE,FALSE,FALSE,FALSE,,115,);,,
FALSE,FALSE,FALSE,FALSE,,116,} catch (APIException e) {,,
FALSE,FALSE,FALSE,FALSE,,117,e.printStackTrace();,,
FALSE,FALSE,FALSE,FALSE,,118,},,
FALSE,FALSE,FALSE,FALSE,,119,i++;,,
FALSE,FALSE,FALSE,FALSE,,120,},,
FALSE,FALSE,FALSE,FALSE,,121,this.index = i;,,
FALSE,FALSE,FALSE,FALSE,,122,return responses;,,
FALSE,FALSE,FALSE,FALSE,,123,},,
FALSE,FALSE,FALSE,FALSE,,124,,,
FALSE,FALSE,FALSE,FALSE,,125,public void remove() {,,
FALSE,FALSE,FALSE,FALSE,,126,,,
FALSE,FALSE,FALSE,FALSE,,127,},,
FALSE,FALSE,FALSE,FALSE,,128,},,
FALSE,FALSE,FALSE,FALSE,,129,},,