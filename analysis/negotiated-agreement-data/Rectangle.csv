covered_ps,covgap_slicer4j_slice,covgap_porbs_slice,pseudotested_ps,statement_type,line_no,Original Code,What is the purpose of this code?,Notes
FALSE,FALSE,FALSE,FALSE,,1,package technology.tabula;,,
FALSE,FALSE,FALSE,FALSE,,2,,,
FALSE,FALSE,FALSE,FALSE,,3,import java.awt.geom.Point2D;,,
FALSE,FALSE,FALSE,FALSE,,4,import java.awt.geom.Rectangle2D;,,
FALSE,FALSE,FALSE,FALSE,,5,import java.util.Comparator;,,
FALSE,FALSE,FALSE,FALSE,,6,import java.util.List;,,
FALSE,FALSE,FALSE,FALSE,,7,import java.util.Locale;,,
FALSE,FALSE,FALSE,FALSE,,8,,,
FALSE,FALSE,FALSE,FALSE,,9,"@SuppressWarnings(""serial"")",,
FALSE,FALSE,FALSE,FALSE,,10,public class Rectangle extends Rectangle2D.Float {,,
FALSE,FALSE,FALSE,FALSE,,11,,,
FALSE,FALSE,FALSE,FALSE,,12,/**,,
FALSE,FALSE,FALSE,FALSE,,13,"* Ill-defined comparator, from when Rectangle was Comparable.",,
FALSE,FALSE,FALSE,FALSE,,14,*,,
FALSE,FALSE,FALSE,FALSE,,15,"* @see <a href=""https://github.com/tabulapdf/tabula-java/issues/116"">PR 116</a>",,
FALSE,FALSE,FALSE,FALSE,,16,* @deprecated with no replacement,,
FALSE,FALSE,FALSE,FALSE,,17,*/,,
FALSE,FALSE,FALSE,FALSE,,18,@Deprecated,,
FALSE,FALSE,FALSE,FALSE,,19,public static final Comparator<Rectangle> ILL_DEFINED_ORDER = new Comparator<Rectangle>() {,,
FALSE,FALSE,FALSE,FALSE,,20,"@Override public int compare(Rectangle o1, Rectangle o2) {",,
TRUE,TRUE,TRUE,FALSE,RETURN,21,if (o1.equals(o2)) return 0;,Trivial Output Return,
TRUE,TRUE,FALSE,FALSE,IF,22,if (o1.verticalOverlap(o2) > VERTICAL_COMPARISON_THRESHOLD) {,Special Case Check,
TRUE,TRUE,FALSE,FALSE,RETURN,23,return o1.isLtrDominant() == -1 && o2.isLtrDominant() == -1,Output return,
FALSE,FALSE,FALSE,FALSE,RETURN,24,"? - java.lang.Double.compare(o1.getX(), o2.getX())",,
FALSE,FALSE,FALSE,FALSE,RETURN,25,": java.lang.Double.compare(o1.getX(), o2.getX());",,
FALSE,FALSE,FALSE,FALSE,IF,26,} else {,,
TRUE,TRUE,FALSE,FALSE,RETURN,27,"return java.lang.Float.compare(o1.getBottom(), o2.getBottom());",Output return,
FALSE,FALSE,FALSE,FALSE,IF,28,},,
FALSE,FALSE,FALSE,FALSE,,29,},,
FALSE,FALSE,FALSE,FALSE,,30,};,,
FALSE,FALSE,FALSE,FALSE,,31,,,
FALSE,FALSE,FALSE,FALSE,,32,protected static final float VERTICAL_COMPARISON_THRESHOLD = 0.4f;,,
FALSE,FALSE,FALSE,FALSE,,33,,,
FALSE,FALSE,FALSE,FALSE,,34,public Rectangle() {,,
FALSE,FALSE,FALSE,FALSE,,35,super();,,
FALSE,FALSE,FALSE,FALSE,,36,},,
FALSE,FALSE,FALSE,FALSE,,37,,,
FALSE,FALSE,FALSE,FALSE,,38,"public Rectangle(float top, float left, float width, float height) {",,
FALSE,FALSE,FALSE,FALSE,,39,super();,,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,40,"this.setRect(left, top, width, height);",,
FALSE,FALSE,FALSE,FALSE,,41,},,
FALSE,FALSE,FALSE,FALSE,,42,,,
FALSE,FALSE,FALSE,FALSE,,43,public int compareTo(Rectangle other) {,,
TRUE,FALSE,FALSE,FALSE,RETURN,44,"return ILL_DEFINED_ORDER.compare(this, other);",,
FALSE,FALSE,FALSE,FALSE,,45,},,
FALSE,FALSE,FALSE,FALSE,,46,,,
FALSE,FALSE,FALSE,FALSE,,47,// I'm bad at Java and need this for fancy sorting in,,
FALSE,FALSE,FALSE,FALSE,,48,// technology.tabula.TextChunk.,,
FALSE,FALSE,FALSE,FALSE,,49,public int isLtrDominant() {,,
TRUE,TRUE,FALSE,FALSE,RETURN,50,return 0;,Default Return,
FALSE,FALSE,FALSE,FALSE,,51,},,
FALSE,FALSE,FALSE,FALSE,,52,,,
FALSE,FALSE,FALSE,FALSE,,53,public float getArea() {,,
TRUE,FALSE,FALSE,FALSE,RETURN,54,return this.width * this.height;,,
FALSE,FALSE,FALSE,FALSE,,55,},,
FALSE,FALSE,FALSE,FALSE,,56,,,
FALSE,FALSE,FALSE,FALSE,,57,public float verticalOverlap(Rectangle other) {,,
TRUE,FALSE,FALSE,FALSE,RETURN,58,"return Math.max(0, Math.min(this.getBottom(), other.getBottom()) - Math.max(this.getTop(), other.getTop()));",,
FALSE,FALSE,FALSE,FALSE,,59,},,
FALSE,FALSE,FALSE,FALSE,,60,,,
FALSE,FALSE,FALSE,FALSE,,61,public boolean verticallyOverlaps(Rectangle other) {,,
TRUE,FALSE,FALSE,FALSE,RETURN,62,return verticalOverlap(other) > 0;,,
FALSE,FALSE,FALSE,FALSE,,63,},,
FALSE,FALSE,FALSE,FALSE,,64,,,
FALSE,FALSE,FALSE,FALSE,,65,public float horizontalOverlap(Rectangle other) {,,
TRUE,FALSE,FALSE,FALSE,RETURN,66,"return Math.max(0, Math.min(this.getRight(), other.getRight()) - Math.max(this.getLeft(), other.getLeft()));",,
FALSE,FALSE,FALSE,FALSE,,67,},,
FALSE,FALSE,FALSE,FALSE,,68,,,
FALSE,FALSE,FALSE,FALSE,,69,public boolean horizontallyOverlaps(Rectangle other) {,,
TRUE,FALSE,FALSE,FALSE,RETURN,70,return horizontalOverlap(other) > 0;,,
FALSE,FALSE,FALSE,FALSE,,71,},,
FALSE,FALSE,FALSE,FALSE,,72,,,
FALSE,FALSE,FALSE,FALSE,,73,public float verticalOverlapRatio(Rectangle other) {,,
TRUE,TRUE,FALSE,FALSE,VARIABLE_DECLARATION,74,"float rv = 0, delta = Math.min(this.getBottom() - this.getTop(), other.getBottom() - other.getTop());",Output Initialization,
FALSE,FALSE,FALSE,FALSE,,75,,,
TRUE,TRUE,FALSE,FALSE,IF,76,if (other.getTop() <= this.getTop() && this.getTop() <= other.getBottom(),Special Case Check,
FALSE,FALSE,FALSE,FALSE,IF,77,&& other.getBottom() <= this.getBottom()) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,78,rv = (other.getBottom() - this.getTop()) / delta;,,
TRUE,TRUE,FALSE,FALSE,IF,79,} else if (this.getTop() <= other.getTop() && other.getTop() <= this.getBottom(),Special Case Check,
FALSE,FALSE,FALSE,FALSE,IF,80,&& this.getBottom() <= other.getBottom()) {,,
TRUE,TRUE,FALSE,FALSE,EXPRESSION,81,rv = (this.getBottom() - other.getTop()) / delta;,Special Case Check,
FALSE,FALSE,FALSE,FALSE,IF,82,} else if (this.getTop() <= other.getTop() && other.getTop() <= other.getBottom(),,
FALSE,FALSE,FALSE,FALSE,IF,83,&& other.getBottom() <= this.getBottom()) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,84,rv = (other.getBottom() - other.getTop()) / delta;,,
FALSE,FALSE,FALSE,FALSE,IF,85,} else if (other.getTop() <= this.getTop() && this.getTop() <= this.getBottom(),,
FALSE,FALSE,FALSE,FALSE,IF,86,&& this.getBottom() <= other.getBottom()) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,87,rv = (this.getBottom() - this.getTop()) / delta;,,
FALSE,FALSE,FALSE,FALSE,IF,88,},,
FALSE,FALSE,FALSE,FALSE,,89,,,
TRUE,TRUE,FALSE,FALSE,RETURN,90,return rv;,Output return,
FALSE,FALSE,FALSE,FALSE,,91,,,
FALSE,FALSE,FALSE,FALSE,,92,},,
FALSE,FALSE,FALSE,FALSE,,93,,,
FALSE,FALSE,FALSE,FALSE,,94,public float overlapRatio(Rectangle other) {,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,95,"double intersectionWidth = Math.max(0,",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,96,"Math.min(this.getRight(), other.getRight()) - Math.max(this.getLeft(), other.getLeft()));",,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,97,"double intersectionHeight = Math.max(0,",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,98,"Math.min(this.getBottom(), other.getBottom()) - Math.max(this.getTop(), other.getTop()));",,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,99,"double intersectionArea = Math.max(0, intersectionWidth * intersectionHeight);",,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,100,double unionArea = this.getArea() + other.getArea() - intersectionArea;,,
FALSE,FALSE,FALSE,FALSE,,101,,,
TRUE,FALSE,FALSE,FALSE,RETURN,102,return (float) (intersectionArea / unionArea);,,
FALSE,FALSE,FALSE,FALSE,,103,},,
FALSE,FALSE,FALSE,FALSE,,104,,,
FALSE,FALSE,FALSE,FALSE,,105,public Rectangle merge(Rectangle other) {,,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,106,this.setRect(this.createUnion(other));,,
TRUE,FALSE,FALSE,TRUE,RETURN,107,return this;,Output return,
FALSE,FALSE,FALSE,FALSE,,108,},,
FALSE,FALSE,FALSE,FALSE,,109,,,
FALSE,FALSE,FALSE,FALSE,,110,public float getTop() {,,
TRUE,FALSE,FALSE,FALSE,RETURN,111,return (float) this.getMinY();,,
FALSE,FALSE,FALSE,FALSE,,112,},,
FALSE,FALSE,FALSE,FALSE,,113,,,
FALSE,FALSE,FALSE,FALSE,,114,public void setTop(float top) {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,115,float deltaHeight = top - this.y;,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,116,"this.setRect(this.x, top, this.width, this.height - deltaHeight);",,
FALSE,FALSE,FALSE,FALSE,,117,},,
FALSE,FALSE,FALSE,FALSE,,118,,,
FALSE,FALSE,FALSE,FALSE,,119,public float getRight() {,,
TRUE,FALSE,FALSE,FALSE,RETURN,120,return (float) this.getMaxX();,,
FALSE,FALSE,FALSE,FALSE,,121,},,
FALSE,FALSE,FALSE,FALSE,,122,,,
FALSE,FALSE,FALSE,FALSE,,123,public void setRight(float right) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,124,"this.setRect(this.x, this.y, right - this.x, this.height);",,
FALSE,FALSE,FALSE,FALSE,,125,},,
FALSE,FALSE,FALSE,FALSE,,126,,,
FALSE,FALSE,FALSE,FALSE,,127,public float getLeft() {,,
TRUE,FALSE,FALSE,FALSE,RETURN,128,return (float) this.getMinX();,,
FALSE,FALSE,FALSE,FALSE,,129,},,
FALSE,FALSE,FALSE,FALSE,,130,,,
FALSE,FALSE,FALSE,FALSE,,131,public void setLeft(float left) {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,132,float deltaWidth = left - this.x;,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,133,"this.setRect(left, this.y, this.width - deltaWidth, this.height);",,
FALSE,FALSE,FALSE,FALSE,,134,},,
FALSE,FALSE,FALSE,FALSE,,135,,,
FALSE,FALSE,FALSE,FALSE,,136,public float getBottom() {,,
TRUE,FALSE,FALSE,FALSE,RETURN,137,return (float) this.getMaxY();,,
FALSE,FALSE,FALSE,FALSE,,138,},,
FALSE,FALSE,FALSE,FALSE,,139,,,
FALSE,FALSE,FALSE,FALSE,,140,public void setBottom(float bottom) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,141,"this.setRect(this.x, this.y, this.width, bottom - this.y);",,
FALSE,FALSE,FALSE,FALSE,,142,},,
FALSE,FALSE,FALSE,FALSE,,143,,,
FALSE,FALSE,FALSE,FALSE,,144,public Point2D[] getPoints() {,,
TRUE,FALSE,FALSE,FALSE,RETURN,145,"return new Point2D[] { new Point2D.Float(this.getLeft(), this.getTop()),",,
FALSE,FALSE,FALSE,FALSE,RETURN,146,"new Point2D.Float(this.getRight(), this.getTop()), new Point2D.Float(this.getRight(), this.getBottom()),",,
FALSE,FALSE,FALSE,FALSE,RETURN,147,"new Point2D.Float(this.getLeft(), this.getBottom()) };",,
FALSE,FALSE,FALSE,FALSE,,148,},,
FALSE,FALSE,FALSE,FALSE,,149,,,
FALSE,FALSE,FALSE,FALSE,,150,@Override,,
FALSE,FALSE,FALSE,FALSE,,151,public String toString() {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,152,StringBuilder sb = new StringBuilder();,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,153,String s = super.toString();,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,154,"sb.append(s.substring(0, s.length() - 1));",,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,155,"sb.append(String.format(Locale.US, "",bottom=%f,right=%f]"", this.getBottom(), this.getRight()));",,
FALSE,FALSE,FALSE,FALSE,RETURN,156,return sb.toString();,,
FALSE,FALSE,FALSE,FALSE,,157,},,
FALSE,FALSE,FALSE,FALSE,,158,,,
FALSE,FALSE,FALSE,FALSE,,159,/**,,
FALSE,FALSE,FALSE,FALSE,,160,* @param rectangles,,
FALSE,FALSE,FALSE,FALSE,,161,* @return minimum bounding box that contains all the rectangles,,
FALSE,FALSE,FALSE,FALSE,,162,*/,,
FALSE,FALSE,FALSE,FALSE,,163,public static Rectangle boundingBoxOf(List<? extends Rectangle> rectangles) {,,
TRUE,FALSE,FALSE,TRUE,VARIABLE_DECLARATION,164,float minx = java.lang.Float.MAX_VALUE;,Data Loading,
TRUE,FALSE,FALSE,TRUE,VARIABLE_DECLARATION,165,float miny = java.lang.Float.MAX_VALUE;,Data Loading,
TRUE,FALSE,FALSE,TRUE,VARIABLE_DECLARATION,166,float maxx = java.lang.Float.MIN_VALUE;,Data Loading,
TRUE,FALSE,FALSE,TRUE,VARIABLE_DECLARATION,167,float maxy = java.lang.Float.MIN_VALUE;,Data Loading,
FALSE,FALSE,FALSE,FALSE,,168,,,
TRUE,FALSE,FALSE,FALSE,FOR_EACH,169,for (Rectangle r : rectangles) {,,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,170,"minx = (float) Math.min(r.getMinX(), minx);",,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,171,"miny = (float) Math.min(r.getMinY(), miny);",,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,172,"maxx = (float) Math.max(r.getMaxX(), maxx);",,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,173,"maxy = (float) Math.max(r.getMaxY(), maxy);",,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,174,},,
TRUE,FALSE,FALSE,FALSE,RETURN,175,"return new Rectangle(miny, minx, maxx - minx, maxy - miny);",,
FALSE,FALSE,FALSE,FALSE,,176,},,
FALSE,FALSE,FALSE,FALSE,,177,,,
FALSE,FALSE,FALSE,FALSE,,178,},,