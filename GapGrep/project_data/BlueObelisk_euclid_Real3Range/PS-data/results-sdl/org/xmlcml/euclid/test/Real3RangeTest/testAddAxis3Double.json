{
  "testClassName" : "org.xmlcml.euclid.test.Real3RangeTest",
  "testMethodName" : "testAddAxis3Double",
  "testOutcomes" : [ "PASSED(0)", "PASSED(0)", "PASSED(0)" ],
  "coverageElementTestOutcomes" : {
    "Decision(true, LOOP, 0, org.xmlcml.euclid.Real3Range)" : [ "PASSED(0)", "PASSED(0)", "PASSED(0)" ],
    "Decision(false, LOOP, 0, org.xmlcml.euclid.Real3Range)" : [ "THREW_EXCEPTION(0, java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3 <org.xmlcml.euclid.Real3Range.<init>(Real3Range.java:42)>)" ],
    "Stmt(FOR, 0, org.xmlcml.euclid.Real3Range, DEFAULT)" : [ "PASSED(0)", "PASSED(0)", "PASSED(0)" ],
    "Stmt(FOR, 0, org.xmlcml.euclid.Real3Range, NON_DEFAULT)" : [ "PASSED(0)", "PASSED(0)", "PASSED(0)" ],
    "Stmt(EXPRESSION, 1, org.xmlcml.euclid.Real3Range, DEFAULT)" : [ "PASSED(0)", "PASSED(0)", "PASSED(0)" ],
    "Stmt(EXPRESSION, 1, org.xmlcml.euclid.Real3Range, NON_DEFAULT)" : [ "PASSED(0)", "PASSED(0)", "PASSED(0)" ],
    "Stmt(EXPRESSION, 2, org.xmlcml.euclid.Real3Range, DEFAULT)" : [ "THREW_EXCEPTION(0, java.lang.NullPointerException: Cannot invoke \"org.xmlcml.euclid.RealRange.add(double)\" because \"this.xyzrange[ax.value]\" is null <org.xmlcml.euclid.Real3Range.add(Real3Range.java:180)>)" ],
    "Stmt(EXPRESSION, 2, org.xmlcml.euclid.Real3Range, NON_DEFAULT)" : [ "THREW_EXCEPTION(0, java.lang.NullPointerException: Cannot invoke \"org.xmlcml.euclid.RealRange.add(double)\" because \"this.xyzrange[ax.value]\" is null <org.xmlcml.euclid.Real3Range.add(Real3Range.java:180)>)" ],
    "Stmt(EXPRESSION, 3, org.xmlcml.euclid.Real3Range, DEFAULT)" : [ "THREW_EXCEPTION(0, java.lang.NullPointerException: Cannot invoke \"org.xmlcml.euclid.RealRange.add(double)\" because \"this.xyzrange[ax.value]\" is null <org.xmlcml.euclid.Real3Range.add(Real3Range.java:180)>)" ],
    "Stmt(EXPRESSION, 3, org.xmlcml.euclid.Real3Range, NON_DEFAULT)" : [ "THREW_EXCEPTION(0, java.lang.NullPointerException: Cannot invoke \"org.xmlcml.euclid.RealRange.add(double)\" because \"this.xyzrange[ax.value]\" is null <org.xmlcml.euclid.Real3Range.add(Real3Range.java:180)>)" ],
    "Stmt(EXPRESSION, 4, org.xmlcml.euclid.Real3Range, DEFAULT)" : [ "THREW_EXCEPTION(0, org.junit.ComparisonFailure: add expected:<((1.0,10.0),[(3.0,4.0)],(5.0,6.0))> but was:<((1.0,10.0),[null],(5.0,6.0))> <org.junit.Assert.assertEquals(Assert.java:117)>)" ],
    "Stmt(EXPRESSION, 4, org.xmlcml.euclid.Real3Range, NON_DEFAULT)" : [ "THREW_EXCEPTION(0, org.junit.ComparisonFailure: add expected:<((1.0,10.0),[(3.0,4.0)],(5.0,6.0))> but was:<((1.0,10.0),[null],(5.0,6.0))> <org.junit.Assert.assertEquals(Assert.java:117)>)" ],
    "Stmt(EXPRESSION, 5, org.xmlcml.euclid.Real3Range, DEFAULT)" : [ "THREW_EXCEPTION(1, org.junit.ComparisonFailure: add expected:<...1.0,10.0),(3.0,4.0),[(5.0,6.0)])> but was:<...1.0,10.0),(3.0,4.0),[null])> <org.junit.Assert.assertEquals(Assert.java:117)>)" ],
    "Stmt(EXPRESSION, 5, org.xmlcml.euclid.Real3Range, NON_DEFAULT)" : [ "THREW_EXCEPTION(0, org.junit.ComparisonFailure: add expected:<...1.0,10.0),(3.0,4.0),[(5.0,6.0)])> but was:<...1.0,10.0),(3.0,4.0),[null])> <org.junit.Assert.assertEquals(Assert.java:117)>)" ],
    "Stmt(EXPRESSION, 14, org.xmlcml.euclid.Real3Range, DEFAULT)" : [ "THREW_EXCEPTION(0, org.junit.ComparisonFailure: add expected:<((1.0,[10].0),(3.0,4.0),(5.0,6...> but was:<((1.0,[2].0),(3.0,4.0),(5.0,6...> <org.junit.Assert.assertEquals(Assert.java:117)>)" ],
    "Stmt(EXPRESSION, 14, org.xmlcml.euclid.Real3Range, NON_DEFAULT)" : [ "THREW_EXCEPTION(0, org.junit.ComparisonFailure: add expected:<((1.0,[10].0),(3.0,4.0),(5.0,6...> but was:<((1.0,[2].0),(3.0,4.0),(5.0,6...> <org.junit.Assert.assertEquals(Assert.java:117)>)" ],
    "Stmt(RETURN, 35, org.xmlcml.euclid.Real3Range, DEFAULT)" : [ "THREW_EXCEPTION(0, org.junit.ComparisonFailure: add expected:<[((1.0,10.0),(3.0,4.0),(5.0,6.0))]> but was:<[]> <org.junit.Assert.assertEquals(Assert.java:117)>)" ],
    "Stmt(RETURN, 35, org.xmlcml.euclid.Real3Range, NON_DEFAULT)" : [ "THREW_EXCEPTION(1, org.junit.ComparisonFailure: add expected:<[((1.0,10.0),(3.0,4.0),(5.0,6.0))]> but was:<[A]> <org.junit.Assert.assertEquals(Assert.java:117)>)" ]
  },
  "timeTaken" : 22
}