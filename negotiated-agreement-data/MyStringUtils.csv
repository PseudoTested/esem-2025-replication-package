covered_ps,covgap_slicer4j_slice,covgap_porbs_slice,pseudotested_ps,statement_type,line_no,Original Code,What is the purpose of this code?,Notes
FALSE,FALSE,FALSE,FALSE,,1,/*,,
FALSE,FALSE,FALSE,FALSE,,2,* Copyright Â© 2014 Bruno Candido Volpato da Cunha (brunocvcunha@gmail.com),,
FALSE,FALSE,FALSE,FALSE,,3,*,,
FALSE,FALSE,FALSE,FALSE,,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");",,
FALSE,FALSE,FALSE,FALSE,,5,* you may not use this file except in compliance with the License.,,
FALSE,FALSE,FALSE,FALSE,,6,* You may obtain a copy of the License at,,
FALSE,FALSE,FALSE,FALSE,,7,*,,
FALSE,FALSE,FALSE,FALSE,,8,*     http://www.apache.org/licenses/LICENSE-2.0,,
FALSE,FALSE,FALSE,FALSE,,9,*,,
FALSE,FALSE,FALSE,FALSE,,10,"* Unless required by applicable law or agreed to in writing, software",,
FALSE,FALSE,FALSE,FALSE,,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,",,
FALSE,FALSE,FALSE,FALSE,,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",,
FALSE,FALSE,FALSE,FALSE,,13,* See the License for the specific language governing permissions and,,
FALSE,FALSE,FALSE,FALSE,,14,* limitations under the License.,,
FALSE,FALSE,FALSE,FALSE,,15,*/,,
FALSE,FALSE,FALSE,FALSE,,16,package org.brunocvcunha.inutils4j;,,
FALSE,FALSE,FALSE,FALSE,,17,,,
FALSE,FALSE,FALSE,FALSE,,18,import java.awt.HeadlessException;,,
FALSE,FALSE,FALSE,FALSE,,19,import java.awt.Toolkit;,,
FALSE,FALSE,FALSE,FALSE,,20,import java.awt.datatransfer.Clipboard;,,
FALSE,FALSE,FALSE,FALSE,,21,import java.awt.datatransfer.DataFlavor;,,
FALSE,FALSE,FALSE,FALSE,,22,import java.awt.datatransfer.StringSelection;,,
FALSE,FALSE,FALSE,FALSE,,23,import java.awt.datatransfer.UnsupportedFlavorException;,,
FALSE,FALSE,FALSE,FALSE,,24,import java.io.BufferedInputStream;,,
FALSE,FALSE,FALSE,FALSE,,25,import java.io.BufferedReader;,,
FALSE,FALSE,FALSE,FALSE,,26,import java.io.BufferedWriter;,,
FALSE,FALSE,FALSE,FALSE,,27,import java.io.ByteArrayOutputStream;,,
FALSE,FALSE,FALSE,FALSE,,28,import java.io.File;,,
FALSE,FALSE,FALSE,FALSE,,29,import java.io.FileInputStream;,,
FALSE,FALSE,FALSE,FALSE,,30,import java.io.FileNotFoundException;,,
FALSE,FALSE,FALSE,FALSE,,31,import java.io.FileReader;,,
FALSE,FALSE,FALSE,FALSE,,32,import java.io.FileWriter;,,
FALSE,FALSE,FALSE,FALSE,,33,import java.io.IOException;,,
FALSE,FALSE,FALSE,FALSE,,34,import java.io.InputStream;,,
FALSE,FALSE,FALSE,FALSE,,35,import java.io.InputStreamReader;,,
FALSE,FALSE,FALSE,FALSE,,36,import java.io.PrintStream;,,
FALSE,FALSE,FALSE,FALSE,,37,import java.io.UnsupportedEncodingException;,,
FALSE,FALSE,FALSE,FALSE,,38,import java.lang.Character.UnicodeBlock;,,
FALSE,FALSE,FALSE,FALSE,,39,import java.net.HttpURLConnection;,,
FALSE,FALSE,FALSE,FALSE,,40,import java.net.URL;,,
FALSE,FALSE,FALSE,FALSE,,41,import java.net.URLConnection;,,
FALSE,FALSE,FALSE,FALSE,,42,import java.net.URLDecoder;,,
FALSE,FALSE,FALSE,FALSE,,43,import java.net.URLEncoder;,,
FALSE,FALSE,FALSE,FALSE,,44,import java.nio.charset.Charset;,,
FALSE,FALSE,FALSE,FALSE,,45,import java.security.MessageDigest;,,
FALSE,FALSE,FALSE,FALSE,,46,import java.security.NoSuchAlgorithmException;,,
FALSE,FALSE,FALSE,FALSE,,47,import java.text.Normalizer;,,
FALSE,FALSE,FALSE,FALSE,,48,import java.text.NumberFormat;,,
FALSE,FALSE,FALSE,FALSE,,49,import java.util.ArrayList;,,
FALSE,FALSE,FALSE,FALSE,,50,import java.util.Arrays;,,
FALSE,FALSE,FALSE,FALSE,,51,import java.util.Collection;,,
FALSE,FALSE,FALSE,FALSE,,52,import java.util.Comparator;,,
FALSE,FALSE,FALSE,FALSE,,53,import java.util.HashMap;,,
FALSE,FALSE,FALSE,FALSE,,54,import java.util.HashSet;,,
FALSE,FALSE,FALSE,FALSE,,55,import java.util.Iterator;,,
FALSE,FALSE,FALSE,FALSE,,56,import java.util.LinkedHashMap;,,
FALSE,FALSE,FALSE,FALSE,,57,import java.util.List;,,
FALSE,FALSE,FALSE,FALSE,,58,import java.util.Locale;,,
FALSE,FALSE,FALSE,FALSE,,59,import java.util.Map;,,
FALSE,FALSE,FALSE,FALSE,,60,import java.util.Map.Entry;,,
FALSE,FALSE,FALSE,FALSE,,61,import java.util.Set;,,
FALSE,FALSE,FALSE,FALSE,,62,import java.util.StringTokenizer;,,
FALSE,FALSE,FALSE,FALSE,,63,import java.util.TreeSet;,,
FALSE,FALSE,FALSE,FALSE,,64,import java.util.regex.Matcher;,,
FALSE,FALSE,FALSE,FALSE,,65,import java.util.regex.Pattern;,,
FALSE,FALSE,FALSE,FALSE,,66,import java.util.zip.GZIPInputStream;,,
FALSE,FALSE,FALSE,FALSE,,67,,,
FALSE,FALSE,FALSE,FALSE,,68,import javax.swing.JFileChooser;,,
FALSE,FALSE,FALSE,FALSE,,69,,,
FALSE,FALSE,FALSE,FALSE,,70,import org.apache.commons.codec.binary.Hex;,,
FALSE,FALSE,FALSE,FALSE,,71,,,
FALSE,FALSE,FALSE,FALSE,,72,/**,,
FALSE,FALSE,FALSE,FALSE,,73,* String (In)utilities.,,
FALSE,FALSE,FALSE,FALSE,,74,*,,
FALSE,FALSE,FALSE,FALSE,,75,* @author Bruno Candido Volpato da Cunha,,
FALSE,FALSE,FALSE,FALSE,,76,*/,,
FALSE,FALSE,FALSE,FALSE,,77,public class MyStringUtils {,,
FALSE,FALSE,FALSE,FALSE,,78,,,
FALSE,FALSE,FALSE,FALSE,,79,public static final int CREATE = 0;,,
FALSE,FALSE,FALSE,FALSE,,80,public static final int APPEND = 1;,,
FALSE,FALSE,FALSE,FALSE,,81,public static final int FILL = 2;,,
FALSE,FALSE,FALSE,FALSE,,82,public static final NumberFormat _ffmt = NumberFormat.getInstance();,,
FALSE,FALSE,FALSE,FALSE,,83,"public static final String XLATE = ""0123456789abcdef"";",,
FALSE,FALSE,FALSE,FALSE,,84,"public static final String RETURN = ""\n"";",,
FALSE,FALSE,FALSE,FALSE,,85,"public static final String CARRIAGE = ""\r"";",,
FALSE,FALSE,FALSE,FALSE,,86,"public static final String CARRIAGE_RETURN = ""\r\n"";",,
FALSE,FALSE,FALSE,FALSE,,87,public static String lineSeparator;,,
FALSE,FALSE,FALSE,FALSE,,88,,,
FALSE,FALSE,FALSE,FALSE,,89,"public static Pattern HAS_LETTER_PATTERN = Pattern.compile(""[a-zA-Z]"");",,
FALSE,FALSE,FALSE,FALSE,,90,,,
FALSE,FALSE,FALSE,FALSE,,91,public static Pattern EMAIL_PATTERN = Pattern,,
FALSE,FALSE,FALSE,FALSE,,92,".compile(""[_a-z0-9-]+(\\.[_a-z0-9-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*(\\.[a-z]{2,4})"");",,
FALSE,FALSE,FALSE,FALSE,,93,,,
FALSE,FALSE,FALSE,FALSE,,94,,,
FALSE,FALSE,FALSE,FALSE,,95,public static final Set<UnicodeBlock> JAPANESE_BLOCKS = new HashSet<UnicodeBlock>() {,,
FALSE,FALSE,FALSE,FALSE,,96,/**,,
FALSE,FALSE,FALSE,FALSE,,97,*,,
FALSE,FALSE,FALSE,FALSE,,98,*/,,
FALSE,FALSE,FALSE,FALSE,,99,private static final long serialVersionUID = 1L;,,
FALSE,FALSE,FALSE,FALSE,,100,,,
FALSE,FALSE,FALSE,FALSE,,101,{,,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,102,add(UnicodeBlock.HIRAGANA);,Data Loading,
TRUE,TRUE,FALSE,FALSE,EXPRESSION,103,add(UnicodeBlock.KATAKANA);,Data Loading,
TRUE,TRUE,FALSE,FALSE,EXPRESSION,104,add(UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS);,Data Loading,
FALSE,FALSE,FALSE,FALSE,,105,},,
FALSE,FALSE,FALSE,FALSE,,106,};,,
FALSE,FALSE,FALSE,FALSE,,107,public static final Set<UnicodeBlock> CHINESE_BLOCKS = new HashSet<UnicodeBlock>() {,,
FALSE,FALSE,FALSE,FALSE,,108,/**,,
FALSE,FALSE,FALSE,FALSE,,109,*,,
FALSE,FALSE,FALSE,FALSE,,110,*/,,
FALSE,FALSE,FALSE,FALSE,,111,private static final long serialVersionUID = 1L;,,
FALSE,FALSE,FALSE,FALSE,,112,,,
FALSE,FALSE,FALSE,FALSE,,113,{,,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,114,add(UnicodeBlock.CJK_COMPATIBILITY);,Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,115,add(UnicodeBlock.CJK_COMPATIBILITY_FORMS);,Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,116,add(UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS);,Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,117,add(UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT);,Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,118,add(UnicodeBlock.CJK_RADICALS_SUPPLEMENT);,Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,119,add(UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION);,Data Loading,
TRUE,TRUE,FALSE,FALSE,EXPRESSION,120,add(UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS);,Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,121,add(UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A);,Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,122,add(UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B);,Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,123,add(UnicodeBlock.KANGXI_RADICALS);,Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,124,add(UnicodeBlock.IDEOGRAPHIC_DESCRIPTION_CHARACTERS);,Data Loading,
FALSE,FALSE,FALSE,FALSE,,125,},,
FALSE,FALSE,FALSE,FALSE,,126,};,,
FALSE,FALSE,FALSE,FALSE,,127,,,
FALSE,FALSE,FALSE,FALSE,,128,public static final Set<UnicodeBlock> ARABIC_BLOCKS = new HashSet<UnicodeBlock>() {,,
FALSE,FALSE,FALSE,FALSE,,129,/**,,
FALSE,FALSE,FALSE,FALSE,,130,*,,
FALSE,FALSE,FALSE,FALSE,,131,*/,,
FALSE,FALSE,FALSE,FALSE,,132,private static final long serialVersionUID = 1L;,,
FALSE,FALSE,FALSE,FALSE,,133,,,
FALSE,FALSE,FALSE,FALSE,,134,{,,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,135,add(UnicodeBlock.ARABIC);,Data Loading,
FALSE,FALSE,FALSE,FALSE,,136,},,
FALSE,FALSE,FALSE,FALSE,,137,};,,
FALSE,FALSE,FALSE,FALSE,,138,,,
FALSE,FALSE,FALSE,FALSE,,139,static {,,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,140,_ffmt.setMinimumIntegerDigits(1);,Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,141,_ffmt.setMinimumFractionDigits(1);,Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,142,_ffmt.setMaximumFractionDigits(2);,Data Loading,
FALSE,FALSE,FALSE,FALSE,,143,,,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,144,lineSeparator = RETURN;,Data Loading,
TRUE,TRUE,FALSE,FALSE,TRY,145,try {,Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,146,"lineSeparator = System.getProperty(""line.separator"");",Data Loading,
FALSE,FALSE,FALSE,FALSE,TRY,147,} catch (Exception localException) {,,
FALSE,FALSE,FALSE,FALSE,TRY,148,},,
FALSE,FALSE,FALSE,FALSE,,149,},,
FALSE,FALSE,FALSE,FALSE,,150,,,
FALSE,FALSE,FALSE,FALSE,,151,,,
FALSE,FALSE,FALSE,FALSE,,152,"public static Map<String, Character> escapeStrings = new LinkedHashMap<String, Character>();",,
FALSE,FALSE,FALSE,FALSE,,153,"public static Map<String, Character> accentStrings  = new LinkedHashMap<String, Character>();",,
FALSE,FALSE,FALSE,FALSE,,154,,,
FALSE,FALSE,FALSE,FALSE,,155,static {,,
FALSE,FALSE,FALSE,FALSE,,156,// HTML character entity references as defined in HTML 4,,
FALSE,FALSE,FALSE,FALSE,,157,// see http://www.w3.org/TR/REC-html40/sgml/entities.html,,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,158,"escapeStrings.put(""&amp;"", new Character('\u0026'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,159,"escapeStrings.put(""&nbsp;"", new Character('\u00A0'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,160,"escapeStrings.put(""&iexcl;"", new Character('\u00A1'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,161,"escapeStrings.put(""&cent;"", new Character('\u00A2'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,162,"escapeStrings.put(""&pound;"", new Character('\u00A3'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,163,"escapeStrings.put(""&curren;"", new Character('\u00A4'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,164,"escapeStrings.put(""&yen;"", new Character('\u00A5'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,165,"escapeStrings.put(""&brvbar;"", new Character('\u00A6'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,166,"escapeStrings.put(""&sect;"", new Character('\u00A7'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,167,"escapeStrings.put(""&uml;"", new Character('\u00A8'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,168,"escapeStrings.put(""&copy;"", new Character('\u00A9'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,169,"escapeStrings.put(""&ordf;"", new Character('\u00AA'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,170,"escapeStrings.put(""&laquo;"", new Character('\u00AB'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,171,"escapeStrings.put(""&not;"", new Character('\u00AC'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,172,"escapeStrings.put(""&shy;"", new Character('\u00AD'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,173,"escapeStrings.put(""&reg;"", new Character('\u00AE'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,174,"escapeStrings.put(""&macr;"", new Character('\u00AF'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,175,"escapeStrings.put(""&deg;"", new Character('\u00B0'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,176,"escapeStrings.put(""&plusmn;"", new Character('\u00B1'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,177,"escapeStrings.put(""&sup2;"", new Character('\u00B2'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,178,"escapeStrings.put(""&sup3;"", new Character('\u00B3'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,179,"escapeStrings.put(""&acute;"", new Character('\u00B4'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,180,"accentStrings.put(""&acute;"", new Character('\u00B4'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,181,"escapeStrings.put(""&micro;"", new Character('\u00B5'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,182,"escapeStrings.put(""&para;"", new Character('\u00B6'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,183,"escapeStrings.put(""&middot;"", new Character('\u00B7'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,184,"escapeStrings.put(""&cedil;"", new Character('\u00B8'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,185,"escapeStrings.put(""&sup1;"", new Character('\u00B9'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,186,"escapeStrings.put(""&ordm;"", new Character('\u00BA'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,187,"escapeStrings.put(""&raquo;"", new Character('\u00BB'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,188,"escapeStrings.put(""&frac14;"", new Character('\u00BC'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,189,"escapeStrings.put(""&frac12;"", new Character('\u00BD'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,190,"escapeStrings.put(""&frac34;"", new Character('\u00BE'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,191,"escapeStrings.put(""&iquest;"", new Character('\u00BF'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,192,"escapeStrings.put(""&Agrave;"", new Character('\u00C0'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,193,"accentStrings.put(""&Agrave;"", new Character('\u00C0'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,194,"escapeStrings.put(""&Aacute;"", new Character('\u00C1'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,195,"accentStrings.put(""&Aacute;"", new Character('\u00C1'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,196,"escapeStrings.put(""&Acirc;"", new Character('\u00C2'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,197,"accentStrings.put(""&Acirc;"", new Character('\u00C2'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,198,"escapeStrings.put(""&Atilde;"", new Character('\u00C3'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,199,"accentStrings.put(""&Atilde;"", new Character('\u00C3'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,200,"escapeStrings.put(""&Auml;"", new Character('\u00C4'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,201,"escapeStrings.put(""&Aring;"", new Character('\u00C5'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,202,"escapeStrings.put(""&AElig;"", new Character('\u00C6'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,203,"escapeStrings.put(""&Ccedil;"", new Character('\u00C7'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,204,"accentStrings.put(""&Ccedil;"", new Character('\u00C7'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,205,"escapeStrings.put(""&Egrave;"", new Character('\u00C8'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,206,"accentStrings.put(""&Egrave;"", new Character('\u00C8'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,207,"escapeStrings.put(""&Eacute;"", new Character('\u00C9'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,208,"accentStrings.put(""&Eacute;"", new Character('\u00C9'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,209,"escapeStrings.put(""&Ecirc;"", new Character('\u00CA'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,210,"accentStrings.put(""&Ecirc;"", new Character('\u00CA'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,211,"escapeStrings.put(""&Euml;"", new Character('\u00CB'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,212,"escapeStrings.put(""&Igrave;"", new Character('\u00CC'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,213,"accentStrings.put(""&Igrave;"", new Character('\u00CC'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,214,"escapeStrings.put(""&Iacute;"", new Character('\u00CD'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,215,"accentStrings.put(""&Iacute;"", new Character('\u00CD'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,216,"escapeStrings.put(""&Icirc;"", new Character('\u00CE'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,217,"accentStrings.put(""&Icirc;"", new Character('\u00CE'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,218,"escapeStrings.put(""&Iuml;"", new Character('\u00CF'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,219,"escapeStrings.put(""&ETH;"", new Character('\u00D0'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,220,"escapeStrings.put(""&Ntilde;"", new Character('\u00D1'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,221,"accentStrings.put(""&Ntilde;"", new Character('\u00D1'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,222,"escapeStrings.put(""&Ograve;"", new Character('\u00D2'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,223,"accentStrings.put(""&Ograve;"", new Character('\u00D2'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,224,"escapeStrings.put(""&Oacute;"", new Character('\u00D3'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,225,"accentStrings.put(""&Oacute;"", new Character('\u00D3'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,226,"escapeStrings.put(""&Ocirc;"", new Character('\u00D4'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,227,"accentStrings.put(""&Ocirc;"", new Character('\u00D4'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,228,"escapeStrings.put(""&Otilde;"", new Character('\u00D5'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,229,"accentStrings.put(""&Otilde;"", new Character('\u00D5'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,230,"escapeStrings.put(""&Ouml;"", new Character('\u00D6'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,231,"escapeStrings.put(""&times;"", new Character('\u00D7'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,232,"escapeStrings.put(""&Oslash;"", new Character('\u00D8'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,233,"escapeStrings.put(""&Ugrave;"", new Character('\u00D9'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,234,"accentStrings.put(""&Ugrave;"", new Character('\u00D9'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,235,"escapeStrings.put(""&Uacute;"", new Character('\u00DA'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,236,"accentStrings.put(""&Uacute;"", new Character('\u00DA'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,237,"escapeStrings.put(""&Ucirc;"", new Character('\u00DB'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,238,"accentStrings.put(""&Ucirc;"", new Character('\u00DB'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,239,"escapeStrings.put(""&Uuml;"", new Character('\u00DC'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,240,"escapeStrings.put(""&Yacute;"", new Character('\u00DD'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,241,"escapeStrings.put(""&THORN;"", new Character('\u00DE'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,242,"escapeStrings.put(""&szlig;"", new Character('\u00DF'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,243,"escapeStrings.put(""&agrave;"", new Character('\u00E0'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,244,"accentStrings.put(""&agrave;"", new Character('\u00E0'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,245,"escapeStrings.put(""&aacute;"", new Character('\u00E1'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,246,"accentStrings.put(""&aacute;"", new Character('\u00E1'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,247,"escapeStrings.put(""&acirc;"", new Character('\u00E2'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,248,"accentStrings.put(""&acirc;"", new Character('\u00E2'));",Data Loading,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,249,"escapeStrings.put(""&atilde;"", new Character('\u00E3'));",,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,250,"accentStrings.put(""&atilde;"", new Character('\u00E3'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,251,"escapeStrings.put(""&auml;"", new Character('\u00E4'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,252,"escapeStrings.put(""&aring;"", new Character('\u00E5'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,253,"escapeStrings.put(""&aelig;"", new Character('\u00E6'));",Data Loading,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,254,"escapeStrings.put(""&ccedil;"", new Character('\u00E7'));",,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,255,"accentStrings.put(""&ccedil;"", new Character('\u00E7'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,256,"escapeStrings.put(""&egrave;"", new Character('\u00E8'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,257,"accentStrings.put(""&egrave;"", new Character('\u00E8'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,258,"escapeStrings.put(""&eacute;"", new Character('\u00E9'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,259,"accentStrings.put(""&eacute;"", new Character('\u00E9'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,260,"escapeStrings.put(""&ecirc;"", new Character('\u00EA'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,261,"accentStrings.put(""&ecirc;"", new Character('\u00EA'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,262,"escapeStrings.put(""&euml;"", new Character('\u00EB'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,263,"escapeStrings.put(""&igrave;"", new Character('\u00EC'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,264,"accentStrings.put(""&igrave;"", new Character('\u00EC'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,265,"escapeStrings.put(""&iacute;"", new Character('\u00ED'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,266,"accentStrings.put(""&iacute;"", new Character('\u00ED'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,267,"escapeStrings.put(""&icirc;"", new Character('\u00EE'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,268,"accentStrings.put(""&icirc;"", new Character('\u00EE'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,269,"escapeStrings.put(""&iuml;"", new Character('\u00EF'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,270,"escapeStrings.put(""&eth;"", new Character('\u00F0'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,271,"escapeStrings.put(""&ntilde;"", new Character('\u00F1'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,272,"accentStrings.put(""&ntilde;"", new Character('\u00F1'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,273,"escapeStrings.put(""&ograve;"", new Character('\u00F2'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,274,"accentStrings.put(""&ograve;"", new Character('\u00F2'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,275,"escapeStrings.put(""&oacute;"", new Character('\u00F3'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,276,"accentStrings.put(""&oacute;"", new Character('\u00F3'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,277,"escapeStrings.put(""&ocirc;"", new Character('\u00F4'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,278,"accentStrings.put(""&ocirc;"", new Character('\u00F4'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,279,"escapeStrings.put(""&otilde;"", new Character('\u00F5'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,280,"accentStrings.put(""&otilde;"", new Character('\u00F5'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,281,"escapeStrings.put(""&ouml;"", new Character('\u00F6'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,282,"escapeStrings.put(""&divide;"", new Character('\u00F7'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,283,"escapeStrings.put(""&oslash;"", new Character('\u00F8'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,284,"escapeStrings.put(""&ugrave;"", new Character('\u00F9'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,285,"accentStrings.put(""&ugrave;"", new Character('\u00F9'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,286,"escapeStrings.put(""&uacute;"", new Character('\u00FA'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,287,"accentStrings.put(""&uacute;"", new Character('\u00FA'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,288,"escapeStrings.put(""&ucirc;"", new Character('\u00FB'));",Data Loading,
TRUE,TRUE,TRUE,FALSE,EXPRESSION,289,"accentStrings.put(""&ucirc;"", new Character('\u00FB'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,290,"escapeStrings.put(""&uuml;"", new Character('\u00FC'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,291,"escapeStrings.put(""&yacute;"", new Character('\u00FD'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,292,"escapeStrings.put(""&thorn;"", new Character('\u00FE'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,293,"escapeStrings.put(""&yuml;"", new Character('\u00FF'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,294,"escapeStrings.put(""&fnof;"", new Character('\u0192'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,295,"escapeStrings.put(""&Alpha;"", new Character('\u0391'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,296,"escapeStrings.put(""&Beta;"", new Character('\u0392'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,297,"escapeStrings.put(""&Gamma;"", new Character('\u0393'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,298,"escapeStrings.put(""&Delta;"", new Character('\u0394'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,299,"escapeStrings.put(""&Epsilon;"", new Character('\u0395'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,300,"escapeStrings.put(""&Zeta;"", new Character('\u0396'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,301,"escapeStrings.put(""&Eta;"", new Character('\u0397'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,302,"escapeStrings.put(""&Theta;"", new Character('\u0398'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,303,"escapeStrings.put(""&Iota;"", new Character('\u0399'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,304,"escapeStrings.put(""&Kappa;"", new Character('\u039A'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,305,"escapeStrings.put(""&Lambda;"", new Character('\u039B'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,306,"escapeStrings.put(""&Mu;"", new Character('\u039C'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,307,"escapeStrings.put(""&Nu;"", new Character('\u039D'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,308,"escapeStrings.put(""&Xi;"", new Character('\u039E'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,309,"escapeStrings.put(""&Omicron;"", new Character('\u039F'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,310,"escapeStrings.put(""&Pi;"", new Character('\u03A0'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,311,"escapeStrings.put(""&Rho;"", new Character('\u03A1'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,312,"escapeStrings.put(""&Sigma;"", new Character('\u03A3'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,313,"escapeStrings.put(""&Tau;"", new Character('\u03A4'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,314,"escapeStrings.put(""&Upsilon;"", new Character('\u03A5'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,315,"escapeStrings.put(""&Phi;"", new Character('\u03A6'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,316,"escapeStrings.put(""&Chi;"", new Character('\u03A7'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,317,"escapeStrings.put(""&Psi;"", new Character('\u03A8'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,318,"escapeStrings.put(""&Omega;"", new Character('\u03A9'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,319,"escapeStrings.put(""&alpha;"", new Character('\u03B1'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,320,"escapeStrings.put(""&beta;"", new Character('\u03B2'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,321,"escapeStrings.put(""&gamma;"", new Character('\u03B3'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,322,"escapeStrings.put(""&delta;"", new Character('\u03B4'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,323,"escapeStrings.put(""&epsilon;"", new Character('\u03B5'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,324,"escapeStrings.put(""&zeta;"", new Character('\u03B6'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,325,"escapeStrings.put(""&eta;"", new Character('\u03B7'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,326,"escapeStrings.put(""&theta;"", new Character('\u03B8'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,327,"escapeStrings.put(""&iota;"", new Character('\u03B9'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,328,"escapeStrings.put(""&kappa;"", new Character('\u03BA'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,329,"escapeStrings.put(""&lambda;"", new Character('\u03BB'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,330,"escapeStrings.put(""&mu;"", new Character('\u03BC'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,331,"escapeStrings.put(""&nu;"", new Character('\u03BD'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,332,"escapeStrings.put(""&xi;"", new Character('\u03BE'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,333,"escapeStrings.put(""&omicron;"", new Character('\u03BF'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,334,"escapeStrings.put(""&pi;"", new Character('\u03C0'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,335,"escapeStrings.put(""&rho;"", new Character('\u03C1'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,336,"escapeStrings.put(""&sigmaf;"", new Character('\u03C2'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,337,"escapeStrings.put(""&sigma;"", new Character('\u03C3'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,338,"escapeStrings.put(""&tau;"", new Character('\u03C4'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,339,"escapeStrings.put(""&upsilon;"", new Character('\u03C5'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,340,"escapeStrings.put(""&phi;"", new Character('\u03C6'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,341,"escapeStrings.put(""&chi;"", new Character('\u03C7'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,342,"escapeStrings.put(""&psi;"", new Character('\u03C8'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,343,"escapeStrings.put(""&omega;"", new Character('\u03C9'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,344,"escapeStrings.put(""&thetasym;"", new Character('\u03D1'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,345,"escapeStrings.put(""&upsih;"", new Character('\u03D2'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,346,"escapeStrings.put(""&piv;"", new Character('\u03D6'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,347,"escapeStrings.put(""&bull;"", new Character('\u2022'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,348,"escapeStrings.put(""&hellip;"", new Character('\u2026'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,349,"escapeStrings.put(""&prime;"", new Character('\u2032'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,350,"escapeStrings.put(""&Prime;"", new Character('\u2033'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,351,"escapeStrings.put(""&oline;"", new Character('\u203E'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,352,"escapeStrings.put(""&frasl;"", new Character('\u2044'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,353,"escapeStrings.put(""&weierp;"", new Character('\u2118'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,354,"escapeStrings.put(""&image;"", new Character('\u2111'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,355,"escapeStrings.put(""&real;"", new Character('\u211C'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,356,"escapeStrings.put(""&trade;"", new Character('\u2122'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,357,"escapeStrings.put(""&alefsym;"", new Character('\u2135'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,358,"escapeStrings.put(""&larr;"", new Character('\u2190'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,359,"escapeStrings.put(""&uarr;"", new Character('\u2191'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,360,"escapeStrings.put(""&rarr;"", new Character('\u2192'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,361,"escapeStrings.put(""&darr;"", new Character('\u2193'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,362,"escapeStrings.put(""&harr;"", new Character('\u2194'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,363,"escapeStrings.put(""&crarr;"", new Character('\u21B5'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,364,"escapeStrings.put(""&lArr;"", new Character('\u21D0'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,365,"escapeStrings.put(""&uArr;"", new Character('\u21D1'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,366,"escapeStrings.put(""&rArr;"", new Character('\u21D2'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,367,"escapeStrings.put(""&dArr;"", new Character('\u21D3'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,368,"escapeStrings.put(""&hArr;"", new Character('\u21D4'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,369,"escapeStrings.put(""&forall;"", new Character('\u2200'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,370,"escapeStrings.put(""&part;"", new Character('\u2202'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,371,"escapeStrings.put(""&exist;"", new Character('\u2203'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,372,"escapeStrings.put(""&empty;"", new Character('\u2205'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,373,"escapeStrings.put(""&nabla;"", new Character('\u2207'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,374,"escapeStrings.put(""&isin;"", new Character('\u2208'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,375,"escapeStrings.put(""&notin;"", new Character('\u2209'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,376,"escapeStrings.put(""&ni;"", new Character('\u220B'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,377,"escapeStrings.put(""&prod;"", new Character('\u220F'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,378,"escapeStrings.put(""&sum;"", new Character('\u2211'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,379,"escapeStrings.put(""&minus;"", new Character('\u2212'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,380,"escapeStrings.put(""&lowast;"", new Character('\u2217'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,381,"escapeStrings.put(""&radic;"", new Character('\u221A'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,382,"escapeStrings.put(""&prop;"", new Character('\u221D'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,383,"escapeStrings.put(""&infin;"", new Character('\u221E'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,384,"escapeStrings.put(""&ang;"", new Character('\u2220'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,385,"escapeStrings.put(""&and;"", new Character('\u2227'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,386,"escapeStrings.put(""&or;"", new Character('\u2228'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,387,"escapeStrings.put(""&cap;"", new Character('\u2229'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,388,"escapeStrings.put(""&cup;"", new Character('\u222A'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,389,"escapeStrings.put(""&int;"", new Character('\u222B'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,390,"escapeStrings.put(""&there4;"", new Character('\u2234'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,391,"escapeStrings.put(""&sim;"", new Character('\u223C'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,392,"escapeStrings.put(""&cong;"", new Character('\u2245'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,393,"escapeStrings.put(""&asymp;"", new Character('\u2248'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,394,"escapeStrings.put(""&ne;"", new Character('\u2260'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,395,"escapeStrings.put(""&equiv;"", new Character('\u2261'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,396,"escapeStrings.put(""&le;"", new Character('\u2264'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,397,"escapeStrings.put(""&ge;"", new Character('\u2265'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,398,"escapeStrings.put(""&sub;"", new Character('\u2282'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,399,"escapeStrings.put(""&sup;"", new Character('\u2283'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,400,"escapeStrings.put(""&nsub;"", new Character('\u2284'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,401,"escapeStrings.put(""&sube;"", new Character('\u2286'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,402,"escapeStrings.put(""&supe;"", new Character('\u2287'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,403,"escapeStrings.put(""&oplus;"", new Character('\u2295'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,404,"escapeStrings.put(""&otimes;"", new Character('\u2297'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,405,"escapeStrings.put(""&perp;"", new Character('\u22A5'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,406,"escapeStrings.put(""&sdot;"", new Character('\u22C5'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,407,"escapeStrings.put(""&lceil;"", new Character('\u2308'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,408,"escapeStrings.put(""&rceil;"", new Character('\u2309'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,409,"escapeStrings.put(""&lfloor;"", new Character('\u230A'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,410,"escapeStrings.put(""&rfloor;"", new Character('\u230B'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,411,"escapeStrings.put(""&lang;"", new Character('\u2329'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,412,"escapeStrings.put(""&rang;"", new Character('\u232A'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,413,"escapeStrings.put(""&loz;"", new Character('\u25CA'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,414,"escapeStrings.put(""&spades;"", new Character('\u2660'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,415,"escapeStrings.put(""&clubs;"", new Character('\u2663'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,416,"escapeStrings.put(""&hearts;"", new Character('\u2665'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,417,"escapeStrings.put(""&diams;"", new Character('\u2666'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,418,"escapeStrings.put(""&quot;"", new Character('\u0022'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,419,"escapeStrings.put(""&lt;"", new Character('\u003C'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,420,"escapeStrings.put(""&gt;"", new Character('\u003E'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,421,"escapeStrings.put(""&OElig;"", new Character('\u0152'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,422,"escapeStrings.put(""&oelig;"", new Character('\u0153'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,423,"escapeStrings.put(""&Scaron;"", new Character('\u0160'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,424,"escapeStrings.put(""&scaron;"", new Character('\u0161'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,425,"escapeStrings.put(""&Yuml;"", new Character('\u0178'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,426,"escapeStrings.put(""&circ;"", new Character('\u02C6'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,427,"escapeStrings.put(""&tilde;"", new Character('\u02DC'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,428,"escapeStrings.put(""&ensp;"", new Character('\u2002'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,429,"escapeStrings.put(""&emsp;"", new Character('\u2003'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,430,"escapeStrings.put(""&thinsp;"", new Character('\u2009'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,431,"escapeStrings.put(""&zwnj;"", new Character('\u200C'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,432,"escapeStrings.put(""&zwj;"", new Character('\u200D'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,433,"escapeStrings.put(""&lrm;"", new Character('\u200E'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,434,"escapeStrings.put(""&rlm;"", new Character('\u200F'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,435,"escapeStrings.put(""&ndash;"", new Character('\u2013'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,436,"escapeStrings.put(""&mdash;"", new Character('\u2014'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,437,"escapeStrings.put(""&lsquo;"", new Character('\u2018'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,438,"escapeStrings.put(""&rsquo;"", new Character('\u2019'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,439,"escapeStrings.put(""&sbquo;"", new Character('\u201A'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,440,"escapeStrings.put(""&ldquo;"", new Character('\u201C'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,441,"escapeStrings.put(""&rdquo;"", new Character('\u201D'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,442,"escapeStrings.put(""&bdquo;"", new Character('\u201E'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,443,"escapeStrings.put(""&dagger;"", new Character('\u2020'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,444,"escapeStrings.put(""&Dagger;"", new Character('\u2021'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,445,"escapeStrings.put(""&permil;"", new Character('\u2030'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,446,"escapeStrings.put(""&lsaquo;"", new Character('\u2039'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,447,"escapeStrings.put(""&rsaquo;"", new Character('\u203A'));",Data Loading,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,448,"escapeStrings.put(""&euro;"", new Character('\u20AC'));",Data Loading,
FALSE,FALSE,FALSE,FALSE,,449,},,
FALSE,FALSE,FALSE,FALSE,,450,public static void main(String[] args) {,,
FALSE,FALSE,FALSE,FALSE,,451,"// String[] similarity = fileSimilar(new File(""""), ""FluxoCx"");",,
FALSE,FALSE,FALSE,FALSE,,452,,,
FALSE,FALSE,FALSE,FALSE,,453,},,
FALSE,FALSE,FALSE,FALSE,,454,,,
FALSE,FALSE,FALSE,FALSE,,455,"public static List<String> regexTest(Pattern pattern, String str) {",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,456,Matcher match = pattern.matcher(str);,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,457,List<String> ret = new ArrayList<String>();,,
FALSE,FALSE,FALSE,FALSE,,458,,,
FALSE,FALSE,FALSE,FALSE,WHILE,459,while (match.find()) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,460,ret.add(match.group());,,
FALSE,FALSE,FALSE,FALSE,WHILE,461,},,
FALSE,FALSE,FALSE,FALSE,,462,,,
FALSE,FALSE,FALSE,FALSE,RETURN,463,return ret;,,
FALSE,FALSE,FALSE,FALSE,,464,},,
FALSE,FALSE,FALSE,FALSE,,465,,,
FALSE,FALSE,FALSE,FALSE,,466,/**,,
FALSE,FALSE,FALSE,FALSE,,467,* Gets a specific line of a text (String),,
FALSE,FALSE,FALSE,FALSE,,468,* @param content text,,
FALSE,FALSE,FALSE,FALSE,,469,* @param line line to get,,
FALSE,FALSE,FALSE,FALSE,,470,* @return the specified line,,
FALSE,FALSE,FALSE,FALSE,,471,*/,,
FALSE,FALSE,FALSE,FALSE,,472,"public static String getLine(String content, int line) {",,
TRUE,FALSE,TRUE,TRUE,IF,473,if (content == null) {,Defensive Programming,
FALSE,FALSE,FALSE,FALSE,RETURN,474,return null;,,
FALSE,FALSE,FALSE,FALSE,IF,475,},,
FALSE,FALSE,FALSE,FALSE,,476,,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,477,"String[] contentSplit = content.replace(""\r\n"", ""\n"").split(""\n"");",,
FALSE,FALSE,FALSE,FALSE,,478,,,
TRUE,FALSE,TRUE,TRUE,IF,479,if (contentSplit.length < line) {,Defensive Programming,
FALSE,FALSE,FALSE,FALSE,RETURN,480,return null;,,
FALSE,FALSE,FALSE,FALSE,IF,481,},,
TRUE,FALSE,FALSE,FALSE,RETURN,482,return contentSplit[line - 1];,,
FALSE,FALSE,FALSE,FALSE,,483,},,
FALSE,FALSE,FALSE,FALSE,,484,,,
FALSE,FALSE,FALSE,FALSE,,485,/**,,
FALSE,FALSE,FALSE,FALSE,,486,* Gets the first group of a regex,,
FALSE,FALSE,FALSE,FALSE,,487,* @param pattern Pattern,,
FALSE,FALSE,FALSE,FALSE,,488,* @param str String to find,,
FALSE,FALSE,FALSE,FALSE,,489,* @return the matching group,,
FALSE,FALSE,FALSE,FALSE,,490,*/,,
FALSE,FALSE,FALSE,FALSE,,491,"public static String regexFindFirst(String pattern, String str) {",,
FALSE,FALSE,FALSE,FALSE,RETURN,492,"return regexFindFirst(Pattern.compile(pattern), str, 1);",,
FALSE,FALSE,FALSE,FALSE,,493,},,
FALSE,FALSE,FALSE,FALSE,,494,,,
FALSE,FALSE,FALSE,FALSE,,495,"public static String regexFindFirst(String pattern, String str, int group) {",,
FALSE,FALSE,FALSE,FALSE,RETURN,496,"return regexFindFirst(Pattern.compile(pattern), str, group);",,
FALSE,FALSE,FALSE,FALSE,,497,},,
FALSE,FALSE,FALSE,FALSE,,498,,,
FALSE,FALSE,FALSE,FALSE,,499,"public static String regexFindFirst(Pattern pattern, String str, int group) {",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,500,Matcher match = pattern.matcher(str);,,
FALSE,FALSE,FALSE,FALSE,,501,,,
FALSE,FALSE,FALSE,FALSE,IF,502,if (match.find()) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,503,return match.group(group);,,
FALSE,FALSE,FALSE,FALSE,IF,504,},,
FALSE,FALSE,FALSE,FALSE,,505,,,
FALSE,FALSE,FALSE,FALSE,RETURN,506,return null;,,
FALSE,FALSE,FALSE,FALSE,,507,},,
FALSE,FALSE,FALSE,FALSE,,508,,,
FALSE,FALSE,FALSE,FALSE,,509,"public static List<String> linesThatContains(List<String> a, String[] strArr) {",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,510,List<String> retorno = new ArrayList<String>();,,
FALSE,FALSE,FALSE,FALSE,,511,,,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,512,line: for (String line : a) {,,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,513,for (String str : strArr) {,,
FALSE,FALSE,FALSE,FALSE,IF,514,if (line.contains(str)) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,515,retorno.add(line);,,
FALSE,FALSE,FALSE,FALSE,CONTINUE,516,continue line;,,
FALSE,FALSE,FALSE,FALSE,IF,517,},,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,518,},,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,519,},,
FALSE,FALSE,FALSE,FALSE,RETURN,520,return retorno;,,
FALSE,FALSE,FALSE,FALSE,,521,},,
FALSE,FALSE,FALSE,FALSE,,522,,,
FALSE,FALSE,FALSE,FALSE,,523,"public static List<String> linesThatContains(List<String> a, String str) {",,
FALSE,FALSE,FALSE,FALSE,RETURN,524,"return linesThatContains(a, new String[] {str});",,
FALSE,FALSE,FALSE,FALSE,,525,},,
FALSE,FALSE,FALSE,FALSE,,526,,,
FALSE,FALSE,FALSE,FALSE,,527,"public static List<String> deleteIfContains(List<String> a, String str) {",,
FALSE,FALSE,FALSE,FALSE,RETURN,528,"return deleteIfContains(a, new String[] {str});",,
FALSE,FALSE,FALSE,FALSE,,529,},,
FALSE,FALSE,FALSE,FALSE,,530,,,
FALSE,FALSE,FALSE,FALSE,,531,"public static List<String> deleteIfContains(List<String> a, String[] strArr) {",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,532,List<String> retorno = new ArrayList<String>();,,
FALSE,FALSE,FALSE,FALSE,,533,,,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,534,for (String line : a) {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,535,boolean contains = false;,,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,536,for (String str : strArr) {,,
FALSE,FALSE,FALSE,FALSE,IF,537,if (line.contains(str)) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,538,contains = true;,,
FALSE,FALSE,FALSE,FALSE,BREAK,539,break;,,
FALSE,FALSE,FALSE,FALSE,IF,540,},,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,541,},,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,542,,,
FALSE,FALSE,FALSE,FALSE,IF,543,if (!contains) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,544,retorno.add(line);,,
FALSE,FALSE,FALSE,FALSE,IF,545,},,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,546,},,
FALSE,FALSE,FALSE,FALSE,RETURN,547,return retorno;,,
FALSE,FALSE,FALSE,FALSE,,548,},,
FALSE,FALSE,FALSE,FALSE,,549,,,
FALSE,FALSE,FALSE,FALSE,,550,"public static List<String> deleteIfNotContains(List<String> a, String str) {",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,551,List<String> retorno = new ArrayList<String>();,,
FALSE,FALSE,FALSE,FALSE,,552,,,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,553,for (String line : a) {,,
FALSE,FALSE,FALSE,FALSE,IF,554,if (line.contains(str)) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,555,retorno.add(line);,,
FALSE,FALSE,FALSE,FALSE,IF,556,},,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,557,},,
FALSE,FALSE,FALSE,FALSE,RETURN,558,return retorno;,,
FALSE,FALSE,FALSE,FALSE,,559,},,
FALSE,FALSE,FALSE,FALSE,,560,,,
FALSE,FALSE,FALSE,FALSE,,561,"public static List<String> mixStringLists(List<String> a, List<String> b) {",,
FALSE,FALSE,FALSE,FALSE,,562,String str;,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,563,List<String> retorno = new ArrayList<String>();,,
FALSE,FALSE,FALSE,FALSE,,564,,,
FALSE,FALSE,FALSE,FALSE,FOR,565,for (Iterator<String> localIterator = a.iterator(); localIterator.hasNext();) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,566,str = localIterator.next();,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,567,retorno.add(str);,,
FALSE,FALSE,FALSE,FALSE,FOR,568,},,
FALSE,FALSE,FALSE,FALSE,FOR,569,for (Iterator<String> localIterator = b.iterator(); localIterator.hasNext();) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,570,str = localIterator.next();,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,571,retorno.add(str);,,
FALSE,FALSE,FALSE,FALSE,FOR,572,},,
FALSE,FALSE,FALSE,FALSE,,573,,,
FALSE,FALSE,FALSE,FALSE,RETURN,574,return retorno;,,
FALSE,FALSE,FALSE,FALSE,,575,},,
FALSE,FALSE,FALSE,FALSE,,576,,,
FALSE,FALSE,FALSE,FALSE,,577,"@SuppressWarnings(""unchecked"")",,
FALSE,FALSE,FALSE,FALSE,,578,"public static <T> Collection<T> mixLists(Collection<?> a, Collection<?> b) {",,
FALSE,FALSE,FALSE,FALSE,,579,T str;,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,580,Collection<T> retorno = new ArrayList<T>();,,
FALSE,FALSE,FALSE,FALSE,,581,,,
TRUE,FALSE,FALSE,FALSE,FOR,582,for (Iterator<?> localIterator = a.iterator(); localIterator.hasNext();) {,,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,583,str = (T) localIterator.next();,,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,584,retorno.add(str);,,
FALSE,FALSE,FALSE,FALSE,FOR,585,},,
TRUE,FALSE,TRUE,FALSE,FOR,586,for (Iterator<?> localIterator = b.iterator(); localIterator.hasNext();) {,Iteration,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,587,str = (T) localIterator.next();,,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,588,retorno.add(str);,,
FALSE,FALSE,FALSE,FALSE,FOR,589,},,
FALSE,FALSE,FALSE,FALSE,,590,,,
TRUE,FALSE,FALSE,FALSE,RETURN,591,return retorno;,,
FALSE,FALSE,FALSE,FALSE,,592,},,
FALSE,FALSE,FALSE,FALSE,,593,,,
FALSE,FALSE,FALSE,FALSE,,594,public static String removeAccents(String _s) {,,
FALSE,FALSE,FALSE,FALSE,,595,,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,596,String s = new String(_s);,,
TRUE,FALSE,TRUE,TRUE,EXPRESSION,597,"s = s.replace((char) 0xE1, 'a');",String Processing,
TRUE,FALSE,TRUE,TRUE,EXPRESSION,598,"s = s.replace((char) 0xE3, 'a');",String Processing,
FALSE,FALSE,FALSE,FALSE,,599,,,
TRUE,FALSE,TRUE,TRUE,EXPRESSION,600,"s = s.replace((char) 0xE9, 'e');",String Processing,
FALSE,FALSE,FALSE,FALSE,,601,,,
TRUE,FALSE,TRUE,TRUE,EXPRESSION,602,"s = s.replace((char) 0xED, 'i');",String Processing,
FALSE,FALSE,FALSE,FALSE,,603,,,
TRUE,FALSE,TRUE,TRUE,EXPRESSION,604,"s = s.replace((char) 0xF3, 'o');",String Processing,
FALSE,FALSE,FALSE,FALSE,,605,,,
TRUE,FALSE,TRUE,TRUE,EXPRESSION,606,"s = s.replace((char) 0xFA, 'u');",String Processing,
FALSE,FALSE,FALSE,FALSE,,607,,,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,608,"s = Normalizer.normalize(s, Normalizer.Form.NFD);",,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,609,"s = s.replaceAll(""[\\p{InCombiningDiacriticalMarks}]"", """");",,
FALSE,FALSE,FALSE,FALSE,,610,,,
TRUE,FALSE,FALSE,FALSE,RETURN,611,return s;,,
FALSE,FALSE,FALSE,FALSE,,612,},,
FALSE,FALSE,FALSE,FALSE,,613,,,
FALSE,FALSE,FALSE,FALSE,,614,"public static List<List<String>> split(List<String> list, int count) {",,
FALSE,FALSE,FALSE,FALSE,THROW,615,"throw new UnsupportedOperationException(""Not implemented yet."");",,
FALSE,FALSE,FALSE,FALSE,,616,},,
FALSE,FALSE,FALSE,FALSE,,617,,,
FALSE,FALSE,FALSE,FALSE,,618,"public static Set<String> fixList(FixType type, Collection<String> list) {",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,619,Comparator<String> comparator = null;,,
FALSE,FALSE,FALSE,FALSE,IF,620,if (type == FixType.DELETEREPEATED) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,621,comparator = new Unique();,,
FALSE,FALSE,FALSE,FALSE,IF,622,},,
FALSE,FALSE,FALSE,FALSE,IF,623,if (type == FixType.ALPHABETICAL) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,624,comparator = new Sort();,,
FALSE,FALSE,FALSE,FALSE,IF,625,},,
FALSE,FALSE,FALSE,FALSE,IF,626,if (type == FixType.ALPHABETICALDELETEREPEATED) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,627,comparator = new UniqueSort();,,
FALSE,FALSE,FALSE,FALSE,IF,628,},,
FALSE,FALSE,FALSE,FALSE,,629,,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,630,Set<String> retorno = new TreeSet<String>(comparator);,,
FALSE,FALSE,FALSE,FALSE,,631,,,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,632,for (String str : list) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,633,retorno.add(str);,,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,634,},,
FALSE,FALSE,FALSE,FALSE,,635,,,
FALSE,FALSE,FALSE,FALSE,RETURN,636,return retorno;,,
FALSE,FALSE,FALSE,FALSE,,637,},,
FALSE,FALSE,FALSE,FALSE,,638,,,
FALSE,FALSE,FALSE,FALSE,,639,"public static boolean saveToFile(int type, Collection<?> list, File file) {",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,640,BufferedWriter out = null;,,
FALSE,FALSE,FALSE,FALSE,TRY,641,try {,,
FALSE,FALSE,FALSE,FALSE,IF,642,if (type == APPEND) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,643,"out = new BufferedWriter(new FileWriter(file, true));",,
FALSE,FALSE,FALSE,FALSE,IF,644,} else {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,645,out = new BufferedWriter(new FileWriter(file));,,
FALSE,FALSE,FALSE,FALSE,IF,646,},,
FALSE,FALSE,FALSE,FALSE,TRY,647,,,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,648,for (Object str : list) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,649,out.write(str + CARRIAGE_RETURN);,,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,650,},,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,651,out.close();,,
FALSE,FALSE,FALSE,FALSE,RETURN,652,return true;,,
FALSE,FALSE,FALSE,FALSE,TRY,653,} catch (Exception e) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,654,e.printStackTrace();,,
FALSE,FALSE,FALSE,FALSE,RETURN,655,return false;,,
FALSE,FALSE,FALSE,FALSE,TRY,656,} finally {,,
FALSE,FALSE,FALSE,FALSE,TRY,657,try {,,
FALSE,FALSE,FALSE,FALSE,IF,658,if (out != null) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,659,out.close();,,
FALSE,FALSE,FALSE,FALSE,IF,660,},,
FALSE,FALSE,FALSE,FALSE,TRY,661,} catch (IOException e) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,662,e.printStackTrace();,,
FALSE,FALSE,FALSE,FALSE,TRY,663,},,
FALSE,FALSE,FALSE,FALSE,TRY,664,},,
FALSE,FALSE,FALSE,FALSE,,665,},,
FALSE,FALSE,FALSE,FALSE,,666,,,
FALSE,FALSE,FALSE,FALSE,,667,"public static boolean saveToFile(int type, Collection<?> list, String file) {",,
FALSE,FALSE,FALSE,FALSE,RETURN,668,"return saveToFile(type, list, new File(file));",,
FALSE,FALSE,FALSE,FALSE,,669,},,
FALSE,FALSE,FALSE,FALSE,,670,,,
FALSE,FALSE,FALSE,FALSE,,671,"public static List<String> getContentListSplit(String content, String delimiter) {",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,672,List<String> retorno = new ArrayList<String>();,,
FALSE,FALSE,FALSE,FALSE,,673,,,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,674,for (String str : content.split(delimiter)) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,675,retorno.add(str);,,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,676,},,
FALSE,FALSE,FALSE,FALSE,,677,,,
FALSE,FALSE,FALSE,FALSE,RETURN,678,return retorno;,,
FALSE,FALSE,FALSE,FALSE,,679,},,
FALSE,FALSE,FALSE,FALSE,,680,,,
FALSE,FALSE,FALSE,FALSE,,681,"public static List<String> getContentListSplit(InputStream is, String delimiter)",,
FALSE,FALSE,FALSE,FALSE,,682,throws IOException {,,
FALSE,FALSE,FALSE,FALSE,RETURN,683,"return getContentListSplit(getContent(is), delimiter);",,
FALSE,FALSE,FALSE,FALSE,,684,},,
FALSE,FALSE,FALSE,FALSE,,685,,,
FALSE,FALSE,FALSE,FALSE,,686,"public static List<String> getContentListSplit(File file, String delimiter) throws IOException {",,
FALSE,FALSE,FALSE,FALSE,RETURN,687,"return getContentListSplit(getContent(file), delimiter);",,
FALSE,FALSE,FALSE,FALSE,,688,},,
FALSE,FALSE,FALSE,FALSE,,689,,,
FALSE,FALSE,FALSE,FALSE,,690,/**,,
FALSE,FALSE,FALSE,FALSE,,691,* Split string content into list,,
FALSE,FALSE,FALSE,FALSE,,692,* @param content String content,,
FALSE,FALSE,FALSE,FALSE,,693,* @return list,,
FALSE,FALSE,FALSE,FALSE,,694,*/,,
FALSE,FALSE,FALSE,FALSE,,695,public static List<String> asListLines(String content) {,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,696,List<String> retorno = new ArrayList<String>();,,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,697,"content = content.replace(CARRIAGE_RETURN, RETURN);",,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,698,"content = content.replace(RETURN, CARRIAGE_RETURN);",,
TRUE,FALSE,FALSE,FALSE,FOR_EACH,699,for (String str : content.split(CARRIAGE_RETURN)) {,,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,700,retorno.add(str);,,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,701,},,
TRUE,FALSE,FALSE,FALSE,RETURN,702,return retorno;,,
FALSE,FALSE,FALSE,FALSE,,703,},,
FALSE,FALSE,FALSE,FALSE,,704,,,
FALSE,FALSE,FALSE,FALSE,,705,/**,,
FALSE,FALSE,FALSE,FALSE,,706,"* Split string content into list, ignoring matches of the pattern",,
FALSE,FALSE,FALSE,FALSE,,707,* @param content String content,,
FALSE,FALSE,FALSE,FALSE,,708,* @param ignorePattern Pattern to ignore,,
FALSE,FALSE,FALSE,FALSE,,709,* @return list,,
FALSE,FALSE,FALSE,FALSE,,710,*/,,
FALSE,FALSE,FALSE,FALSE,,711,"public static List<String> asListLinesIgnore(String content, Pattern ignorePattern) {",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,712,List<String> retorno = new ArrayList<String>();,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,713,"content = content.replace(CARRIAGE_RETURN, RETURN);",,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,714,"content = content.replace(RETURN, CARRIAGE_RETURN);",,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,715,for (String str : content.split(CARRIAGE_RETURN)) {,,
FALSE,FALSE,FALSE,FALSE,IF,716,if (!ignorePattern.matcher(str).matches()) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,717,retorno.add(str);,,
FALSE,FALSE,FALSE,FALSE,IF,718,},,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,719,},,
FALSE,FALSE,FALSE,FALSE,RETURN,720,return retorno;,,
FALSE,FALSE,FALSE,FALSE,,721,},,
FALSE,FALSE,FALSE,FALSE,,722,,,
FALSE,FALSE,FALSE,FALSE,,723,,,
FALSE,FALSE,FALSE,FALSE,,724,"public static List<String> getContentLines(File file, String codePage) throws IOException,",,
FALSE,FALSE,FALSE,FALSE,,725,UnsupportedEncodingException {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,726,"String content = getContent(file, codePage);",,
FALSE,FALSE,FALSE,FALSE,IF,727,if (content.contains(CARRIAGE_RETURN)) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,728,"content = content.replace(CARRIAGE_RETURN, RETURN);",,
FALSE,FALSE,FALSE,FALSE,IF,729,},,
FALSE,FALSE,FALSE,FALSE,,730,,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,731,List<String> mutableList = new ArrayList<String>();,,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,732,for (String str : content.split(RETURN)) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,733,mutableList.add(str);,,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,734,},,
FALSE,FALSE,FALSE,FALSE,RETURN,735,return mutableList;,,
FALSE,FALSE,FALSE,FALSE,,736,},,
FALSE,FALSE,FALSE,FALSE,,737,,,
FALSE,FALSE,FALSE,FALSE,,738,public static List<String> getContentLines(InputStreamReader reader) throws IOException {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,739,String content = getContent(reader);,,
FALSE,FALSE,FALSE,FALSE,IF,740,if (content.contains(CARRIAGE_RETURN)) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,741,"content = content.replace(CARRIAGE_RETURN, RETURN);",,
FALSE,FALSE,FALSE,FALSE,IF,742,},,
FALSE,FALSE,FALSE,FALSE,,743,,,
FALSE,FALSE,FALSE,FALSE,RETURN,744,return Arrays.asList(content.split(RETURN));,,
FALSE,FALSE,FALSE,FALSE,,745,},,
FALSE,FALSE,FALSE,FALSE,,746,,,
FALSE,FALSE,FALSE,FALSE,,747,public static List<String> getContentLines(InputStream is) throws IOException {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,748,String content = getContent(is);,,
FALSE,FALSE,FALSE,FALSE,IF,749,if (content.contains(CARRIAGE_RETURN)) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,750,"content = content.replace(CARRIAGE_RETURN, RETURN);",,
FALSE,FALSE,FALSE,FALSE,IF,751,},,
FALSE,FALSE,FALSE,FALSE,,752,,,
FALSE,FALSE,FALSE,FALSE,RETURN,753,return Arrays.asList(content.split(RETURN));,,
FALSE,FALSE,FALSE,FALSE,,754,},,
FALSE,FALSE,FALSE,FALSE,,755,,,
FALSE,FALSE,FALSE,FALSE,,756,"public static Map<String, String> getContentMap(File file) throws IOException {",,
FALSE,FALSE,FALSE,FALSE,RETURN,757,"return getContentMap(file, "":"");",,
FALSE,FALSE,FALSE,FALSE,,758,},,
FALSE,FALSE,FALSE,FALSE,,759,,,
FALSE,FALSE,FALSE,FALSE,,760,"public static Map<String, String> getContentMapSneaky(File file, String separator) {",,
FALSE,FALSE,FALSE,FALSE,TRY,761,try {,,
FALSE,FALSE,FALSE,FALSE,RETURN,762,"return getContentMap(file, separator);",,
FALSE,FALSE,FALSE,FALSE,TRY,763,} catch (IOException e) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,764,e.printStackTrace();,,
FALSE,FALSE,FALSE,FALSE,TRY,765,},,
FALSE,FALSE,FALSE,FALSE,RETURN,766,return null;,,
FALSE,FALSE,FALSE,FALSE,,767,},,
FALSE,FALSE,FALSE,FALSE,,768,,,
FALSE,FALSE,FALSE,FALSE,,769,"public static Map<String, String> getContentMapEscaped(File file, String separator)",,
FALSE,FALSE,FALSE,FALSE,,770,throws IOException {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,771,List<String> content = getContentLines(file);,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,772,"Map<String, String> map = new LinkedHashMap<String, String>();",,
FALSE,FALSE,FALSE,FALSE,,773,,,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,774,for (String line : content) {,,
FALSE,FALSE,FALSE,FALSE,IF,775,if (line.trim().length() > 0 && line.contains(separator)) {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,776,String[] keyValue = line.split(separator);,,
FALSE,FALSE,FALSE,FALSE,IF,777,if (keyValue.length < 2) {,,
FALSE,FALSE,FALSE,FALSE,CONTINUE,778,continue;,,
FALSE,FALSE,FALSE,FALSE,IF,779,},,
FALSE,FALSE,FALSE,FALSE,IF,780,,,
FALSE,FALSE,FALSE,FALSE,IF,781,"if (line.contains(""#escapedtwodots#"")) {",,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,782,"map.put(keyValue[0].replace(""#escapedtwodots#"", "":""),",,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,783,"keyValue[1].replace(""#escapedtwodots#"", "":""));",,
FALSE,FALSE,FALSE,FALSE,IF,784,} else {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,785,"map.put(keyValue[0], keyValue[1]);",,
FALSE,FALSE,FALSE,FALSE,IF,786,},,
FALSE,FALSE,FALSE,FALSE,IF,787,,,
FALSE,FALSE,FALSE,FALSE,IF,788,},,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,789,},,
FALSE,FALSE,FALSE,FALSE,,790,,,
FALSE,FALSE,FALSE,FALSE,RETURN,791,return map;,,
FALSE,FALSE,FALSE,FALSE,,792,},,
FALSE,FALSE,FALSE,FALSE,,793,,,
FALSE,FALSE,FALSE,FALSE,,794,/**,,
FALSE,FALSE,FALSE,FALSE,,795,"* Get content of a file as a Map&lt;String, String&gt;, using separator to split values",,
FALSE,FALSE,FALSE,FALSE,,796,* @param file File to get content,,
FALSE,FALSE,FALSE,FALSE,,797,* @param separator The separator,,
FALSE,FALSE,FALSE,FALSE,,798,* @return The map with the values,,
FALSE,FALSE,FALSE,FALSE,,799,* @throws IOException I/O Error,,
FALSE,FALSE,FALSE,FALSE,,800,*/,,
FALSE,FALSE,FALSE,FALSE,,801,"public static Map<String, String> getContentMap(File file, String separator) throws IOException {",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,802,List<String> content = getContentLines(file);,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,803,"Map<String, String> map = new LinkedHashMap<String, String>();",,
FALSE,FALSE,FALSE,FALSE,,804,,,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,805,for (String line : content) {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,806,String[] spl = line.split(separator);,,
FALSE,FALSE,FALSE,FALSE,IF,807,if (line.trim().length() > 0) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,808,"map.put(spl[0], (spl.length > 1 ? spl[1] : """"));",,
FALSE,FALSE,FALSE,FALSE,IF,809,},,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,810,},,
FALSE,FALSE,FALSE,FALSE,,811,,,
FALSE,FALSE,FALSE,FALSE,RETURN,812,return map;,,
FALSE,FALSE,FALSE,FALSE,,813,},,
FALSE,FALSE,FALSE,FALSE,,814,,,
FALSE,FALSE,FALSE,FALSE,,815,/**,,
FALSE,FALSE,FALSE,FALSE,,816,* Save map to file,,
FALSE,FALSE,FALSE,FALSE,,817,* @param map Map to save,,
FALSE,FALSE,FALSE,FALSE,,818,* @param file File to save,,
FALSE,FALSE,FALSE,FALSE,,819,* @throws IOException I/O error,,
FALSE,FALSE,FALSE,FALSE,,820,*/,,
FALSE,FALSE,FALSE,FALSE,,821,"public static void saveContentMap(Map<String, String> map, File file) throws IOException {",,
FALSE,FALSE,FALSE,FALSE,,822,,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,823,FileWriter out = new FileWriter(file);,,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,824,for (String key : map.keySet()) {,,
FALSE,FALSE,FALSE,FALSE,IF,825,if (map.get(key) != null) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,826,"out.write(key.replace("":"", ""#escapedtwodots#"") + "":""",,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,827,#ERROR!,,
FALSE,FALSE,FALSE,FALSE,IF,828,},,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,829,},,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,830,out.close();,,
FALSE,FALSE,FALSE,FALSE,,831,},,
FALSE,FALSE,FALSE,FALSE,,832,,,
FALSE,FALSE,FALSE,FALSE,,833,public static List<String> getContentLinesSneaky(File file) {,,
FALSE,FALSE,FALSE,FALSE,TRY,834,try {,,
FALSE,FALSE,FALSE,FALSE,RETURN,835,return getContentLines(file);,,
FALSE,FALSE,FALSE,FALSE,TRY,836,} catch (IOException e) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,837,e.printStackTrace();,,
FALSE,FALSE,FALSE,FALSE,TRY,838,},,
FALSE,FALSE,FALSE,FALSE,RETURN,839,return null;,,
FALSE,FALSE,FALSE,FALSE,,840,},,
FALSE,FALSE,FALSE,FALSE,,841,,,
FALSE,FALSE,FALSE,FALSE,,842,public static List<String> getContentLines(File file) throws IOException {,,
FALSE,FALSE,FALSE,FALSE,RETURN,843,"return getContentLines(file, Charset.defaultCharset().displayName());",,
FALSE,FALSE,FALSE,FALSE,,844,},,
FALSE,FALSE,FALSE,FALSE,,845,,,
FALSE,FALSE,FALSE,FALSE,,846,,,
FALSE,FALSE,FALSE,FALSE,,847,,,
FALSE,FALSE,FALSE,FALSE,,848,"public static boolean fileHasText(File file, String text) {",,
FALSE,FALSE,FALSE,FALSE,IF,849,if (file.exists()) {,,
FALSE,FALSE,FALSE,FALSE,IF,850,InputStream in;,,
FALSE,FALSE,FALSE,FALSE,TRY,851,try {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,852,in = new BufferedInputStream(new FileInputStream(file));,,
FALSE,FALSE,FALSE,FALSE,RETURN,853,"return MyStreamUtils.streamHasText(in, text);",,
FALSE,FALSE,FALSE,FALSE,TRY,854,} catch (FileNotFoundException e) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,855,e.printStackTrace();,,
FALSE,FALSE,FALSE,FALSE,TRY,856,},,
FALSE,FALSE,FALSE,FALSE,IF,857,,,
FALSE,FALSE,FALSE,FALSE,IF,858,},,
FALSE,FALSE,FALSE,FALSE,RETURN,859,return false;,,
FALSE,FALSE,FALSE,FALSE,,860,},,
FALSE,FALSE,FALSE,FALSE,,861,,,
FALSE,FALSE,FALSE,FALSE,,862,public static String getContent(InputStreamReader in) throws IOException {,,
FALSE,FALSE,FALSE,FALSE,,863,,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,864,StringBuffer sb = new StringBuffer();,,
FALSE,FALSE,FALSE,FALSE,TRY,865,try {,,
FALSE,FALSE,FALSE,FALSE,TRY,866,,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,867,int data = in.read();,,
FALSE,FALSE,FALSE,FALSE,WHILE,868,while (data != -1) {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,869,char theChar = (char) data;,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,870,sb.append(theChar);,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,871,data = in.read();,,
FALSE,FALSE,FALSE,FALSE,WHILE,872,},,
FALSE,FALSE,FALSE,FALSE,TRY,873,,,
FALSE,FALSE,FALSE,FALSE,TRY,874,} catch (IOException e) {,,
FALSE,FALSE,FALSE,FALSE,THROW,875,throw e;,,
FALSE,FALSE,FALSE,FALSE,TRY,876,} finally {,,
FALSE,FALSE,FALSE,FALSE,TRY,877,try {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,878,in.close();,,
FALSE,FALSE,FALSE,FALSE,TRY,879,} catch (IOException e) {,,
FALSE,FALSE,FALSE,FALSE,THROW,880,throw e;,,
FALSE,FALSE,FALSE,FALSE,TRY,881,},,
FALSE,FALSE,FALSE,FALSE,TRY,882,},,
FALSE,FALSE,FALSE,FALSE,,883,,,
FALSE,FALSE,FALSE,FALSE,RETURN,884,return sb.toString();,,
FALSE,FALSE,FALSE,FALSE,,885,},,
FALSE,FALSE,FALSE,FALSE,,886,,,
FALSE,FALSE,FALSE,FALSE,,887,public static String getContent(InputStream in) throws IOException {,,
FALSE,FALSE,FALSE,FALSE,,888,final byte[] readBuffer = new byte[8192];,,
FALSE,FALSE,FALSE,FALSE,,889,,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,890,StringBuffer sb = new StringBuffer();,,
FALSE,FALSE,FALSE,FALSE,TRY,891,try {,,
FALSE,FALSE,FALSE,FALSE,IF,892,if (in.available() > 0) {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,893,int bytesRead = 0;,,
FALSE,FALSE,FALSE,FALSE,WHILE,894,while ((bytesRead = in.read(readBuffer)) != -1) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,895,"sb.append(new String(readBuffer, 0, bytesRead));",,
FALSE,FALSE,FALSE,FALSE,WHILE,896,},,
FALSE,FALSE,FALSE,FALSE,IF,897,},,
FALSE,FALSE,FALSE,FALSE,TRY,898,} catch (IOException e) {,,
FALSE,FALSE,FALSE,FALSE,THROW,899,throw e;,,
FALSE,FALSE,FALSE,FALSE,TRY,900,} finally {,,
FALSE,FALSE,FALSE,FALSE,TRY,901,try {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,902,in.close();,,
FALSE,FALSE,FALSE,FALSE,TRY,903,} catch (IOException e) {,,
FALSE,FALSE,FALSE,FALSE,THROW,904,throw e;,,
FALSE,FALSE,FALSE,FALSE,TRY,905,},,
FALSE,FALSE,FALSE,FALSE,TRY,906,},,
FALSE,FALSE,FALSE,FALSE,,907,,,
FALSE,FALSE,FALSE,FALSE,RETURN,908,return sb.toString();,,
FALSE,FALSE,FALSE,FALSE,,909,},,
FALSE,FALSE,FALSE,FALSE,,910,,,
FALSE,FALSE,FALSE,FALSE,,911,"public static String getContent(File file, String codepage) throws IOException,",,
FALSE,FALSE,FALSE,FALSE,,912,UnsupportedEncodingException {,,
FALSE,FALSE,FALSE,FALSE,RETURN,913,"return new String(getContent(file).getBytes(), codepage);",,
FALSE,FALSE,FALSE,FALSE,,914,},,
FALSE,FALSE,FALSE,FALSE,,915,,,
FALSE,FALSE,FALSE,FALSE,,916,"public static String getResourceContent(Class<?> clazz, String resource) {",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,917,URL url = clazz.getResource(resource);,,
FALSE,FALSE,FALSE,FALSE,,918,,,
FALSE,FALSE,FALSE,FALSE,IF,919,if (url == null) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,920,return null;,,
FALSE,FALSE,FALSE,FALSE,IF,921,},,
FALSE,FALSE,FALSE,FALSE,,922,,,
FALSE,FALSE,FALSE,FALSE,TRY,923,try {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,924,String conteudo = getContent(url.openStream());,,
FALSE,FALSE,FALSE,FALSE,RETURN,925,return conteudo;,,
FALSE,FALSE,FALSE,FALSE,TRY,926,} catch (IOException e) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,927,e.printStackTrace();,,
FALSE,FALSE,FALSE,FALSE,TRY,928,} catch (Exception e) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,929,e.printStackTrace();,,
FALSE,FALSE,FALSE,FALSE,TRY,930,},,
FALSE,FALSE,FALSE,FALSE,,931,,,
FALSE,FALSE,FALSE,FALSE,RETURN,932,return null;,,
FALSE,FALSE,FALSE,FALSE,,933,},,
FALSE,FALSE,FALSE,FALSE,,934,,,
FALSE,FALSE,FALSE,FALSE,,935,public static byte[] getContentBytes(File file) throws IOException {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,936,ByteArrayOutputStream ous = null;,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,937,InputStream ios = null;,,
FALSE,FALSE,FALSE,FALSE,TRY,938,try {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,939,byte[] buffer = new byte[4096];,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,940,ous = new ByteArrayOutputStream();,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,941,ios = new FileInputStream(file);,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,942,int read = 0;,,
FALSE,FALSE,FALSE,FALSE,WHILE,943,while ((read = ios.read(buffer)) != -1) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,944,"ous.write(buffer, 0, read);",,
FALSE,FALSE,FALSE,FALSE,WHILE,945,},,
FALSE,FALSE,FALSE,FALSE,TRY,946,} finally {,,
FALSE,FALSE,FALSE,FALSE,TRY,947,try {,,
FALSE,FALSE,FALSE,FALSE,IF,948,if (ous != null),,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,949,ous.close();,,
FALSE,FALSE,FALSE,FALSE,TRY,950,} catch (IOException e) {,,
FALSE,FALSE,FALSE,FALSE,TRY,951,},,
FALSE,FALSE,FALSE,FALSE,TRY,952,,,
FALSE,FALSE,FALSE,FALSE,TRY,953,try {,,
FALSE,FALSE,FALSE,FALSE,IF,954,if (ios != null),,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,955,ios.close();,,
FALSE,FALSE,FALSE,FALSE,TRY,956,} catch (IOException e) {,,
FALSE,FALSE,FALSE,FALSE,TRY,957,},,
FALSE,FALSE,FALSE,FALSE,TRY,958,},,
FALSE,FALSE,FALSE,FALSE,RETURN,959,return ous.toByteArray();,,
FALSE,FALSE,FALSE,FALSE,,960,},,
FALSE,FALSE,FALSE,FALSE,,961,,,
FALSE,FALSE,FALSE,FALSE,,962,public static String getContent(File file) throws IOException {,,
FALSE,FALSE,FALSE,FALSE,,963,InputStream in;,,
FALSE,FALSE,FALSE,FALSE,TRY,964,try {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,965,in = new BufferedInputStream(new FileInputStream(file));,,
FALSE,FALSE,FALSE,FALSE,RETURN,966,return getContent(in);,,
FALSE,FALSE,FALSE,FALSE,TRY,967,} catch (IOException e) {,,
FALSE,FALSE,FALSE,FALSE,THROW,968,throw e;,,
FALSE,FALSE,FALSE,FALSE,TRY,969,},,
FALSE,FALSE,FALSE,FALSE,,970,},,
FALSE,FALSE,FALSE,FALSE,,971,,,
FALSE,FALSE,FALSE,FALSE,,972,public static byte[] getUrlContentBytes(String stringUrl) {,,
FALSE,FALSE,FALSE,FALSE,TRY,973,try {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,974,URL url = new URL(stringUrl);,,
FALSE,FALSE,FALSE,FALSE,RETURN,975,return MyStreamUtils.readContentBytes(url.openStream());,,
FALSE,FALSE,FALSE,FALSE,TRY,976,} catch (Exception e) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,977,e.printStackTrace();,,
FALSE,FALSE,FALSE,FALSE,TRY,978,},,
FALSE,FALSE,FALSE,FALSE,,979,,,
FALSE,FALSE,FALSE,FALSE,RETURN,980,return null;,,
FALSE,FALSE,FALSE,FALSE,,981,},,
FALSE,FALSE,FALSE,FALSE,,982,,,
FALSE,FALSE,FALSE,FALSE,,983,/**,,
FALSE,FALSE,FALSE,FALSE,,984,* Returns content for the given URL,,
FALSE,FALSE,FALSE,FALSE,,985,* @param stringUrl URL,,
FALSE,FALSE,FALSE,FALSE,,986,* @return Response content,,
FALSE,FALSE,FALSE,FALSE,,987,*/,,
FALSE,FALSE,FALSE,FALSE,,988,public static String getContent(String stringUrl) {,,
FALSE,FALSE,FALSE,FALSE,IF,989,"if (stringUrl.equalsIgnoreCase(""clipboard"")) {",,
FALSE,FALSE,FALSE,FALSE,TRY,990,try {,,
FALSE,FALSE,FALSE,FALSE,RETURN,991,return getFromClipboard();,,
FALSE,FALSE,FALSE,FALSE,TRY,992,} catch (Exception e) {,,
FALSE,FALSE,FALSE,FALSE,TRY,993,//it's ok.,,
FALSE,FALSE,FALSE,FALSE,TRY,994,},,
FALSE,FALSE,FALSE,FALSE,IF,995,},,
FALSE,FALSE,FALSE,FALSE,RETURN,996,"return getContent(stringUrl, null);",,
FALSE,FALSE,FALSE,FALSE,,997,},,
FALSE,FALSE,FALSE,FALSE,,998,,,
FALSE,FALSE,FALSE,FALSE,,999,/**,,
FALSE,FALSE,FALSE,FALSE,,1000,* Returns content for the given URL,,
FALSE,FALSE,FALSE,FALSE,,1001,* @param stringUrl URL,,
FALSE,FALSE,FALSE,FALSE,,1002,* @param requestProperties Properties,,
FALSE,FALSE,FALSE,FALSE,,1003,* @return Response content,,
FALSE,FALSE,FALSE,FALSE,,1004,*/,,
FALSE,FALSE,FALSE,FALSE,,1005,"public static String getContent(String stringUrl, Map<String, String> requestProperties) {",,
FALSE,FALSE,FALSE,FALSE,TRY,1006,try {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1007,URL url = new URL(stringUrl);,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1008,URLConnection conn = url.openConnection();,,
FALSE,FALSE,FALSE,FALSE,TRY,1009,,,
FALSE,FALSE,FALSE,FALSE,IF,1010,if (requestProperties != null) {,,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,1011,"for (Entry<String, String> entry : requestProperties.entrySet()) {",,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1012,"conn.setRequestProperty(entry.getKey(), entry.getValue());",,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,1013,},,
FALSE,FALSE,FALSE,FALSE,IF,1014,},,
FALSE,FALSE,FALSE,FALSE,TRY,1015,,,
FALSE,FALSE,FALSE,FALSE,IF,1016,if (conn instanceof HttpURLConnection) {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1017,HttpURLConnection httpURLConnection = (HttpURLConnection) conn;,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1018,int errorCode = httpURLConnection.getResponseCode();,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1019,InputStream err = httpURLConnection.getErrorStream();,,
FALSE,FALSE,FALSE,FALSE,IF,1020,if (err != null) {,,
FALSE,FALSE,FALSE,FALSE,IF,1021,"if (""gzip"".equals(conn.getContentEncoding())) {",,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1022,err = new GZIPInputStream(err);,,
FALSE,FALSE,FALSE,FALSE,IF,1023,},,
FALSE,FALSE,FALSE,FALSE,IF,1024,,,
FALSE,FALSE,FALSE,FALSE,THROW,1025,"throw new IOException(""Error fetching "" + stringUrl + "": "" + MyStreamUtils.readContent(err));",,
FALSE,FALSE,FALSE,FALSE,IF,1026,},,
FALSE,FALSE,FALSE,FALSE,IF,1027,,,
FALSE,FALSE,FALSE,FALSE,IF,1028,},,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1029,InputStream is = conn.getInputStream();,,
FALSE,FALSE,FALSE,FALSE,IF,1030,"if (""gzip"".equals(conn.getContentEncoding())) {",,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1031,is = new GZIPInputStream(is);,,
FALSE,FALSE,FALSE,FALSE,IF,1032,},,
FALSE,FALSE,FALSE,FALSE,TRY,1033,,,
FALSE,FALSE,FALSE,FALSE,RETURN,1034,return MyStreamUtils.readContent(is);,,
FALSE,FALSE,FALSE,FALSE,TRY,1035,} catch (Exception e) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1036,e.printStackTrace();,,
FALSE,FALSE,FALSE,FALSE,TRY,1037,},,
FALSE,FALSE,FALSE,FALSE,,1038,,,
FALSE,FALSE,FALSE,FALSE,RETURN,1039,return null;,,
FALSE,FALSE,FALSE,FALSE,,1040,},,
FALSE,FALSE,FALSE,FALSE,,1041,,,
FALSE,FALSE,FALSE,FALSE,,1042,,,
FALSE,FALSE,FALSE,FALSE,,1043,,,
FALSE,FALSE,FALSE,FALSE,,1044,@Deprecated,,
FALSE,FALSE,FALSE,FALSE,,1045,public static boolean blank(String value) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1046,return isBlank(value);,,
FALSE,FALSE,FALSE,FALSE,,1047,},,
FALSE,FALSE,FALSE,FALSE,,1048,,,
FALSE,FALSE,FALSE,FALSE,,1049,public static boolean isBlank(String value) {,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1050,int ii = 0;,,
TRUE,FALSE,FALSE,FALSE,FOR,1051,for (int ll = (value == null) ? 0 : value.length(); ii < ll; ++ii) {,,
TRUE,FALSE,FALSE,FALSE,IF,1052,if (!(Character.isWhitespace(value.charAt(ii)))) {,,
TRUE,FALSE,FALSE,FALSE,RETURN,1053,return false;,,
FALSE,FALSE,FALSE,FALSE,IF,1054,},,
FALSE,FALSE,FALSE,FALSE,FOR,1055,},,
TRUE,FALSE,FALSE,FALSE,RETURN,1056,return true;,,
FALSE,FALSE,FALSE,FALSE,,1057,},,
FALSE,FALSE,FALSE,FALSE,,1058,,,
FALSE,FALSE,FALSE,FALSE,,1059,public static String trim(String value) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1060,return ((value == null) ? null : value.trim());,,
FALSE,FALSE,FALSE,FALSE,,1061,},,
FALSE,FALSE,FALSE,FALSE,,1062,,,
FALSE,FALSE,FALSE,FALSE,,1063,public static String deNull(String value) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1064,"return ((value == null) ? """" : value);",,
FALSE,FALSE,FALSE,FALSE,,1065,},,
FALSE,FALSE,FALSE,FALSE,,1066,,,
FALSE,FALSE,FALSE,FALSE,,1067,"public static String truncate(String s, int maxLength) {",,
TRUE,FALSE,FALSE,FALSE,RETURN,1068,"return truncate(s, maxLength, """");",,
FALSE,FALSE,FALSE,FALSE,,1069,},,
FALSE,FALSE,FALSE,FALSE,,1070,,,
FALSE,FALSE,FALSE,FALSE,,1071,"public static String truncate(String s, int maxLength, String append) {",,
TRUE,FALSE,FALSE,FALSE,IF,1072,if ((s == null) || (s.length() <= maxLength)) {,,
TRUE,FALSE,FALSE,FALSE,RETURN,1073,return s;,,
FALSE,FALSE,FALSE,FALSE,IF,1074,},,
TRUE,FALSE,FALSE,FALSE,RETURN,1075,"return s.substring(0, maxLength - append.length()) + append;",,
FALSE,FALSE,FALSE,FALSE,,1076,},,
FALSE,FALSE,FALSE,FALSE,,1077,,,
FALSE,FALSE,FALSE,FALSE,,1078,public static String capitalize(String s) {,,
TRUE,FALSE,TRUE,TRUE,IF,1079,if (isBlank(s)) {,Defensive Programming,
FALSE,FALSE,FALSE,FALSE,RETURN,1080,return s;,,
FALSE,FALSE,FALSE,FALSE,IF,1081,},,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1082,char c = s.charAt(0);,,
TRUE,FALSE,TRUE,TRUE,IF,1083,if (Character.isUpperCase(c)) {,Trivial Output Check,
FALSE,FALSE,FALSE,FALSE,RETURN,1084,return s;,,
FALSE,FALSE,FALSE,FALSE,IF,1085,},,
TRUE,FALSE,FALSE,FALSE,RETURN,1086,return String.valueOf(Character.toUpperCase(c)) + s.substring(1);,,
FALSE,FALSE,FALSE,FALSE,,1087,},,
FALSE,FALSE,FALSE,FALSE,,1088,,,
FALSE,FALSE,FALSE,FALSE,,1089,public static String toUSLowerCase(String s) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1090,return ((isBlank(s)) ? s : s.toLowerCase(Locale.US));,,
FALSE,FALSE,FALSE,FALSE,,1091,},,
FALSE,FALSE,FALSE,FALSE,,1092,,,
FALSE,FALSE,FALSE,FALSE,,1093,public static String toUSUpperCase(String s) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1094,return ((isBlank(s)) ? s : s.toUpperCase(Locale.US));,,
FALSE,FALSE,FALSE,FALSE,,1095,},,
FALSE,FALSE,FALSE,FALSE,,1096,,,
FALSE,FALSE,FALSE,FALSE,,1097,"public static String sanitize(String source, CharacterValidator validator) {",,
FALSE,FALSE,FALSE,FALSE,IF,1098,if (source == null) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1099,return null;,,
FALSE,FALSE,FALSE,FALSE,IF,1100,},,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1101,int nn = source.length();,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1102,StringBuilder buf = new StringBuilder(nn);,,
FALSE,FALSE,FALSE,FALSE,FOR,1103,for (int ii = 0; ii < nn; ++ii) {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1104,char c = source.charAt(ii);,,
FALSE,FALSE,FALSE,FALSE,IF,1105,if (validator.isValid(c)) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1106,buf.append(c);,,
FALSE,FALSE,FALSE,FALSE,IF,1107,},,
FALSE,FALSE,FALSE,FALSE,FOR,1108,},,
FALSE,FALSE,FALSE,FALSE,RETURN,1109,return buf.toString();,,
FALSE,FALSE,FALSE,FALSE,,1110,},,
FALSE,FALSE,FALSE,FALSE,,1111,,,
FALSE,FALSE,FALSE,FALSE,,1112,"public static String replace(String source, String before, String after) {",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1113,int pos = source.indexOf(before);,,
FALSE,FALSE,FALSE,FALSE,IF,1114,if (pos == -1) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1115,return source;,,
FALSE,FALSE,FALSE,FALSE,IF,1116,},,
FALSE,FALSE,FALSE,FALSE,,1117,,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1118,StringBuilder sb = new StringBuilder(source.length() + 32);,,
FALSE,FALSE,FALSE,FALSE,,1119,,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1120,int blength = before.length();,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1121,int start = 0;,,
FALSE,FALSE,FALSE,FALSE,WHILE,1122,while (pos != -1) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1123,"sb.append(source.substring(start, pos));",,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1124,sb.append(after);,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1125,start = pos + blength;,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1126,"pos = source.indexOf(before, start);",,
FALSE,FALSE,FALSE,FALSE,WHILE,1127,},,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1128,sb.append(source.substring(start));,,
FALSE,FALSE,FALSE,FALSE,,1129,,,
FALSE,FALSE,FALSE,FALSE,RETURN,1130,return sb.toString();,,
FALSE,FALSE,FALSE,FALSE,,1131,},,
FALSE,FALSE,FALSE,FALSE,,1132,,,
FALSE,FALSE,FALSE,FALSE,,1133,"public static String pad(String value, int width) {",,
FALSE,FALSE,FALSE,FALSE,IF,1134,if (width <= 0) {,,
FALSE,FALSE,FALSE,FALSE,THROW,1135,"throw new IllegalArgumentException(""Pad width must be greater than zero."");",,
FALSE,FALSE,FALSE,FALSE,IF,1136,},,
FALSE,FALSE,FALSE,FALSE,IF,1137,if (value.length() >= width) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1138,return value;,,
FALSE,FALSE,FALSE,FALSE,IF,1139,},,
FALSE,FALSE,FALSE,FALSE,RETURN,1140,return value + spaces(width - value.length());,,
FALSE,FALSE,FALSE,FALSE,,1141,},,
FALSE,FALSE,FALSE,FALSE,,1142,,,
FALSE,FALSE,FALSE,FALSE,,1143,"public static String leftpad(String value, int width) {",,
FALSE,FALSE,FALSE,FALSE,RETURN,1144,"return prepad(value, width);",,
FALSE,FALSE,FALSE,FALSE,,1145,},,
FALSE,FALSE,FALSE,FALSE,,1146,,,
FALSE,FALSE,FALSE,FALSE,,1147,"public static String prepad(String value, int width) {",,
FALSE,FALSE,FALSE,FALSE,RETURN,1148,"return prepad(value, width, ' ');",,
FALSE,FALSE,FALSE,FALSE,,1149,},,
FALSE,FALSE,FALSE,FALSE,,1150,,,
FALSE,FALSE,FALSE,FALSE,,1151,"public static String prepad(String value, int width, char append) {",,
FALSE,FALSE,FALSE,FALSE,IF,1152,if (width <= 0) {,,
FALSE,FALSE,FALSE,FALSE,THROW,1153,"throw new IllegalArgumentException(""Pad width must be greater than zero."");",,
FALSE,FALSE,FALSE,FALSE,IF,1154,},,
FALSE,FALSE,FALSE,FALSE,IF,1155,if (value.length() >= width) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1156,return value;,,
FALSE,FALSE,FALSE,FALSE,IF,1157,},,
FALSE,FALSE,FALSE,FALSE,RETURN,1158,"return fill(append, width - value.length()) + value;",,
FALSE,FALSE,FALSE,FALSE,,1159,},,
FALSE,FALSE,FALSE,FALSE,,1160,,,
FALSE,FALSE,FALSE,FALSE,,1161,public static String spaces(int count) {,,
TRUE,FALSE,FALSE,FALSE,RETURN,1162,"return fill(' ', count);",,
FALSE,FALSE,FALSE,FALSE,,1163,},,
FALSE,FALSE,FALSE,FALSE,,1164,,,
FALSE,FALSE,FALSE,FALSE,,1165,"public static String fill(char c, int count) {",,
TRUE,TRUE,TRUE,TRUE,IF,1166,if (count < 0) {,Defensive Programming,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1167,count = 0;,,
FALSE,FALSE,FALSE,FALSE,IF,1168,},,
FALSE,FALSE,FALSE,FALSE,,1169,,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1170,char[] sameChars = new char[count];,,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,1171,"Arrays.fill(sameChars, c);",,
TRUE,FALSE,FALSE,FALSE,RETURN,1172,return new String(sameChars);,,
FALSE,FALSE,FALSE,FALSE,,1173,},,
FALSE,FALSE,FALSE,FALSE,,1174,,,
FALSE,FALSE,FALSE,FALSE,,1175,public static boolean isNumber(String value) {,,
FALSE,FALSE,FALSE,FALSE,TRY,1176,try {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1177,Double.parseDouble(value);,,
FALSE,FALSE,FALSE,FALSE,RETURN,1178,return true;,,
FALSE,FALSE,FALSE,FALSE,TRY,1179,} catch (NumberFormatException localNumberFormatException) {,,
FALSE,FALSE,FALSE,FALSE,TRY,1180,},,
FALSE,FALSE,FALSE,FALSE,RETURN,1181,return false;,,
FALSE,FALSE,FALSE,FALSE,,1182,},,
FALSE,FALSE,FALSE,FALSE,,1183,,,
FALSE,FALSE,FALSE,FALSE,,1184,public static boolean isInteger(String value) {,,
TRUE,TRUE,FALSE,FALSE,TRY,1185,try {,Input Check,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,1186,Integer.parseInt(value);,,
TRUE,FALSE,FALSE,TRUE,RETURN,1187,return true;,Output return,
FALSE,FALSE,FALSE,FALSE,TRY,1188,} catch (NumberFormatException localNumberFormatException) {,,
FALSE,FALSE,FALSE,FALSE,TRY,1189,},,
TRUE,FALSE,FALSE,TRUE,RETURN,1190,return false;,Output return,
FALSE,FALSE,FALSE,FALSE,,1191,},,
FALSE,FALSE,FALSE,FALSE,,1192,,,
FALSE,FALSE,FALSE,FALSE,,1193,public static String format(float value) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1194,return _ffmt.format(value);,,
FALSE,FALSE,FALSE,FALSE,,1195,},,
FALSE,FALSE,FALSE,FALSE,,1196,,,
FALSE,FALSE,FALSE,FALSE,,1197,public static String format(double value) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1198,return _ffmt.format(value);,,
FALSE,FALSE,FALSE,FALSE,,1199,},,
FALSE,FALSE,FALSE,FALSE,,1200,,,
FALSE,FALSE,FALSE,FALSE,,1201,"public static String coordsToString(int x, int y) {",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1202,StringBuilder buf = new StringBuilder();,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1203,"coordsToString(buf, x, y);",,
FALSE,FALSE,FALSE,FALSE,RETURN,1204,return buf.toString();,,
FALSE,FALSE,FALSE,FALSE,,1205,},,
FALSE,FALSE,FALSE,FALSE,,1206,,,
FALSE,FALSE,FALSE,FALSE,,1207,"public static void coordsToString(StringBuilder buf, int x, int y) {",,
FALSE,FALSE,FALSE,FALSE,IF,1208,if (x >= 0) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1209,"buf.append(""+"");",,
FALSE,FALSE,FALSE,FALSE,IF,1210,},,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1211,buf.append(x);,,
FALSE,FALSE,FALSE,FALSE,IF,1212,if (y >= 0) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1213,"buf.append(""+"");",,
FALSE,FALSE,FALSE,FALSE,IF,1214,},,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1215,buf.append(y);,,
FALSE,FALSE,FALSE,FALSE,,1216,},,
FALSE,FALSE,FALSE,FALSE,,1217,,,
FALSE,FALSE,FALSE,FALSE,,1218,public static String encode(String s) {,,
FALSE,FALSE,FALSE,FALSE,TRY,1219,try {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1220,"return ((s != null) ? URLEncoder.encode(s, ""UTF-8"") : null);",,
FALSE,FALSE,FALSE,FALSE,TRY,1221,} catch (UnsupportedEncodingException uee) {,,
FALSE,FALSE,FALSE,FALSE,THROW,1222,"throw new RuntimeException(""UTF-8 is unknown in this Java."");",,
FALSE,FALSE,FALSE,FALSE,TRY,1223,},,
FALSE,FALSE,FALSE,FALSE,,1224,},,
FALSE,FALSE,FALSE,FALSE,,1225,,,
FALSE,FALSE,FALSE,FALSE,,1226,public static String decode(String s) {,,
FALSE,FALSE,FALSE,FALSE,TRY,1227,try {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1228,"return ((s != null) ? URLDecoder.decode(s, ""UTF-8"") : null);",,
FALSE,FALSE,FALSE,FALSE,TRY,1229,} catch (UnsupportedEncodingException uee) {,,
FALSE,FALSE,FALSE,FALSE,THROW,1230,"throw new RuntimeException(""UTF-8 is unknown in this Java."");",,
FALSE,FALSE,FALSE,FALSE,TRY,1231,},,
FALSE,FALSE,FALSE,FALSE,,1232,},,
FALSE,FALSE,FALSE,FALSE,,1233,,,
FALSE,FALSE,FALSE,FALSE,,1234,"public static String hexlate(byte[] bytes, int count) {",,
TRUE,FALSE,TRUE,FALSE,IF,1235,if (bytes == null) {,Defensive Programming,
FALSE,FALSE,FALSE,FALSE,RETURN,1236,"return """";",,
FALSE,FALSE,FALSE,FALSE,IF,1237,},,
FALSE,FALSE,FALSE,FALSE,,1238,,,
TRUE,FALSE,TRUE,FALSE,EXPRESSION,1239,"count = Math.min(count, bytes.length);",State Initialization,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1240,char[] chars = new char[count * 2];,,
FALSE,FALSE,FALSE,FALSE,,1241,,,
TRUE,FALSE,FALSE,FALSE,FOR,1242,for (int i = 0; i < count; ++i) {,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1243,int val = bytes[i];,,
TRUE,TRUE,FALSE,FALSE,IF,1244,if (val < 0) {,Defensive Programming,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,1245,val += 256;,,
FALSE,FALSE,FALSE,FALSE,IF,1246,},,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,1247,chars[(2 * i)] = XLATE.charAt(val / 16);,,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,1248,chars[(2 * i + 1)] = XLATE.charAt(val % 16);,,
FALSE,FALSE,FALSE,FALSE,FOR,1249,},,
FALSE,FALSE,FALSE,FALSE,,1250,,,
TRUE,FALSE,FALSE,FALSE,RETURN,1251,return new String(chars);,,
FALSE,FALSE,FALSE,FALSE,,1252,},,
FALSE,FALSE,FALSE,FALSE,,1253,,,
FALSE,FALSE,FALSE,FALSE,,1254,public static String hexlate(byte[] bytes) {,,
TRUE,FALSE,FALSE,FALSE,RETURN,1255,"return ((bytes == null) ? """" : hexlate(bytes, bytes.length));",,
FALSE,FALSE,FALSE,FALSE,,1256,},,
FALSE,FALSE,FALSE,FALSE,,1257,,,
FALSE,FALSE,FALSE,FALSE,,1258,public static byte[] unhexlate(String hex) {,,
FALSE,FALSE,FALSE,FALSE,IF,1259,if ((hex == null) || (hex.length() % 2 != 0)) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1260,return null;,,
FALSE,FALSE,FALSE,FALSE,IF,1261,},,
FALSE,FALSE,FALSE,FALSE,,1262,,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1263,hex = hex.toLowerCase();,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1264,byte[] data = new byte[hex.length() / 2];,,
FALSE,FALSE,FALSE,FALSE,FOR,1265,for (int ii = 0; ii < hex.length(); ii += 2) {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1266,int value = (byte) (XLATE.indexOf(hex.charAt(ii)) << 4);,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1267,value += XLATE.indexOf(hex.charAt(ii + 1));,,
FALSE,FALSE,FALSE,FALSE,FOR,1268,,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1269,data[(ii / 2)] = (byte) value;,,
FALSE,FALSE,FALSE,FALSE,FOR,1270,},,
FALSE,FALSE,FALSE,FALSE,,1271,,,
FALSE,FALSE,FALSE,FALSE,RETURN,1272,return data;,,
FALSE,FALSE,FALSE,FALSE,,1273,},,
FALSE,FALSE,FALSE,FALSE,,1274,,,
FALSE,FALSE,FALSE,FALSE,,1275,public static String md5hex(String source) {,,
TRUE,FALSE,FALSE,FALSE,RETURN,1276,"return digest(""MD5"", source);",,
FALSE,FALSE,FALSE,FALSE,,1277,},,
FALSE,FALSE,FALSE,FALSE,,1278,,,
FALSE,FALSE,FALSE,FALSE,,1279,public static String sha1hex(String source) {,,
TRUE,FALSE,FALSE,FALSE,RETURN,1280,"return digest(""SHA-1"", source);",,
FALSE,FALSE,FALSE,FALSE,,1281,},,
FALSE,FALSE,FALSE,FALSE,,1282,,,
FALSE,FALSE,FALSE,FALSE,,1283,public static byte[] parseByteArray(String source) {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1284,"StringTokenizer tok = new StringTokenizer(source, "","");",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1285,byte[] vals = new byte[tok.countTokens()];,,
FALSE,FALSE,FALSE,FALSE,FOR,1286,for (int i = 0; tok.hasMoreTokens(); ++i) {,,
FALSE,FALSE,FALSE,FALSE,TRY,1287,try {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1288,vals[i] = Byte.parseByte(tok.nextToken().trim());,,
FALSE,FALSE,FALSE,FALSE,TRY,1289,} catch (NumberFormatException nfe) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1290,return null;,,
FALSE,FALSE,FALSE,FALSE,TRY,1291,},,
FALSE,FALSE,FALSE,FALSE,FOR,1292,},,
FALSE,FALSE,FALSE,FALSE,RETURN,1293,return vals;,,
FALSE,FALSE,FALSE,FALSE,,1294,},,
FALSE,FALSE,FALSE,FALSE,,1295,,,
FALSE,FALSE,FALSE,FALSE,,1296,public static short[] parseShortArray(String source) {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1297,"StringTokenizer tok = new StringTokenizer(source, "","");",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1298,short[] vals = new short[tok.countTokens()];,,
FALSE,FALSE,FALSE,FALSE,FOR,1299,for (int i = 0; tok.hasMoreTokens(); ++i) {,,
FALSE,FALSE,FALSE,FALSE,TRY,1300,try {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1301,vals[i] = Short.parseShort(tok.nextToken().trim());,,
FALSE,FALSE,FALSE,FALSE,TRY,1302,} catch (NumberFormatException nfe) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1303,return null;,,
FALSE,FALSE,FALSE,FALSE,TRY,1304,},,
FALSE,FALSE,FALSE,FALSE,FOR,1305,},,
FALSE,FALSE,FALSE,FALSE,RETURN,1306,return vals;,,
FALSE,FALSE,FALSE,FALSE,,1307,},,
FALSE,FALSE,FALSE,FALSE,,1308,,,
FALSE,FALSE,FALSE,FALSE,,1309,public static int[] parseIntArray(String source) {,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1310,"StringTokenizer tok = new StringTokenizer(source, "","");",,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1311,int[] vals = new int[tok.countTokens()];,,
TRUE,TRUE,FALSE,FALSE,FOR,1312,for (int i = 0; tok.hasMoreTokens(); ++i) {,Iteration,
TRUE,TRUE,FALSE,FALSE,TRY,1313,try {,Defensive Programming,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,1314,vals[i] = Integer.parseInt(tok.nextToken().trim());,,
FALSE,FALSE,FALSE,FALSE,TRY,1315,} catch (NumberFormatException nfe) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1316,return null;,,
FALSE,FALSE,FALSE,FALSE,TRY,1317,},,
FALSE,FALSE,FALSE,FALSE,FOR,1318,},,
TRUE,FALSE,FALSE,FALSE,RETURN,1319,return vals;,,
FALSE,FALSE,FALSE,FALSE,,1320,},,
FALSE,FALSE,FALSE,FALSE,,1321,,,
FALSE,FALSE,FALSE,FALSE,,1322,public static long[] parseLongArray(String source) {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1323,"StringTokenizer tok = new StringTokenizer(source, "","");",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1324,long[] vals = new long[tok.countTokens()];,,
FALSE,FALSE,FALSE,FALSE,FOR,1325,for (int i = 0; tok.hasMoreTokens(); ++i) {,,
FALSE,FALSE,FALSE,FALSE,TRY,1326,try {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1327,vals[i] = Long.parseLong(tok.nextToken().trim());,,
FALSE,FALSE,FALSE,FALSE,TRY,1328,} catch (NumberFormatException nfe) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1329,return null;,,
FALSE,FALSE,FALSE,FALSE,TRY,1330,},,
FALSE,FALSE,FALSE,FALSE,FOR,1331,},,
FALSE,FALSE,FALSE,FALSE,RETURN,1332,return vals;,,
FALSE,FALSE,FALSE,FALSE,,1333,},,
FALSE,FALSE,FALSE,FALSE,,1334,,,
FALSE,FALSE,FALSE,FALSE,,1335,public static float[] parseFloatArray(String source) {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1336,"StringTokenizer tok = new StringTokenizer(source, "","");",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1337,float[] vals = new float[tok.countTokens()];,,
FALSE,FALSE,FALSE,FALSE,FOR,1338,for (int i = 0; tok.hasMoreTokens(); ++i) {,,
FALSE,FALSE,FALSE,FALSE,TRY,1339,try {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1340,vals[i] = Float.parseFloat(tok.nextToken().trim());,,
FALSE,FALSE,FALSE,FALSE,TRY,1341,} catch (NumberFormatException nfe) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1342,return null;,,
FALSE,FALSE,FALSE,FALSE,TRY,1343,},,
FALSE,FALSE,FALSE,FALSE,FOR,1344,},,
FALSE,FALSE,FALSE,FALSE,RETURN,1345,return vals;,,
FALSE,FALSE,FALSE,FALSE,,1346,},,
FALSE,FALSE,FALSE,FALSE,,1347,,,
FALSE,FALSE,FALSE,FALSE,,1348,public static double[] parseDoubleArray(String source) {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1349,"StringTokenizer tok = new StringTokenizer(source, "","");",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1350,double[] vals = new double[tok.countTokens()];,,
FALSE,FALSE,FALSE,FALSE,FOR,1351,for (int i = 0; tok.hasMoreTokens(); ++i) {,,
FALSE,FALSE,FALSE,FALSE,TRY,1352,try {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1353,vals[i] = Double.parseDouble(tok.nextToken().trim());,,
FALSE,FALSE,FALSE,FALSE,TRY,1354,} catch (NumberFormatException nfe) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1355,return null;,,
FALSE,FALSE,FALSE,FALSE,TRY,1356,},,
FALSE,FALSE,FALSE,FALSE,FOR,1357,},,
FALSE,FALSE,FALSE,FALSE,RETURN,1358,return vals;,,
FALSE,FALSE,FALSE,FALSE,,1359,},,
FALSE,FALSE,FALSE,FALSE,,1360,,,
FALSE,FALSE,FALSE,FALSE,,1361,public static String[] parseStringArray(String source) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1362,"return parseStringArray(source, false);",,
FALSE,FALSE,FALSE,FALSE,,1363,},,
FALSE,FALSE,FALSE,FALSE,,1364,,,
FALSE,FALSE,FALSE,FALSE,,1365,"public static String[] parseStringArray(String source, boolean intern) {",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1366,int tcount = 0;,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1367,int tpos = -1;,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1368,int tstart = 0;,,
FALSE,FALSE,FALSE,FALSE,,1369,,,
FALSE,FALSE,FALSE,FALSE,IF,1370,if (source.length() == 0) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1371,return new String[0];,,
FALSE,FALSE,FALSE,FALSE,IF,1372,},,
FALSE,FALSE,FALSE,FALSE,,1373,,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1374,"source = replace(source, "",,"", ""%COMMA%"");",,
FALSE,FALSE,FALSE,FALSE,,1375,,,
FALSE,FALSE,FALSE,FALSE,WHILE,1376,"while ((tpos = source.indexOf("","", tpos + 1)) != -1) {",,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1377,#ERROR!,,
FALSE,FALSE,FALSE,FALSE,WHILE,1378,},,
FALSE,FALSE,FALSE,FALSE,,1379,,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1380,String[] tokens = new String[tcount + 1];,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1381,tpos = -1;,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1382,tcount = 0;,,
FALSE,FALSE,FALSE,FALSE,,1383,,,
FALSE,FALSE,FALSE,FALSE,WHILE,1384,"while ((tpos = source.indexOf("","", tpos + 1)) != -1) {",,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1385,"tokens[tcount] = source.substring(tstart, tpos);",,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1386,"tokens[tcount] = replace(tokens[tcount].trim(), ""%COMMA%"", "","");",,
FALSE,FALSE,FALSE,FALSE,IF,1387,if (intern) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1388,tokens[tcount] = tokens[tcount].intern();,,
FALSE,FALSE,FALSE,FALSE,IF,1389,},,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1390,tstart = tpos + 1;,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1391,#ERROR!,,
FALSE,FALSE,FALSE,FALSE,WHILE,1392,},,
FALSE,FALSE,FALSE,FALSE,,1393,,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1394,tokens[tcount] = source.substring(tstart);,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1395,"tokens[tcount] = replace(tokens[tcount].trim(), ""%COMMA%"", "","");",,
FALSE,FALSE,FALSE,FALSE,,1396,,,
FALSE,FALSE,FALSE,FALSE,RETURN,1397,return tokens;,,
FALSE,FALSE,FALSE,FALSE,,1398,},,
FALSE,FALSE,FALSE,FALSE,,1399,,,
FALSE,FALSE,FALSE,FALSE,,1400,public static String join(Object[] values) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1401,"return join(values, false);",,
FALSE,FALSE,FALSE,FALSE,,1402,},,
FALSE,FALSE,FALSE,FALSE,,1403,,,
FALSE,FALSE,FALSE,FALSE,,1404,"public static String join(Object[] values, boolean escape) {",,
FALSE,FALSE,FALSE,FALSE,RETURN,1405,"return join(values, "", "", escape);",,
FALSE,FALSE,FALSE,FALSE,,1406,},,
FALSE,FALSE,FALSE,FALSE,,1407,,,
FALSE,FALSE,FALSE,FALSE,,1408,"public static String join(Object[] values, String separator) {",,
FALSE,FALSE,FALSE,FALSE,RETURN,1409,"return join(values, separator, false);",,
FALSE,FALSE,FALSE,FALSE,,1410,},,
FALSE,FALSE,FALSE,FALSE,,1411,,,
FALSE,FALSE,FALSE,FALSE,,1412,public static String joinEscaped(String[] values) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1413,"return join(values, true);",,
FALSE,FALSE,FALSE,FALSE,,1414,},,
FALSE,FALSE,FALSE,FALSE,,1415,,,
FALSE,FALSE,FALSE,FALSE,,1416,"public static String[] split(String source, String sep) {",,
FALSE,FALSE,FALSE,FALSE,IF,1417,if (isBlank(source)) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1418,return new String[0];,,
FALSE,FALSE,FALSE,FALSE,IF,1419,},,
FALSE,FALSE,FALSE,FALSE,,1420,,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1421,int tcount = 0;,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1422,int tpos = -1;,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1423,int tstart = 0;,,
FALSE,FALSE,FALSE,FALSE,,1424,,,
FALSE,FALSE,FALSE,FALSE,WHILE,1425,"while ((tpos = source.indexOf(sep, tpos + 1)) != -1) {",,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1426,#ERROR!,,
FALSE,FALSE,FALSE,FALSE,WHILE,1427,},,
FALSE,FALSE,FALSE,FALSE,,1428,,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1429,String[] tokens = new String[tcount + 1];,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1430,tpos = -1;,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1431,tcount = 0;,,
FALSE,FALSE,FALSE,FALSE,,1432,,,
FALSE,FALSE,FALSE,FALSE,WHILE,1433,"while ((tpos = source.indexOf(sep, tpos + 1)) != -1) {",,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1434,"tokens[tcount] = source.substring(tstart, tpos);",,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1435,tstart = tpos + 1;,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1436,#ERROR!,,
FALSE,FALSE,FALSE,FALSE,WHILE,1437,},,
FALSE,FALSE,FALSE,FALSE,,1438,,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1439,tokens[tcount] = source.substring(tstart);,,
FALSE,FALSE,FALSE,FALSE,,1440,,,
FALSE,FALSE,FALSE,FALSE,RETURN,1441,return tokens;,,
FALSE,FALSE,FALSE,FALSE,,1442,},,
FALSE,FALSE,FALSE,FALSE,,1443,,,
FALSE,FALSE,FALSE,FALSE,,1444,"public static String toMatrixString(int[] values, int colCount, int fieldWidth) {",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1445,StringBuilder buf = new StringBuilder();,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1446,StringBuilder valbuf = new StringBuilder();,,
FALSE,FALSE,FALSE,FALSE,,1447,,,
FALSE,FALSE,FALSE,FALSE,FOR,1448,for (int i = 0; i < values.length; ++i) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1449,valbuf.setLength(0);,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1450,valbuf.append(values[i]);,,
FALSE,FALSE,FALSE,FALSE,FOR,1451,,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1452,int spaces = fieldWidth - valbuf.length();,,
FALSE,FALSE,FALSE,FALSE,FOR,1453,for (int s = 0; s < spaces; ++s) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1454,"buf.append("" "");",,
FALSE,FALSE,FALSE,FALSE,FOR,1455,},,
FALSE,FALSE,FALSE,FALSE,FOR,1456,,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1457,buf.append(valbuf);,,
FALSE,FALSE,FALSE,FALSE,FOR,1458,,,
FALSE,FALSE,FALSE,FALSE,IF,1459,if ((i % colCount != colCount - 1) || (i == values.length - 1)) {,,
FALSE,FALSE,FALSE,FALSE,CONTINUE,1460,continue;,,
FALSE,FALSE,FALSE,FALSE,IF,1461,},,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1462,buf.append(lineSeparator);,,
FALSE,FALSE,FALSE,FALSE,FOR,1463,},,
FALSE,FALSE,FALSE,FALSE,,1464,,,
FALSE,FALSE,FALSE,FALSE,RETURN,1465,return buf.toString();,,
FALSE,FALSE,FALSE,FALSE,,1466,},,
FALSE,FALSE,FALSE,FALSE,,1467,,,
FALSE,FALSE,FALSE,FALSE,,1468,public static String intervalToString(long millis) {,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1469,StringBuilder buf = new StringBuilder();,,
TRUE,TRUE,FALSE,FALSE,VARIABLE_DECLARATION,1470,boolean started = false;,State Initialization,
FALSE,FALSE,FALSE,FALSE,,1471,,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1472,long days = millis / 86400000L;,,
TRUE,FALSE,FALSE,FALSE,IF,1473,if (days != 0L) {,,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,1474,"buf.append(days).append(""d "");",,
TRUE,TRUE,FALSE,FALSE,EXPRESSION,1475,started = true;,State Update,
FALSE,FALSE,FALSE,FALSE,IF,1476,},,
FALSE,FALSE,FALSE,FALSE,,1477,,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1478,long hours = millis / 3600000L % 24L;,,
TRUE,FALSE,FALSE,FALSE,IF,1479,if ((started) || (hours != 0L)) {,,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,1480,"buf.append(hours).append(""h "");",,
TRUE,TRUE,FALSE,FALSE,EXPRESSION,1481,started = true;,State Update,
FALSE,FALSE,FALSE,FALSE,IF,1482,},,
FALSE,FALSE,FALSE,FALSE,,1483,,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1484,long minutes = millis / 60000L % 60L;,,
TRUE,FALSE,FALSE,FALSE,IF,1485,if ((started) || (minutes != 0L)) {,,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,1486,"buf.append(minutes).append(""m "");",,
TRUE,TRUE,FALSE,FALSE,EXPRESSION,1487,started = true;,State Update,
FALSE,FALSE,FALSE,FALSE,IF,1488,},,
FALSE,FALSE,FALSE,FALSE,,1489,,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1490,long seconds = millis / 1000L % 60L;,,
TRUE,FALSE,FALSE,FALSE,IF,1491,if ((started) || (seconds != 0L)) {,,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,1492,"buf.append(seconds).append(""s "");",,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,1493,started = true;,,
FALSE,FALSE,FALSE,FALSE,IF,1494,},,
FALSE,FALSE,FALSE,FALSE,,1495,,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1496,long restMillis = millis % 1000L;,,
TRUE,TRUE,FALSE,FALSE,IF,1497,if ((started) || restMillis > 0) {,State Check,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,1498,"buf.append(restMillis).append(""ms"");",,
FALSE,FALSE,FALSE,FALSE,IF,1499,},,
FALSE,FALSE,FALSE,FALSE,,1500,,,
TRUE,FALSE,FALSE,FALSE,RETURN,1501,return buf.toString().trim();,,
FALSE,FALSE,FALSE,FALSE,,1502,},,
FALSE,FALSE,FALSE,FALSE,,1503,,,
FALSE,FALSE,FALSE,FALSE,,1504,public static String shortClassName(Object object) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1505,"return ((object == null) ? ""null"" : shortClassName(object.getClass()));",,
FALSE,FALSE,FALSE,FALSE,,1506,},,
FALSE,FALSE,FALSE,FALSE,,1507,,,
FALSE,FALSE,FALSE,FALSE,,1508,public static String shortClassName(Class<?> clazz) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1509,return shortClassName(clazz.getName());,,
FALSE,FALSE,FALSE,FALSE,,1510,},,
FALSE,FALSE,FALSE,FALSE,,1511,,,
FALSE,FALSE,FALSE,FALSE,,1512,public static String shortClassName(String name) {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1513,"int didx = name.lastIndexOf(""."");",,
FALSE,FALSE,FALSE,FALSE,IF,1514,if (didx == -1) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1515,return name;,,
FALSE,FALSE,FALSE,FALSE,IF,1516,},,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1517,"didx = name.lastIndexOf(""."", didx - 1);",,
FALSE,FALSE,FALSE,FALSE,IF,1518,if (didx == -1) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1519,return name;,,
FALSE,FALSE,FALSE,FALSE,IF,1520,},,
FALSE,FALSE,FALSE,FALSE,RETURN,1521,return name.substring(didx + 1);,,
FALSE,FALSE,FALSE,FALSE,,1522,},,
FALSE,FALSE,FALSE,FALSE,,1523,,,
FALSE,FALSE,FALSE,FALSE,,1524,public static String unStudlyName(String name) {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1525,boolean seenLower = false;,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1526,StringBuilder nname = new StringBuilder();,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1527,int nlen = name.length();,,
FALSE,FALSE,FALSE,FALSE,FOR,1528,for (int i = 0; i < nlen; ++i) {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1529,char c = name.charAt(i);,,
FALSE,FALSE,FALSE,FALSE,FOR,1530,,,
FALSE,FALSE,FALSE,FALSE,IF,1531,if (Character.isUpperCase(c)) {,,
FALSE,FALSE,FALSE,FALSE,IF,1532,if (seenLower) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1533,"nname.append(""_"");",,
FALSE,FALSE,FALSE,FALSE,IF,1534,},,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1535,seenLower = false;,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1536,nname.append(c);,,
FALSE,FALSE,FALSE,FALSE,IF,1537,} else {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1538,seenLower = true;,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1539,nname.append(Character.toUpperCase(c));,,
FALSE,FALSE,FALSE,FALSE,IF,1540,},,
FALSE,FALSE,FALSE,FALSE,FOR,1541,},,
FALSE,FALSE,FALSE,FALSE,RETURN,1542,return nname.toString();,,
FALSE,FALSE,FALSE,FALSE,,1543,},,
FALSE,FALSE,FALSE,FALSE,,1544,,,
FALSE,FALSE,FALSE,FALSE,,1545,"public static String wordWrap(String str, int width) {",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1546,int size = str.length();,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1547,StringBuilder buf = new StringBuilder(size + size / width);,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1548,int lastidx = 0;,,
FALSE,FALSE,FALSE,FALSE,WHILE,1549,while (lastidx < size) {,,
FALSE,FALSE,FALSE,FALSE,IF,1550,if (lastidx + width >= size) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1551,buf.append(str.substring(lastidx));,,
FALSE,FALSE,FALSE,FALSE,BREAK,1552,break;,,
FALSE,FALSE,FALSE,FALSE,IF,1553,},,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1554,int lastws = lastidx;,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1555,int ii = lastidx;,,
FALSE,FALSE,FALSE,FALSE,FOR,1556,for (int ll = lastidx + width; ii < ll; ++ii) {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1557,char c = str.charAt(ii);,,
FALSE,FALSE,FALSE,FALSE,IF,1558,if (c == '\n') {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1559,"buf.append(str.substring(lastidx, ii + 1));",,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1560,lastidx = ii + 1;,,
FALSE,FALSE,FALSE,FALSE,BREAK,1561,break;,,
FALSE,FALSE,FALSE,FALSE,IF,1562,},,
FALSE,FALSE,FALSE,FALSE,IF,1563,if (Character.isWhitespace(c)) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1564,lastws = ii;,,
FALSE,FALSE,FALSE,FALSE,IF,1565,},,
FALSE,FALSE,FALSE,FALSE,FOR,1566,},,
FALSE,FALSE,FALSE,FALSE,IF,1567,if (lastws == lastidx) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1568,"buf.append(str.substring(lastidx, lastidx + width)).append(lineSeparator);",,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1569,lastidx += width;,,
FALSE,FALSE,FALSE,FALSE,IF,1570,} else if (lastws > lastidx) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1571,"buf.append(str.substring(lastidx, lastws)).append(lineSeparator);",,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1572,lastidx = lastws + 1;,,
FALSE,FALSE,FALSE,FALSE,IF,1573,},,
FALSE,FALSE,FALSE,FALSE,WHILE,1574,},,
FALSE,FALSE,FALSE,FALSE,RETURN,1575,return buf.toString();,,
FALSE,FALSE,FALSE,FALSE,,1576,},,
FALSE,FALSE,FALSE,FALSE,,1577,,,
FALSE,FALSE,FALSE,FALSE,,1578,"protected static String join(Object[] values, String separator, boolean escape) {",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1579,StringBuilder buf = new StringBuilder();,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1580,int vlength = values.length;,,
FALSE,FALSE,FALSE,FALSE,FOR,1581,for (int i = 0; i < vlength; ++i) {,,
FALSE,FALSE,FALSE,FALSE,IF,1582,if (i > 0) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1583,buf.append(separator);,,
FALSE,FALSE,FALSE,FALSE,IF,1584,},,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1585,"String value = (values[i] == null) ? """" : values[i].toString();",,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1586,"buf.append((escape) ? replace(value, "","", "",,"") : value);",,
FALSE,FALSE,FALSE,FALSE,FOR,1587,},,
FALSE,FALSE,FALSE,FALSE,RETURN,1588,return buf.toString();,,
FALSE,FALSE,FALSE,FALSE,,1589,},,
FALSE,FALSE,FALSE,FALSE,,1590,,,
FALSE,FALSE,FALSE,FALSE,,1591,"protected static String digest(String codec, String source) {",,
TRUE,TRUE,FALSE,FALSE,TRY,1592,try {,Defensive Programming,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1593,MessageDigest digest = MessageDigest.getInstance(codec);,,
TRUE,FALSE,FALSE,FALSE,RETURN,1594,return hexlate(digest.digest(source.getBytes()));,,
FALSE,FALSE,FALSE,FALSE,TRY,1595,} catch (NoSuchAlgorithmException nsae) {,,
FALSE,FALSE,FALSE,FALSE,THROW,1596,"throw new RuntimeException(codec + "" codec not available"");",,
FALSE,FALSE,FALSE,FALSE,TRY,1597,},,
FALSE,FALSE,FALSE,FALSE,,1598,},,
FALSE,FALSE,FALSE,FALSE,,1599,,,
FALSE,FALSE,FALSE,FALSE,,1600,public static abstract interface CharacterValidator {,,
FALSE,FALSE,FALSE,FALSE,,1601,,,
FALSE,FALSE,FALSE,FALSE,,1602,public abstract boolean isValid(char paramChar);,,
FALSE,FALSE,FALSE,FALSE,,1603,},,
FALSE,FALSE,FALSE,FALSE,,1604,,,
FALSE,FALSE,FALSE,FALSE,,1605,public static class Formatter {,,
FALSE,FALSE,FALSE,FALSE,,1606,,,
FALSE,FALSE,FALSE,FALSE,,1607,public String toString(Object object) {,,
FALSE,FALSE,FALSE,FALSE,,1608,"return ((object == null) ? ""null"" : object.toString());",,
FALSE,FALSE,FALSE,FALSE,,1609,},,
FALSE,FALSE,FALSE,FALSE,,1610,,,
FALSE,FALSE,FALSE,FALSE,,1611,public String getOpenBox() {,,
FALSE,FALSE,FALSE,FALSE,,1612,"return ""("";",,
FALSE,FALSE,FALSE,FALSE,,1613,},,
FALSE,FALSE,FALSE,FALSE,,1614,,,
FALSE,FALSE,FALSE,FALSE,,1615,public String getCloseBox() {,,
FALSE,FALSE,FALSE,FALSE,,1616,"return "")"";",,
FALSE,FALSE,FALSE,FALSE,,1617,},,
FALSE,FALSE,FALSE,FALSE,,1618,},,
FALSE,FALSE,FALSE,FALSE,,1619,,,
FALSE,FALSE,FALSE,FALSE,,1620,public static class Sort implements Comparator<String> {,,
FALSE,FALSE,FALSE,FALSE,,1621,,,
FALSE,FALSE,FALSE,FALSE,,1622,"public int compare(String arg0, String arg1) {",,
FALSE,FALSE,FALSE,FALSE,,1623,if (arg0.equals(arg1)) {,,
FALSE,FALSE,FALSE,FALSE,,1624,return 1;,,
FALSE,FALSE,FALSE,FALSE,,1625,},,
FALSE,FALSE,FALSE,FALSE,,1626,return arg0.compareTo(arg1);,,
FALSE,FALSE,FALSE,FALSE,,1627,},,
FALSE,FALSE,FALSE,FALSE,,1628,},,
FALSE,FALSE,FALSE,FALSE,,1629,,,
FALSE,FALSE,FALSE,FALSE,,1630,static class Unique implements Comparator<String> {,,
FALSE,FALSE,FALSE,FALSE,,1631,,,
FALSE,FALSE,FALSE,FALSE,,1632,"public int compare(String arg0, String arg1) {",,
FALSE,FALSE,FALSE,FALSE,,1633,if (arg0.equals(arg1)) {,,
FALSE,FALSE,FALSE,FALSE,,1634,return 0;,,
FALSE,FALSE,FALSE,FALSE,,1635,},,
FALSE,FALSE,FALSE,FALSE,,1636,return 1;,,
FALSE,FALSE,FALSE,FALSE,,1637,},,
FALSE,FALSE,FALSE,FALSE,,1638,},,
FALSE,FALSE,FALSE,FALSE,,1639,,,
FALSE,FALSE,FALSE,FALSE,,1640,public static class UniqueSort implements Comparator<String> {,,
FALSE,FALSE,FALSE,FALSE,,1641,,,
FALSE,FALSE,FALSE,FALSE,,1642,"public int compare(String arg0, String arg1) {",,
FALSE,FALSE,FALSE,FALSE,,1643,return arg0.compareTo(arg1);,,
FALSE,FALSE,FALSE,FALSE,,1644,},,
FALSE,FALSE,FALSE,FALSE,,1645,},,
FALSE,FALSE,FALSE,FALSE,,1646,,,
FALSE,FALSE,FALSE,FALSE,,1647,public static String cleanCodeText(String text) {,,
FALSE,FALSE,FALSE,FALSE,,1648,,,
FALSE,FALSE,FALSE,FALSE,RETURN,1649,return trimClean(text);,,
FALSE,FALSE,FALSE,FALSE,,1650,,,
FALSE,FALSE,FALSE,FALSE,,1651,},,
FALSE,FALSE,FALSE,FALSE,,1652,,,
FALSE,FALSE,FALSE,FALSE,,1653,"public static void doubleOutput(String text, FileWriter fw) {",,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1654,"doubleOutput(text, fw, System.out);",,
FALSE,FALSE,FALSE,FALSE,,1655,},,
FALSE,FALSE,FALSE,FALSE,,1656,,,
FALSE,FALSE,FALSE,FALSE,,1657,"public static void doubleOutput(String text, FileWriter fw, PrintStream out) {",,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1658,out.println(text);,,
FALSE,FALSE,FALSE,FALSE,,1659,// out.flush();,,
FALSE,FALSE,FALSE,FALSE,,1660,// out.flush();,,
FALSE,FALSE,FALSE,FALSE,,1661,,,
FALSE,FALSE,FALSE,FALSE,TRY,1662,try {,,
FALSE,FALSE,FALSE,FALSE,IF,1663,if (fw != null) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1664,fw.write(text + CARRIAGE_RETURN);,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1665,fw.flush();,,
FALSE,FALSE,FALSE,FALSE,IF,1666,},,
FALSE,FALSE,FALSE,FALSE,TRY,1667,} catch (IOException e) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1668,e.printStackTrace();,,
FALSE,FALSE,FALSE,FALSE,TRY,1669,},,
FALSE,FALSE,FALSE,FALSE,,1670,},,
FALSE,FALSE,FALSE,FALSE,,1671,,,
FALSE,FALSE,FALSE,FALSE,,1672,public static File chooseFile() {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1673,"return chooseFile(new File("".""));",,
FALSE,FALSE,FALSE,FALSE,,1674,},,
FALSE,FALSE,FALSE,FALSE,,1675,,,
FALSE,FALSE,FALSE,FALSE,,1676,public static File chooseFile(String title) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1677,"return chooseFile(new File(""c:\\tmp""), title);",,
FALSE,FALSE,FALSE,FALSE,,1678,},,
FALSE,FALSE,FALSE,FALSE,,1679,,,
FALSE,FALSE,FALSE,FALSE,,1680,public static File chooseFile(File dir) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1681,"return chooseFile(dir, ""Selecione um arquivo para salvar"");",,
FALSE,FALSE,FALSE,FALSE,,1682,},,
FALSE,FALSE,FALSE,FALSE,,1683,,,
FALSE,FALSE,FALSE,FALSE,,1684,"public static File chooseFile(File dir, String title) {",,
FALSE,FALSE,FALSE,FALSE,RETURN,1685,"return chooseFile(dir, ""Selecione um arquivo para salvar"", JFileChooser.FILES_ONLY);",,
FALSE,FALSE,FALSE,FALSE,,1686,},,
FALSE,FALSE,FALSE,FALSE,,1687,,,
FALSE,FALSE,FALSE,FALSE,,1688,"public static File chooseFile(File dir, String title, int selectionMode) {",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1689,JFileChooser chooser = new JFileChooser();,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1690,chooser.setCurrentDirectory(dir);,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1691,chooser.setDialogTitle(title);,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1692,chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1693,chooser.setDialogType(JFileChooser.SAVE_DIALOG);,,
FALSE,FALSE,FALSE,FALSE,,1694,,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1695,chooser.showSaveDialog(null);,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1696,File saveTo = chooser.getSelectedFile();,,
FALSE,FALSE,FALSE,FALSE,,1697,,,
FALSE,FALSE,FALSE,FALSE,RETURN,1698,return saveTo;,,
FALSE,FALSE,FALSE,FALSE,,1699,},,
FALSE,FALSE,FALSE,FALSE,,1700,,,
FALSE,FALSE,FALSE,FALSE,,1701,"public static String fileHash(File f) throws IOException, NoSuchAlgorithmException {",,
FALSE,FALSE,FALSE,FALSE,,1702,,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1703,"MessageDigest md = MessageDigest.getInstance(""MD5"");",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1704,"String digest = getDigest(new FileInputStream(f), md, 2048);",,
FALSE,FALSE,FALSE,FALSE,,1705,,,
FALSE,FALSE,FALSE,FALSE,RETURN,1706,return digest;,,
FALSE,FALSE,FALSE,FALSE,,1707,,,
FALSE,FALSE,FALSE,FALSE,,1708,},,
FALSE,FALSE,FALSE,FALSE,,1709,,,
FALSE,FALSE,FALSE,FALSE,,1710,"public static String getDigest(InputStream is, MessageDigest md, int byteArraySize)",,
FALSE,FALSE,FALSE,FALSE,,1711,"throws NoSuchAlgorithmException, IOException {",,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1712,md.reset();,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1713,byte[] bytes = new byte[byteArraySize];,,
FALSE,FALSE,FALSE,FALSE,,1714,int numBytes;,,
FALSE,FALSE,FALSE,FALSE,WHILE,1715,while ((numBytes = is.read(bytes)) != -1) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1716,"md.update(bytes, 0, numBytes);",,
FALSE,FALSE,FALSE,FALSE,WHILE,1717,},,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1718,byte[] digest = md.digest();,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1719,String result = new String(Hex.encodeHex(digest));,,
FALSE,FALSE,FALSE,FALSE,,1720,,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1721,is.close();,,
FALSE,FALSE,FALSE,FALSE,RETURN,1722,return result;,,
FALSE,FALSE,FALSE,FALSE,,1723,},,
FALSE,FALSE,FALSE,FALSE,,1724,,,
FALSE,FALSE,FALSE,FALSE,,1725,public static String listToString(List<String> list) {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1726,"String ret = """";",,
FALSE,FALSE,FALSE,FALSE,,1727,,,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,1728,for (String str : list) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1729,ret = ret + str + CARRIAGE_RETURN;,,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,1730,},,
FALSE,FALSE,FALSE,FALSE,,1731,,,
FALSE,FALSE,FALSE,FALSE,RETURN,1732,return ret;,,
FALSE,FALSE,FALSE,FALSE,,1733,},,
FALSE,FALSE,FALSE,FALSE,,1734,,,
FALSE,FALSE,FALSE,FALSE,,1735,"public static void writeSpecificLine(File file, int lineNumber, String content) {",,
FALSE,FALSE,FALSE,FALSE,TRY,1736,try {,,
FALSE,FALSE,FALSE,FALSE,TRY,1737,,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1738,BufferedReader lnr = new BufferedReader(new FileReader(file));,,
FALSE,FALSE,FALSE,FALSE,TRY,1739,,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1740,StringBuffer sb = new StringBuffer();,,
FALSE,FALSE,FALSE,FALSE,TRY,1741,,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1742,int lineCursor = 0;,,
FALSE,FALSE,FALSE,FALSE,WHILE,1743,while (lnr.ready()) {,,
FALSE,FALSE,FALSE,FALSE,IF,1744,if (lineCursor == lineNumber) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1745,sb.append(content + CARRIAGE_RETURN);,,
FALSE,FALSE,FALSE,FALSE,IF,1746,},,
FALSE,FALSE,FALSE,FALSE,WHILE,1747,,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1748,String linha = lnr.readLine();,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1749,sb.append(linha + CARRIAGE_RETURN);,,
FALSE,FALSE,FALSE,FALSE,WHILE,1750,,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1751,lineCursor++;,,
FALSE,FALSE,FALSE,FALSE,WHILE,1752,},,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1753,lnr.close();,,
FALSE,FALSE,FALSE,FALSE,TRY,1754,,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1755,FileWriter fw = new FileWriter(file);,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1756,fw.write(sb.toString());,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1757,fw.close();,,
FALSE,FALSE,FALSE,FALSE,TRY,1758,,,
FALSE,FALSE,FALSE,FALSE,TRY,1759,} catch (IOException e) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1760,e.printStackTrace();,,
FALSE,FALSE,FALSE,FALSE,TRY,1761,},,
FALSE,FALSE,FALSE,FALSE,,1762,},,
FALSE,FALSE,FALSE,FALSE,,1763,,,
FALSE,FALSE,FALSE,FALSE,,1764,/*,,
FALSE,FALSE,FALSE,FALSE,,1765,* Removed - use https://github.com/rrice/java-string-similarity public static double,,
FALSE,FALSE,FALSE,FALSE,,1766,"* similarScore(String str1, String str2) { SimilarityStrategy strategy = new",,
FALSE,FALSE,FALSE,FALSE,,1767,* JaroWinklerStrategy(); StringSimilarityService service = new StringSimilarityServiceImpl(,,
FALSE,FALSE,FALSE,FALSE,,1768,* strategy);,,
FALSE,FALSE,FALSE,FALSE,,1769,*,,
FALSE,FALSE,FALSE,FALSE,,1770,"* return service.score(str1, str2); } public static String[] fileSimilar(File dir, String name) {",,
FALSE,FALSE,FALSE,FALSE,,1771,"* return fileSimilar(dir, name, 50); }",,
FALSE,FALSE,FALSE,FALSE,,1772,*,,
FALSE,FALSE,FALSE,FALSE,,1773,"* public static String[] fileSimilar(File dir, String name, int adherence) { File mostSimilar =",,
FALSE,FALSE,FALSE,FALSE,,1774,* null; double similarity = 0;,,
FALSE,FALSE,FALSE,FALSE,,1775,*,,
FALSE,FALSE,FALSE,FALSE,,1776,* for (File arq : dir.listFiles()) { if (arq.isDirectory()) { continue; },,
FALSE,FALSE,FALSE,FALSE,,1777,*,,
FALSE,FALSE,FALSE,FALSE,,1778,"* double score = similarScore(arq.getName(), name);",,
FALSE,FALSE,FALSE,FALSE,,1779,*,,
FALSE,FALSE,FALSE,FALSE,,1780,* if (score >= (adherence / 100.0) && score > similarity) { mostSimilar = arq; similarity =,,
FALSE,FALSE,FALSE,FALSE,,1781,* score; } },,
FALSE,FALSE,FALSE,FALSE,,1782,*,,
FALSE,FALSE,FALSE,FALSE,,1783,"* if (mostSimilar == null) { return new String[] { null, ""0"" }; } return new String[] {",,
FALSE,FALSE,FALSE,FALSE,,1784,"* mostSimilar.getName(), String.valueOf(similarity) }; }",,
FALSE,FALSE,FALSE,FALSE,,1785,*/,,
FALSE,FALSE,FALSE,FALSE,,1786,,,
FALSE,FALSE,FALSE,FALSE,,1787,public static String trimClean(String text) {,,
FALSE,FALSE,FALSE,FALSE,,1788,,,
TRUE,FALSE,TRUE,TRUE,WHILE,1789,while (text.contains(CARRIAGE_RETURN)) {,Output Check / String Processing,
TRUE,FALSE,TRUE,TRUE,EXPRESSION,1790,"text = text.replace(CARRIAGE_RETURN, "" "");",result update / String Processing,
FALSE,FALSE,FALSE,FALSE,WHILE,1791,},,
FALSE,FALSE,FALSE,FALSE,,1792,,,
TRUE,FALSE,TRUE,TRUE,WHILE,1793,while (text.contains(CARRIAGE)) {,Output Check / String Processing,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1794,"text = text.replace(CARRIAGE, "" "");",,
FALSE,FALSE,FALSE,FALSE,WHILE,1795,},,
FALSE,FALSE,FALSE,FALSE,,1796,,,
TRUE,FALSE,TRUE,TRUE,WHILE,1797,while (text.contains(RETURN)) {,Output Check / String Processing,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1798,"text = text.replace(RETURN, "" "");",,
FALSE,FALSE,FALSE,FALSE,WHILE,1799,},,
FALSE,FALSE,FALSE,FALSE,,1800,,,
TRUE,FALSE,TRUE,TRUE,WHILE,1801,"while (text.contains(""\b"")) {",Output Check / String Processing,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1802,"text = text.replace(""\b"", "" "");",,
FALSE,FALSE,FALSE,FALSE,WHILE,1803,},,
FALSE,FALSE,FALSE,FALSE,,1804,,,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,1805,"text = text.replaceAll(""\\s+"", "" "");",,
FALSE,FALSE,FALSE,FALSE,,1806,,,
TRUE,FALSE,FALSE,FALSE,RETURN,1807,return text.trim();,,
FALSE,FALSE,FALSE,FALSE,,1808,},,
FALSE,FALSE,FALSE,FALSE,,1809,,,
FALSE,FALSE,FALSE,FALSE,,1810,,,
FALSE,FALSE,FALSE,FALSE,,1811,"public static boolean matches(String pattern, String command) {",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1812,Pattern patternObject = Pattern.compile(pattern);,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1813,Matcher m = patternObject.matcher(command);,,
FALSE,FALSE,FALSE,FALSE,,1814,,,
FALSE,FALSE,FALSE,FALSE,RETURN,1815,return m.find();,,
FALSE,FALSE,FALSE,FALSE,,1816,},,
FALSE,FALSE,FALSE,FALSE,,1817,,,
FALSE,FALSE,FALSE,FALSE,,1818,,,
FALSE,FALSE,FALSE,FALSE,,1819,,,
FALSE,FALSE,FALSE,FALSE,,1820,"public static String codePageConvert(String from, String to, String s) {",,
FALSE,FALSE,FALSE,FALSE,TRY,1821,try {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1822,"return new String(s.getBytes(from), to);",,
FALSE,FALSE,FALSE,FALSE,TRY,1823,} catch (UnsupportedEncodingException e) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1824,e.printStackTrace();,,
FALSE,FALSE,FALSE,FALSE,TRY,1825,},,
FALSE,FALSE,FALSE,FALSE,RETURN,1826,"return """";",,
FALSE,FALSE,FALSE,FALSE,,1827,},,
FALSE,FALSE,FALSE,FALSE,,1828,,,
FALSE,FALSE,FALSE,FALSE,,1829,"public static int charCount(String str, char c) {",,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1830,int result = 0;,,
TRUE,FALSE,FALSE,FALSE,FOR,1831,for (int i = 0; i < str.length(); i++) {,,
TRUE,FALSE,FALSE,FALSE,IF,1832,if (str.charAt(i) == c),,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,1833,result++;,,
FALSE,FALSE,FALSE,FALSE,FOR,1834,},,
FALSE,FALSE,FALSE,FALSE,,1835,,,
TRUE,FALSE,FALSE,FALSE,RETURN,1836,return result;,,
FALSE,FALSE,FALSE,FALSE,,1837,},,
FALSE,FALSE,FALSE,FALSE,,1838,,,
FALSE,FALSE,FALSE,FALSE,,1839,public static boolean hasLetter(String s) {,,
TRUE,FALSE,FALSE,FALSE,RETURN,1840,return HAS_LETTER_PATTERN.matcher(s).find();,,
FALSE,FALSE,FALSE,FALSE,,1841,},,
FALSE,FALSE,FALSE,FALSE,,1842,,,
FALSE,FALSE,FALSE,FALSE,,1843,"public static String insertSubString(String str, String substr, int pos) {",,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1844,"String newStr = """";",,
TRUE,FALSE,FALSE,FALSE,IF,1845,if (pos > 0) {,,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,1846,"newStr = str.substring(0, pos);",,
FALSE,FALSE,FALSE,FALSE,IF,1847,},,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,1848,newStr += substr;,,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,1849,newStr += str.substring(pos);,,
FALSE,FALSE,FALSE,FALSE,,1850,,,
TRUE,FALSE,FALSE,FALSE,RETURN,1851,return newStr;,,
FALSE,FALSE,FALSE,FALSE,,1852,},,
FALSE,FALSE,FALSE,FALSE,,1853,,,
FALSE,FALSE,FALSE,FALSE,,1854,public static String[] extractSuffixInt(String str) {,,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1855,"Pattern regexPattern = Pattern.compile(""(.*?)(\\d+)"");",,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1856,Matcher m = regexPattern.matcher(str);,,
FALSE,FALSE,FALSE,FALSE,,1857,,,
TRUE,FALSE,FALSE,FALSE,IF,1858,if (m.matches()) {,,
TRUE,FALSE,FALSE,FALSE,RETURN,1859,"return new String[] {m.group(1), m.group(2)};",,
FALSE,FALSE,FALSE,FALSE,IF,1860,},,
FALSE,FALSE,FALSE,FALSE,,1861,,,
TRUE,FALSE,FALSE,FALSE,RETURN,1862,"return new String[] {str, ""0""};",,
FALSE,FALSE,FALSE,FALSE,,1863,},,
FALSE,FALSE,FALSE,FALSE,,1864,,,
FALSE,FALSE,FALSE,FALSE,,1865,public static String invert(String s) {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1866,"String temp = """";",,
FALSE,FALSE,FALSE,FALSE,FOR,1867,for (int i = s.length() - 1; i >= 0; i--),,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1868,temp += s.charAt(i);,,
FALSE,FALSE,FALSE,FALSE,RETURN,1869,return temp;,,
FALSE,FALSE,FALSE,FALSE,,1870,},,
FALSE,FALSE,FALSE,FALSE,,1871,,,
FALSE,FALSE,FALSE,FALSE,,1872,"public static List<String> getLinesThatContainsIgnoreCase(String str, String sub) {",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1873,List<String> lines = new ArrayList<String>();,,
FALSE,FALSE,FALSE,FALSE,,1874,,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1875,"String[] strArr = str.replace(""\r\n"", ""\n"").split(""\n"");",,
FALSE,FALSE,FALSE,FALSE,,1876,,,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,1877,for (String line : strArr) {,,
FALSE,FALSE,FALSE,FALSE,IF,1878,if (line.toLowerCase().contains(sub.toLowerCase())) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1879,lines.add(line);,,
FALSE,FALSE,FALSE,FALSE,IF,1880,},,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,1881,},,
FALSE,FALSE,FALSE,FALSE,,1882,,,
FALSE,FALSE,FALSE,FALSE,RETURN,1883,return lines;,,
FALSE,FALSE,FALSE,FALSE,,1884,},,
FALSE,FALSE,FALSE,FALSE,,1885,,,
FALSE,FALSE,FALSE,FALSE,,1886,"public static List<String> getLinesThatContains(String str, String sub) {",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1887,List<String> lines = new ArrayList<String>();,,
FALSE,FALSE,FALSE,FALSE,,1888,,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1889,"String[] strArr = str.replace(""\r\n"", ""\n"").split(""\n"");",,
FALSE,FALSE,FALSE,FALSE,,1890,,,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,1891,for (String line : strArr) {,,
FALSE,FALSE,FALSE,FALSE,IF,1892,if (line.contains(sub)) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1893,lines.add(line);,,
FALSE,FALSE,FALSE,FALSE,IF,1894,},,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,1895,},,
FALSE,FALSE,FALSE,FALSE,,1896,,,
FALSE,FALSE,FALSE,FALSE,RETURN,1897,return lines;,,
FALSE,FALSE,FALSE,FALSE,,1898,},,
FALSE,FALSE,FALSE,FALSE,,1899,,,
FALSE,FALSE,FALSE,FALSE,,1900,"public static List<String> getLinesThatNotContains(String str, String sub) {",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1901,List<String> lines = new ArrayList<String>();,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1902,"String[] strArr = str.replace(""\r\n"", ""\n"").split(""\n"");",,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,1903,for (String line : strArr) {,,
FALSE,FALSE,FALSE,FALSE,IF,1904,if (!line.contains(sub)) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1905,lines.add(line);,,
FALSE,FALSE,FALSE,FALSE,IF,1906,},,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,1907,},,
FALSE,FALSE,FALSE,FALSE,RETURN,1908,return lines;,,
FALSE,FALSE,FALSE,FALSE,,1909,},,
FALSE,FALSE,FALSE,FALSE,,1910,,,
FALSE,FALSE,FALSE,FALSE,,1911,"public static List<String> getLinesThatNotContainsIgnoreCase(String str, String sub) {",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1912,List<String> lines = new ArrayList<String>();,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1913,"String[] strArr = str.replace(""\r\n"", ""\n"").split(""\n"");",,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,1914,for (String line : strArr) {,,
FALSE,FALSE,FALSE,FALSE,IF,1915,if (!line.toLowerCase().contains(sub.toLowerCase())) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1916,lines.add(line);,,
FALSE,FALSE,FALSE,FALSE,IF,1917,},,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,1918,},,
FALSE,FALSE,FALSE,FALSE,RETURN,1919,return lines;,,
FALSE,FALSE,FALSE,FALSE,,1920,},,
FALSE,FALSE,FALSE,FALSE,,1921,,,
FALSE,FALSE,FALSE,FALSE,,1922,public static String firstLine(String s) {,,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,1923,"s = s.replace(""\r\n"", ""\n"");",,
TRUE,FALSE,FALSE,FALSE,IF,1924,"if (s.contains(""\n"")) {",,
TRUE,FALSE,FALSE,FALSE,RETURN,1925,"return s.split(""\n"")[0];",,
FALSE,FALSE,FALSE,FALSE,IF,1926,},,
TRUE,FALSE,FALSE,FALSE,RETURN,1927,return s;,,
FALSE,FALSE,FALSE,FALSE,,1928,},,
FALSE,FALSE,FALSE,FALSE,,1929,,,
FALSE,FALSE,FALSE,FALSE,,1930,public static String lastLine(String s) {,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,1931,"s = s.replace(""\r\n"", ""\n"");",,
FALSE,FALSE,FALSE,FALSE,,1932,,,
FALSE,FALSE,FALSE,FALSE,IF,1933,"if (s.contains(""\n"")) {",,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1934,"String[] sa = s.split(""\n"");",,
FALSE,FALSE,FALSE,FALSE,RETURN,1935,return sa[sa.length - 1];,,
FALSE,FALSE,FALSE,FALSE,IF,1936,},,
FALSE,FALSE,FALSE,FALSE,RETURN,1937,return s;,,
FALSE,FALSE,FALSE,FALSE,,1938,},,
FALSE,FALSE,FALSE,FALSE,,1939,,,
FALSE,FALSE,FALSE,FALSE,,1940,public static boolean isBinaryExtension(String name) {,,
FALSE,FALSE,FALSE,FALSE,IF,1941,"if (name.endsWith("".r"") || name.endsWith("".jpeg"") || name.endsWith("".jpg"")",,
FALSE,FALSE,FALSE,FALSE,IF,1942,"|| name.endsWith("".gif"") || name.endsWith("".png"") || name.endsWith("".class"")",,
FALSE,FALSE,FALSE,FALSE,IF,1943,"|| name.endsWith("".swf"") || name.endsWith("".svn-base"") || name.endsWith("".exe"")",,
FALSE,FALSE,FALSE,FALSE,IF,1944,"|| name.endsWith("".mp3"") || name.endsWith("".mp4"") || name.endsWith("".dll"")",,
FALSE,FALSE,FALSE,FALSE,IF,1945,"|| name.endsWith("".swc"") || name.endsWith("".avi"") || name.endsWith("".mpg"")",,
FALSE,FALSE,FALSE,FALSE,IF,1946,"|| name.endsWith("".mkv"") || name.endsWith("".mov"") || name.endsWith("".bmp"")",,
FALSE,FALSE,FALSE,FALSE,IF,1947,"|| name.endsWith("".lk"") || name.endsWith("".msi"") || name.endsWith("".r"")",,
FALSE,FALSE,FALSE,FALSE,IF,1948,"|| name.endsWith("".jar"") || name.endsWith("".rar"") || name.endsWith("".zip"")",,
FALSE,FALSE,FALSE,FALSE,IF,1949,"|| name.endsWith("".gif"") || name.endsWith("".gz"") || name.endsWith("".wrx"")",,
FALSE,FALSE,FALSE,FALSE,IF,1950,"|| name.endsWith("".swf"") || name.endsWith("".fla"") || name.endsWith("".ico"")",,
FALSE,FALSE,FALSE,FALSE,IF,1951,"|| name.endsWith("".cur"") || name.endsWith("".wrx"") || name.endsWith("".db"")",,
FALSE,FALSE,FALSE,FALSE,IF,1952,"|| name.endsWith("".b1"") || name.endsWith("".d1"")) {",,
FALSE,FALSE,FALSE,FALSE,RETURN,1953,return true;,,
FALSE,FALSE,FALSE,FALSE,IF,1954,},,
FALSE,FALSE,FALSE,FALSE,RETURN,1955,return false;,,
FALSE,FALSE,FALSE,FALSE,,1956,},,
FALSE,FALSE,FALSE,FALSE,,1957,,,
FALSE,FALSE,FALSE,FALSE,,1958,public static boolean isEmail(String str) {,,
FALSE,FALSE,FALSE,FALSE,IF,1959,if (EMAIL_PATTERN.matcher(str).matches()) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1960,return true;,,
FALSE,FALSE,FALSE,FALSE,IF,1961,},,
FALSE,FALSE,FALSE,FALSE,RETURN,1962,return false;,,
FALSE,FALSE,FALSE,FALSE,,1963,},,
FALSE,FALSE,FALSE,FALSE,,1964,,,
FALSE,FALSE,FALSE,FALSE,,1965,public static boolean isCapitalized(String str) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1966,return Character.isUpperCase(str.charAt(0));,,
FALSE,FALSE,FALSE,FALSE,,1967,},,
FALSE,FALSE,FALSE,FALSE,,1968,,,
FALSE,FALSE,FALSE,FALSE,,1969,"public static boolean hasInvalidChar(String str, String validChars) {",,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1970,"Pattern regexChars = Pattern.compile(""[{}()\\[\\].+*?^$\\\\|]"");",,
TRUE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,1971,"String checkRegex = ""(["" + regexChars.matcher(validChars).replaceAll(""\\\\$0"") + ""])+"";",,
TRUE,FALSE,FALSE,FALSE,RETURN,1972,return !str.matches(checkRegex);,,
FALSE,FALSE,FALSE,FALSE,,1973,},,
FALSE,FALSE,FALSE,FALSE,,1974,,,
FALSE,FALSE,FALSE,FALSE,,1975,public static boolean hasJapaneseCharacter(String str) {,,
TRUE,FALSE,FALSE,FALSE,FOR_EACH,1976,for (char c : str.toCharArray()) {,,
TRUE,FALSE,FALSE,FALSE,IF,1977,if (JAPANESE_BLOCKS.contains(UnicodeBlock.of(c))) {,,
TRUE,FALSE,FALSE,FALSE,RETURN,1978,return true;,,
FALSE,FALSE,FALSE,FALSE,IF,1979,},,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,1980,},,
TRUE,FALSE,FALSE,TRUE,RETURN,1981,return false;,Default Return,
FALSE,FALSE,FALSE,FALSE,,1982,},,
FALSE,FALSE,FALSE,FALSE,,1983,,,
FALSE,FALSE,FALSE,FALSE,,1984,public static boolean hasChineseCharacter(String str) {,,
TRUE,FALSE,FALSE,FALSE,FOR_EACH,1985,for (char c : str.toCharArray()) {,,
TRUE,FALSE,FALSE,FALSE,IF,1986,if (CHINESE_BLOCKS.contains(UnicodeBlock.of(c))) {,,
TRUE,FALSE,FALSE,FALSE,RETURN,1987,return true;,,
FALSE,FALSE,FALSE,FALSE,IF,1988,},,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,1989,},,
TRUE,FALSE,FALSE,TRUE,RETURN,1990,return false;,Default Return,
FALSE,FALSE,FALSE,FALSE,,1991,},,
FALSE,FALSE,FALSE,FALSE,,1992,,,
FALSE,FALSE,FALSE,FALSE,,1993,public static boolean hasArabicCharacter(String str) {,,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,1994,for (char c : str.toCharArray()) {,,
FALSE,FALSE,FALSE,FALSE,IF,1995,if (ARABIC_BLOCKS.contains(UnicodeBlock.of(c))) {,,
FALSE,FALSE,FALSE,FALSE,RETURN,1996,return true;,,
FALSE,FALSE,FALSE,FALSE,IF,1997,},,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,1998,},,
FALSE,FALSE,FALSE,FALSE,RETURN,1999,return false;,,
FALSE,FALSE,FALSE,FALSE,,2000,},,
FALSE,FALSE,FALSE,FALSE,,2001,,,
FALSE,FALSE,FALSE,FALSE,,2002,public static void setToClipboard(String aString) {,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,2003,StringSelection stringSelection = new StringSelection(aString);,,
FALSE,FALSE,FALSE,FALSE,VARIABLE_DECLARATION,2004,Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();,,
FALSE,FALSE,FALSE,FALSE,EXPRESSION,2005,"clipboard.setContents(stringSelection, null);",,
FALSE,FALSE,FALSE,FALSE,,2006,},,
FALSE,FALSE,FALSE,FALSE,,2007,,,
FALSE,FALSE,FALSE,FALSE,,2008,"public static String getFromClipboard() throws HeadlessException, UnsupportedFlavorException,",,
FALSE,FALSE,FALSE,FALSE,,2009,IOException {,,
FALSE,FALSE,FALSE,FALSE,RETURN,2010,return (String) Toolkit.getDefaultToolkit().getSystemClipboard(),,
FALSE,FALSE,FALSE,FALSE,RETURN,2011,.getData(DataFlavor.stringFlavor);,,
FALSE,FALSE,FALSE,FALSE,,2012,},,
FALSE,FALSE,FALSE,FALSE,,2013,,,
FALSE,FALSE,FALSE,FALSE,,2014,/**,,
FALSE,FALSE,FALSE,FALSE,,2015,* Return tabular data,,
FALSE,FALSE,FALSE,FALSE,,2016,* @param labels Labels array,,
FALSE,FALSE,FALSE,FALSE,,2017,* @param data Data bidimensional array,,
FALSE,FALSE,FALSE,FALSE,,2018,* @param padding Total space between fields,,
FALSE,FALSE,FALSE,FALSE,,2019,* @return String,,
FALSE,FALSE,FALSE,FALSE,,2020,*/,,
FALSE,FALSE,FALSE,FALSE,,2021,"public static String getTabularData(String[] labels, String[][] data, int padding) {",,
TRUE,TRUE,TRUE,TRUE,VARIABLE_DECLARATION,2022,int[] size = new int[labels.length];,State Initialization,
FALSE,FALSE,FALSE,FALSE,,2023,,,
TRUE,TRUE,TRUE,TRUE,FOR,2024,for (int i = 0; i < labels.length; i++) {,Iteration,
TRUE,TRUE,TRUE,TRUE,EXPRESSION,2025,size[i] = labels[i].length() + padding;,Mathematical Compution,
FALSE,FALSE,FALSE,FALSE,FOR,2026,},,
FALSE,FALSE,FALSE,FALSE,,2027,,,
TRUE,TRUE,TRUE,TRUE,FOR_EACH,2028,for (String[] row : data) {,Data Loading,
TRUE,TRUE,TRUE,TRUE,FOR,2029,for (int i = 0; i < labels.length; i++) {,Data Loading,
TRUE,TRUE,TRUE,TRUE,IF,2030,if (row[i].length() >= size[i]) {,Data Loading,
TRUE,TRUE,TRUE,TRUE,EXPRESSION,2031,size[i] = row[i].length() + padding;,Data Loading,
FALSE,FALSE,FALSE,FALSE,IF,2032,},,
FALSE,FALSE,FALSE,FALSE,FOR,2033,},,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,2034,},,
FALSE,FALSE,FALSE,FALSE,,2035,,,
TRUE,TRUE,FALSE,FALSE,VARIABLE_DECLARATION,2036,StringBuffer tabularData = new StringBuffer();,Output Initialization,
FALSE,FALSE,FALSE,FALSE,,2037,,,
TRUE,TRUE,TRUE,TRUE,FOR,2038,for (int i = 0; i < labels.length; i++) {,Output Update,
TRUE,TRUE,TRUE,TRUE,EXPRESSION,2039,tabularData.append(labels[i]);,Output Update,
TRUE,TRUE,TRUE,TRUE,EXPRESSION,2040,"tabularData.append(fill(' ', size[i] - labels[i].length()));",Output Update,
FALSE,FALSE,FALSE,FALSE,FOR,2041,},,
FALSE,FALSE,FALSE,FALSE,,2042,,,
TRUE,TRUE,TRUE,TRUE,EXPRESSION,2043,"tabularData.append(""\n"");",Output Update,
FALSE,FALSE,FALSE,FALSE,,2044,,,
TRUE,TRUE,TRUE,TRUE,FOR,2045,for (int i = 0; i < labels.length; i++) {,Output Update,
TRUE,TRUE,TRUE,TRUE,EXPRESSION,2046,"tabularData.append(fill('=', size[i] - 1)).append("" "");",Output Update,
FALSE,FALSE,FALSE,FALSE,FOR,2047,},,
FALSE,FALSE,FALSE,FALSE,,2048,,,
TRUE,TRUE,TRUE,TRUE,EXPRESSION,2049,"tabularData.append(""\n"");",Output Update,
FALSE,FALSE,FALSE,FALSE,,2050,,,
FALSE,FALSE,FALSE,FALSE,,2051,,,
TRUE,TRUE,TRUE,TRUE,FOR_EACH,2052,for (String[] row : data) {,Output Update,
TRUE,TRUE,TRUE,TRUE,FOR,2053,for (int i = 0; i < labels.length; i++) {,Output Update,
TRUE,TRUE,TRUE,TRUE,EXPRESSION,2054,tabularData.append(row[i]);,Output Update,
TRUE,TRUE,TRUE,TRUE,EXPRESSION,2055,"tabularData.append(fill(' ', size[i] - row[i].length()));",Output Update,
FALSE,FALSE,FALSE,FALSE,FOR,2056,},,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,2057,,,
TRUE,TRUE,TRUE,TRUE,EXPRESSION,2058,"tabularData.append(""\n"");",Output Update,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,2059,},,
FALSE,FALSE,FALSE,FALSE,,2060,,,
TRUE,TRUE,FALSE,TRUE,RETURN,2061,return tabularData.toString();,Output return,
FALSE,FALSE,FALSE,FALSE,,2062,},,
FALSE,FALSE,FALSE,FALSE,,2063,,,
FALSE,FALSE,FALSE,FALSE,,2064,,,
FALSE,FALSE,FALSE,FALSE,,2065,,,
FALSE,FALSE,FALSE,FALSE,,2066,/**,,
FALSE,FALSE,FALSE,FALSE,,2067,* Replace text with HTML entities,,
FALSE,FALSE,FALSE,FALSE,,2068,* @param content Content,,
FALSE,FALSE,FALSE,FALSE,,2069,* @return Replaced content,,
FALSE,FALSE,FALSE,FALSE,,2070,*/,,
FALSE,FALSE,FALSE,FALSE,,2071,public static String replaceWithHtmlEntities(String content) {,,
TRUE,FALSE,FALSE,FALSE,RETURN,2072,"return replaceWithHtmlEntities(content, escapeStrings);",,
FALSE,FALSE,FALSE,FALSE,,2073,},,
FALSE,FALSE,FALSE,FALSE,,2074,,,
FALSE,FALSE,FALSE,FALSE,,2075,/**,,
FALSE,FALSE,FALSE,FALSE,,2076,* Replace text with HTML entities,,
FALSE,FALSE,FALSE,FALSE,,2077,* @param content Content,,
FALSE,FALSE,FALSE,FALSE,,2078,* @param map Map to replace,,
FALSE,FALSE,FALSE,FALSE,,2079,* @return Replaced content,,
FALSE,FALSE,FALSE,FALSE,,2080,*/,,
FALSE,FALSE,FALSE,FALSE,,2081,"public static String replaceWithHtmlEntities(String content, Map<String, Character> map) {",,
FALSE,FALSE,FALSE,FALSE,,2082,,,
TRUE,FALSE,FALSE,FALSE,FOR_EACH,2083,"for (Entry<String, Character> entry : map.entrySet()) {",,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,2084,,,
TRUE,FALSE,FALSE,FALSE,IF,2085,if (content.indexOf(entry.getValue()) != -1) {,,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,2086,"content = content.replace(String.valueOf(entry.getValue()), entry.getKey());",,
FALSE,FALSE,FALSE,FALSE,IF,2087,},,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,2088,,,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,2089,},,
FALSE,FALSE,FALSE,FALSE,,2090,,,
TRUE,FALSE,FALSE,FALSE,RETURN,2091,return content;,,
FALSE,FALSE,FALSE,FALSE,,2092,},,
FALSE,FALSE,FALSE,FALSE,,2093,,,
FALSE,FALSE,FALSE,FALSE,,2094,/**,,
FALSE,FALSE,FALSE,FALSE,,2095,* Replace HTML entities,,
FALSE,FALSE,FALSE,FALSE,,2096,* @param content Content,,
FALSE,FALSE,FALSE,FALSE,,2097,* @return Replaced content,,
FALSE,FALSE,FALSE,FALSE,,2098,*/,,
FALSE,FALSE,FALSE,FALSE,,2099,public static String replaceHtmlEntities(String content) {,,
TRUE,FALSE,TRUE,FALSE,RETURN,2100,"return replaceHtmlEntities(content, escapeStrings);",String Processing,
FALSE,FALSE,FALSE,FALSE,,2101,},,
FALSE,FALSE,FALSE,FALSE,,2102,,,
FALSE,FALSE,FALSE,FALSE,,2103,,,
FALSE,FALSE,FALSE,FALSE,,2104,/**,,
FALSE,FALSE,FALSE,FALSE,,2105,* Replace HTML entities,,
FALSE,FALSE,FALSE,FALSE,,2106,* @param content Content,,
FALSE,FALSE,FALSE,FALSE,,2107,* @param map Map,,
FALSE,FALSE,FALSE,FALSE,,2108,* @return Replaced content,,
FALSE,FALSE,FALSE,FALSE,,2109,*/,,
FALSE,FALSE,FALSE,FALSE,,2110,"public static String replaceHtmlEntities(String content, Map<String, Character> map) {",,
FALSE,FALSE,FALSE,FALSE,,2111,,,
TRUE,FALSE,FALSE,FALSE,FOR_EACH,2112,"for (Entry<String, Character> entry : escapeStrings.entrySet()) {",,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,2113,,,
TRUE,FALSE,FALSE,FALSE,IF,2114,if (content.indexOf(entry.getKey()) != -1) {,,
TRUE,FALSE,FALSE,FALSE,EXPRESSION,2115,"content = content.replace(entry.getKey(), String.valueOf(entry.getValue()));",,
FALSE,FALSE,FALSE,FALSE,IF,2116,},,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,2117,,,
FALSE,FALSE,FALSE,FALSE,FOR_EACH,2118,},,
FALSE,FALSE,FALSE,FALSE,,2119,,,
TRUE,FALSE,FALSE,FALSE,RETURN,2120,return content;,,
FALSE,FALSE,FALSE,FALSE,,2121,},,
FALSE,FALSE,FALSE,FALSE,,2122,},,